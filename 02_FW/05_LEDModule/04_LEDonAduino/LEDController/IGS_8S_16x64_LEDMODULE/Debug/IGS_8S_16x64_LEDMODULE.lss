
IGS_8S_16x64_LEDMODULE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  000029d6  00002a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ee  00800270  00800270  00002ada  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00002b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f7f0  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000273b  00000000  00000000  0001293c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fd1  00000000  00000000  00015077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c80  00000000  00000000  00019048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036ea  00000000  00000000  0001acc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d5bc  00000000  00000000  0001e3b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  0002b96e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c3       	rjmp	.+1718   	; 0x6b8 <__ctors_end>
       2:	00 00       	nop
       4:	89 c3       	rjmp	.+1810   	; 0x718 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c3       	rjmp	.+1806   	; 0x718 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c3       	rjmp	.+1802   	; 0x718 <__bad_interrupt>
       e:	00 00       	nop
      10:	83 c3       	rjmp	.+1798   	; 0x718 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c3       	rjmp	.+1794   	; 0x718 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c3       	rjmp	.+1790   	; 0x718 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c3       	rjmp	.+1786   	; 0x718 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c3       	rjmp	.+1782   	; 0x718 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c3       	rjmp	.+1778   	; 0x718 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c3       	rjmp	.+1774   	; 0x718 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	75 c3       	rjmp	.+1770   	; 0x718 <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c3       	rjmp	.+1766   	; 0x718 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c3       	rjmp	.+1762   	; 0x718 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c3       	rjmp	.+1758   	; 0x718 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c3       	rjmp	.+1754   	; 0x718 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6b c3       	rjmp	.+1750   	; 0x718 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c3       	rjmp	.+1746   	; 0x718 <__bad_interrupt>
      46:	00 00       	nop
      48:	67 c3       	rjmp	.+1742   	; 0x718 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	65 c3       	rjmp	.+1738   	; 0x718 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__vector_20>
      54:	61 c3       	rjmp	.+1730   	; 0x718 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c3       	rjmp	.+1726   	; 0x718 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__vector_23>
      5e:	00 00       	nop
      60:	5b c3       	rjmp	.+1718   	; 0x718 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__vector_25>
      68:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__vector_26>
      6c:	55 c3       	rjmp	.+1706   	; 0x718 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c3       	rjmp	.+1702   	; 0x718 <__bad_interrupt>
      72:	00 00       	nop
      74:	51 c3       	rjmp	.+1698   	; 0x718 <__bad_interrupt>
      76:	00 00       	nop
      78:	4f c3       	rjmp	.+1694   	; 0x718 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c3       	rjmp	.+1690   	; 0x718 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c3       	rjmp	.+1686   	; 0x718 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c3       	rjmp	.+1682   	; 0x718 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c3       	rjmp	.+1678   	; 0x718 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 c3       	rjmp	.+1674   	; 0x718 <__bad_interrupt>
      8e:	00 00       	nop
      90:	43 c3       	rjmp	.+1670   	; 0x718 <__bad_interrupt>
      92:	00 00       	nop
      94:	41 c3       	rjmp	.+1666   	; 0x718 <__bad_interrupt>
      96:	00 00       	nop
      98:	3f c3       	rjmp	.+1662   	; 0x718 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3d c3       	rjmp	.+1658   	; 0x718 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3b c3       	rjmp	.+1654   	; 0x718 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	39 c3       	rjmp	.+1650   	; 0x718 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	37 c3       	rjmp	.+1646   	; 0x718 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	35 c3       	rjmp	.+1642   	; 0x718 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	33 c3       	rjmp	.+1638   	; 0x718 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	31 c3       	rjmp	.+1634   	; 0x718 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2f c3       	rjmp	.+1630   	; 0x718 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2d c3       	rjmp	.+1626   	; 0x718 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2b c3       	rjmp	.+1622   	; 0x718 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	29 c3       	rjmp	.+1618   	; 0x718 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	27 c3       	rjmp	.+1614   	; 0x718 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	25 c3       	rjmp	.+1610   	; 0x718 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	23 c3       	rjmp	.+1606   	; 0x718 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	21 c3       	rjmp	.+1602   	; 0x718 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	1f c3       	rjmp	.+1598   	; 0x718 <__bad_interrupt>
      da:	00 00       	nop
      dc:	1d c3       	rjmp	.+1594   	; 0x718 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1b c3       	rjmp	.+1590   	; 0x718 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b2 03       	fmuls	r19, r18
      e6:	b4 03       	fmuls	r19, r20
      e8:	b6 03       	fmuls	r19, r22
      ea:	b8 03       	fmulsu	r19, r16
      ec:	bb 03       	fmulsu	r19, r19
      ee:	bd 03       	fmulsu	r19, r21
      f0:	c0 03       	fmuls	r20, r16
      f2:	c4 03       	fmuls	r20, r20

000000f4 <__trampolines_end>:
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 3e       	cpi	r16, 0xE0	; 224
      fa:	5b 4f       	sbci	r21, 0xFB	; 251
      fc:	5b 3e       	cpi	r21, 0xEB	; 235
      fe:	3e 6b       	ori	r19, 0xBE	; 190
     100:	4f 6b       	ori	r20, 0xBF	; 191
     102:	3e 1c       	adc	r3, r14
     104:	3e 7c       	andi	r19, 0xCE	; 206
     106:	3e 1c       	adc	r3, r14
     108:	18 3c       	cpi	r17, 0xC8	; 200
     10a:	7e 3c       	cpi	r23, 0xCE	; 206
     10c:	18 1c       	adc	r1, r8
     10e:	57 7d       	andi	r21, 0xD7	; 215
     110:	57 1c       	adc	r5, r7
     112:	1c 5e       	subi	r17, 0xEC	; 236
     114:	7f 5e       	subi	r23, 0xEF	; 239
     116:	1c 00       	.word	0x001c	; ????
     118:	18 3c       	cpi	r17, 0xC8	; 200
     11a:	18 00       	.word	0x0018	; ????
     11c:	ff e7       	ldi	r31, 0x7F	; 127
     11e:	c3 e7       	ldi	r28, 0x73	; 115
     120:	ff 00       	.word	0x00ff	; ????
     122:	18 24       	eor	r1, r8
     124:	18 00       	.word	0x0018	; ????
     126:	ff e7       	ldi	r31, 0x7F	; 127
     128:	db e7       	ldi	r29, 0x7B	; 123
     12a:	ff 30       	cpi	r31, 0x0F	; 15
     12c:	48 3a       	cpi	r20, 0xA8	; 168
     12e:	06 0e       	add	r0, r22
     130:	26 29       	or	r18, r6
     132:	79 29       	or	r23, r9
     134:	26 40       	sbci	r18, 0x06	; 6
     136:	7f 05       	cpc	r23, r15
     138:	05 07       	cpc	r16, r21
     13a:	40 7f       	andi	r20, 0xF0	; 240
     13c:	05 25       	eor	r16, r5
     13e:	3f 5a       	subi	r19, 0xAF	; 175
     140:	3c e7       	ldi	r19, 0x7C	; 124
     142:	3c 5a       	subi	r19, 0xAC	; 172
     144:	7f 3e       	cpi	r23, 0xEF	; 239
     146:	1c 1c       	adc	r1, r12
     148:	08 08       	sbc	r0, r8
     14a:	1c 1c       	adc	r1, r12
     14c:	3e 7f       	andi	r19, 0xFE	; 254
     14e:	14 22       	and	r1, r20
     150:	7f 22       	and	r7, r31
     152:	14 5f       	subi	r17, 0xF4	; 244
     154:	5f 00       	.word	0x005f	; ????
     156:	5f 5f       	subi	r21, 0xFF	; 255
     158:	06 09       	sbc	r16, r6
     15a:	7f 01       	movw	r14, r30
     15c:	7f 00       	.word	0x007f	; ????
     15e:	66 89       	ldd	r22, Z+22	; 0x16
     160:	95 6a       	ori	r25, 0xA5	; 165
     162:	60 60       	ori	r22, 0x00	; 0
     164:	60 60       	ori	r22, 0x00	; 0
     166:	60 94       	com	r6
     168:	a2 ff       	sbrs	r26, 2
     16a:	a2 94       	swap	r10
     16c:	08 04       	cpc	r0, r8
     16e:	7e 04       	cpc	r7, r14
     170:	08 10       	cpse	r0, r8
     172:	20 7e       	andi	r18, 0xE0	; 224
     174:	20 10       	cpse	r2, r0
     176:	08 08       	sbc	r0, r8
     178:	2a 1c       	adc	r2, r10
     17a:	08 08       	sbc	r0, r8
     17c:	1c 2a       	or	r1, r28
     17e:	08 08       	sbc	r0, r8
     180:	1e 10       	cpse	r1, r14
     182:	10 10       	cpse	r1, r0
     184:	10 0c       	add	r1, r0
     186:	1e 0c       	add	r1, r14
     188:	1e 0c       	add	r1, r14
     18a:	30 38       	cpi	r19, 0x80	; 128
     18c:	3e 38       	cpi	r19, 0x8E	; 142
     18e:	30 06       	cpc	r3, r16
     190:	0e 3e       	cpi	r16, 0xEE	; 238
     192:	0e 06       	cpc	r0, r30
     194:	00 00       	nop
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	00 5f       	subi	r16, 0xF0	; 240
     19c:	00 00       	nop
     19e:	00 07       	cpc	r16, r16
     1a0:	00 07       	cpc	r16, r16
     1a2:	00 14       	cp	r0, r0
     1a4:	7f 14       	cp	r7, r15
     1a6:	7f 14       	cp	r7, r15
     1a8:	24 2a       	or	r2, r20
     1aa:	7f 2a       	or	r7, r31
     1ac:	12 23       	and	r17, r18
     1ae:	13 08       	sbc	r1, r3
     1b0:	64 62       	ori	r22, 0x24	; 36
     1b2:	36 49       	sbci	r19, 0x96	; 150
     1b4:	56 20       	and	r5, r6
     1b6:	50 00       	.word	0x0050	; ????
     1b8:	08 07       	cpc	r16, r24
     1ba:	03 00       	.word	0x0003	; ????
     1bc:	00 1c       	adc	r0, r0
     1be:	22 41       	sbci	r18, 0x12	; 18
     1c0:	00 00       	nop
     1c2:	41 22       	and	r4, r17
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	2a 1c       	adc	r2, r10
     1c8:	7f 1c       	adc	r7, r15
     1ca:	2a 08       	sbc	r2, r10
     1cc:	08 3e       	cpi	r16, 0xE8	; 232
     1ce:	08 08       	sbc	r0, r8
     1d0:	00 80       	ld	r0, Z
     1d2:	70 30       	cpi	r23, 0x00	; 0
     1d4:	00 08       	sbc	r0, r0
     1d6:	08 08       	sbc	r0, r8
     1d8:	08 08       	sbc	r0, r8
     1da:	00 00       	nop
     1dc:	60 60       	ori	r22, 0x00	; 0
     1de:	00 20       	and	r0, r0
     1e0:	10 08       	sbc	r1, r0
     1e2:	04 02       	muls	r16, r20
     1e4:	3e 51       	subi	r19, 0x1E	; 30
     1e6:	49 45       	sbci	r20, 0x59	; 89
     1e8:	3e 00       	.word	0x003e	; ????
     1ea:	42 7f       	andi	r20, 0xF2	; 242
     1ec:	40 00       	.word	0x0040	; ????
     1ee:	72 49       	sbci	r23, 0x92	; 146
     1f0:	49 49       	sbci	r20, 0x99	; 153
     1f2:	46 21       	and	r20, r6
     1f4:	41 49       	sbci	r20, 0x91	; 145
     1f6:	4d 33       	cpi	r20, 0x3D	; 61
     1f8:	18 14       	cp	r1, r8
     1fa:	12 7f       	andi	r17, 0xF2	; 242
     1fc:	10 27       	eor	r17, r16
     1fe:	45 45       	sbci	r20, 0x55	; 85
     200:	45 39       	cpi	r20, 0x95	; 149
     202:	3c 4a       	sbci	r19, 0xAC	; 172
     204:	49 49       	sbci	r20, 0x99	; 153
     206:	31 41       	sbci	r19, 0x11	; 17
     208:	21 11       	cpse	r18, r1
     20a:	09 07       	cpc	r16, r25
     20c:	36 49       	sbci	r19, 0x96	; 150
     20e:	49 49       	sbci	r20, 0x99	; 153
     210:	36 46       	sbci	r19, 0x66	; 102
     212:	49 49       	sbci	r20, 0x99	; 153
     214:	29 1e       	adc	r2, r25
     216:	00 00       	nop
     218:	14 00       	.word	0x0014	; ????
     21a:	00 00       	nop
     21c:	40 34       	cpi	r20, 0x40	; 64
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	14 22       	and	r1, r20
     224:	41 14       	cp	r4, r1
     226:	14 14       	cp	r1, r4
     228:	14 14       	cp	r1, r4
     22a:	00 41       	sbci	r16, 0x10	; 16
     22c:	22 14       	cp	r2, r2
     22e:	08 02       	muls	r16, r24
     230:	01 59       	subi	r16, 0x91	; 145
     232:	09 06       	cpc	r0, r25
     234:	3e 41       	sbci	r19, 0x1E	; 30
     236:	5d 59       	subi	r21, 0x9D	; 157
     238:	4e 7c       	andi	r20, 0xCE	; 206
     23a:	12 11       	cpse	r17, r2
     23c:	12 7c       	andi	r17, 0xC2	; 194
     23e:	7f 49       	sbci	r23, 0x9F	; 159
     240:	49 49       	sbci	r20, 0x99	; 153
     242:	36 3e       	cpi	r19, 0xE6	; 230
     244:	41 41       	sbci	r20, 0x11	; 17
     246:	41 22       	and	r4, r17
     248:	7f 41       	sbci	r23, 0x1F	; 31
     24a:	41 41       	sbci	r20, 0x11	; 17
     24c:	3e 7f       	andi	r19, 0xFE	; 254
     24e:	49 49       	sbci	r20, 0x99	; 153
     250:	49 41       	sbci	r20, 0x19	; 25
     252:	7f 09       	sbc	r23, r15
     254:	09 09       	sbc	r16, r9
     256:	01 3e       	cpi	r16, 0xE1	; 225
     258:	41 41       	sbci	r20, 0x11	; 17
     25a:	51 73       	andi	r21, 0x31	; 49
     25c:	7f 08       	sbc	r7, r15
     25e:	08 08       	sbc	r0, r8
     260:	7f 00       	.word	0x007f	; ????
     262:	41 7f       	andi	r20, 0xF1	; 241
     264:	41 00       	.word	0x0041	; ????
     266:	20 40       	sbci	r18, 0x00	; 0
     268:	41 3f       	cpi	r20, 0xF1	; 241
     26a:	01 7f       	andi	r16, 0xF1	; 241
     26c:	08 14       	cp	r0, r8
     26e:	22 41       	sbci	r18, 0x12	; 18
     270:	7f 40       	sbci	r23, 0x0F	; 15
     272:	40 40       	sbci	r20, 0x00	; 0
     274:	40 7f       	andi	r20, 0xF0	; 240
     276:	02 1c       	adc	r0, r2
     278:	02 7f       	andi	r16, 0xF2	; 242
     27a:	7f 04       	cpc	r7, r15
     27c:	08 10       	cpse	r0, r8
     27e:	7f 3e       	cpi	r23, 0xEF	; 239
     280:	41 41       	sbci	r20, 0x11	; 17
     282:	41 3e       	cpi	r20, 0xE1	; 225
     284:	7f 09       	sbc	r23, r15
     286:	09 09       	sbc	r16, r9
     288:	06 3e       	cpi	r16, 0xE6	; 230
     28a:	41 51       	subi	r20, 0x11	; 17
     28c:	21 5e       	subi	r18, 0xE1	; 225
     28e:	7f 09       	sbc	r23, r15
     290:	19 29       	or	r17, r9
     292:	46 26       	eor	r4, r22
     294:	49 49       	sbci	r20, 0x99	; 153
     296:	49 32       	cpi	r20, 0x29	; 41
     298:	03 01       	movw	r0, r6
     29a:	7f 01       	movw	r14, r30
     29c:	03 3f       	cpi	r16, 0xF3	; 243
     29e:	40 40       	sbci	r20, 0x00	; 0
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	1f 20       	and	r1, r15
     2a4:	40 20       	and	r4, r0
     2a6:	1f 3f       	cpi	r17, 0xFF	; 255
     2a8:	40 38       	cpi	r20, 0x80	; 128
     2aa:	40 3f       	cpi	r20, 0xF0	; 240
     2ac:	63 14       	cp	r6, r3
     2ae:	08 14       	cp	r0, r8
     2b0:	63 03       	mulsu	r22, r19
     2b2:	04 78       	andi	r16, 0x84	; 132
     2b4:	04 03       	mulsu	r16, r20
     2b6:	61 59       	subi	r22, 0x91	; 145
     2b8:	49 4d       	sbci	r20, 0xD9	; 217
     2ba:	43 00       	.word	0x0043	; ????
     2bc:	7f 41       	sbci	r23, 0x1F	; 31
     2be:	41 41       	sbci	r20, 0x11	; 17
     2c0:	02 04       	cpc	r0, r2
     2c2:	08 10       	cpse	r0, r8
     2c4:	20 00       	.word	0x0020	; ????
     2c6:	41 41       	sbci	r20, 0x11	; 17
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	04 02       	muls	r16, r20
     2cc:	01 02       	muls	r16, r17
     2ce:	04 40       	sbci	r16, 0x04	; 4
     2d0:	40 40       	sbci	r20, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	00 03       	mulsu	r16, r16
     2d6:	07 08       	sbc	r0, r7
     2d8:	00 20       	and	r0, r0
     2da:	54 54       	subi	r21, 0x44	; 68
     2dc:	78 40       	sbci	r23, 0x08	; 8
     2de:	7f 28       	or	r7, r15
     2e0:	44 44       	sbci	r20, 0x44	; 68
     2e2:	38 38       	cpi	r19, 0x88	; 136
     2e4:	44 44       	sbci	r20, 0x44	; 68
     2e6:	44 28       	or	r4, r4
     2e8:	38 44       	sbci	r19, 0x48	; 72
     2ea:	44 28       	or	r4, r4
     2ec:	7f 38       	cpi	r23, 0x8F	; 143
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	54 18       	sub	r5, r4
     2f2:	00 08       	sbc	r0, r0
     2f4:	7e 09       	sbc	r23, r14
     2f6:	02 18       	sub	r0, r2
     2f8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2fa:	9c 78       	andi	r25, 0x8C	; 140
     2fc:	7f 08       	sbc	r7, r15
     2fe:	04 04       	cpc	r0, r4
     300:	78 00       	.word	0x0078	; ????
     302:	44 7d       	andi	r20, 0xD4	; 212
     304:	40 00       	.word	0x0040	; ????
     306:	20 40       	sbci	r18, 0x00	; 0
     308:	40 3d       	cpi	r20, 0xD0	; 208
     30a:	00 7f       	andi	r16, 0xF0	; 240
     30c:	10 28       	or	r1, r0
     30e:	44 00       	.word	0x0044	; ????
     310:	00 41       	sbci	r16, 0x10	; 16
     312:	7f 40       	sbci	r23, 0x0F	; 15
     314:	00 7c       	andi	r16, 0xC0	; 192
     316:	04 78       	andi	r16, 0x84	; 132
     318:	04 78       	andi	r16, 0x84	; 132
     31a:	7c 08       	sbc	r7, r12
     31c:	04 04       	cpc	r0, r4
     31e:	78 38       	cpi	r23, 0x88	; 136
     320:	44 44       	sbci	r20, 0x44	; 68
     322:	44 38       	cpi	r20, 0x84	; 132
     324:	fc 18       	sub	r15, r12
     326:	24 24       	eor	r2, r4
     328:	18 18       	sub	r1, r8
     32a:	24 24       	eor	r2, r4
     32c:	18 fc       	.word	0xfc18	; ????
     32e:	7c 08       	sbc	r7, r12
     330:	04 04       	cpc	r0, r4
     332:	08 48       	sbci	r16, 0x88	; 136
     334:	54 54       	subi	r21, 0x44	; 68
     336:	54 24       	eor	r5, r4
     338:	04 04       	cpc	r0, r4
     33a:	3f 44       	sbci	r19, 0x4F	; 79
     33c:	24 3c       	cpi	r18, 0xC4	; 196
     33e:	40 40       	sbci	r20, 0x00	; 0
     340:	20 7c       	andi	r18, 0xC0	; 192
     342:	1c 20       	and	r1, r12
     344:	40 20       	and	r4, r0
     346:	1c 3c       	cpi	r17, 0xCC	; 204
     348:	40 30       	cpi	r20, 0x00	; 0
     34a:	40 3c       	cpi	r20, 0xC0	; 192
     34c:	44 28       	or	r4, r4
     34e:	10 28       	or	r1, r0
     350:	44 4c       	sbci	r20, 0xC4	; 196
     352:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7932>
     356:	44 64       	ori	r20, 0x44	; 68
     358:	54 4c       	sbci	r21, 0xC4	; 196
     35a:	44 00       	.word	0x0044	; ????
     35c:	08 36       	cpi	r16, 0x68	; 104
     35e:	41 00       	.word	0x0041	; ????
     360:	00 00       	nop
     362:	77 00       	.word	0x0077	; ????
     364:	00 00       	nop
     366:	41 36       	cpi	r20, 0x61	; 97
     368:	08 00       	.word	0x0008	; ????
     36a:	02 01       	movw	r0, r4
     36c:	02 04       	cpc	r0, r2
     36e:	02 3c       	cpi	r16, 0xC2	; 194
     370:	26 23       	and	r18, r22
     372:	26 3c       	cpi	r18, 0xC6	; 198
     374:	1e a1       	ldd	r17, Y+38	; 0x26
     376:	a1 61       	ori	r26, 0x11	; 17
     378:	12 3a       	cpi	r17, 0xA2	; 162
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	20 7a       	andi	r18, 0xA0	; 160
     37e:	38 54       	subi	r19, 0x48	; 72
     380:	54 55       	subi	r21, 0x54	; 84
     382:	59 21       	and	r21, r9
     384:	55 55       	subi	r21, 0x55	; 85
     386:	79 41       	sbci	r23, 0x19	; 25
     388:	22 54       	subi	r18, 0x42	; 66
     38a:	54 78       	andi	r21, 0x84	; 132
     38c:	42 21       	and	r20, r2
     38e:	55 54       	subi	r21, 0x45	; 69
     390:	78 40       	sbci	r23, 0x08	; 8
     392:	20 54       	subi	r18, 0x40	; 64
     394:	55 79       	andi	r21, 0x95	; 149
     396:	40 0c       	add	r4, r0
     398:	1e 52       	subi	r17, 0x2E	; 46
     39a:	72 12       	cpse	r7, r18
     39c:	39 55       	subi	r19, 0x59	; 89
     39e:	55 55       	subi	r21, 0x55	; 85
     3a0:	59 39       	cpi	r21, 0x99	; 153
     3a2:	54 54       	subi	r21, 0x44	; 68
     3a4:	54 59       	subi	r21, 0x94	; 148
     3a6:	39 55       	subi	r19, 0x59	; 89
     3a8:	54 54       	subi	r21, 0x44	; 68
     3aa:	58 00       	.word	0x0058	; ????
     3ac:	00 45       	sbci	r16, 0x50	; 80
     3ae:	7c 41       	sbci	r23, 0x1C	; 28
     3b0:	00 02       	muls	r16, r16
     3b2:	45 7d       	andi	r20, 0xD5	; 213
     3b4:	42 00       	.word	0x0042	; ????
     3b6:	01 45       	sbci	r16, 0x51	; 81
     3b8:	7c 40       	sbci	r23, 0x0C	; 12
     3ba:	7d 12       	cpse	r7, r29
     3bc:	11 12       	cpse	r1, r17
     3be:	7d f0       	brhs	.+30     	; 0x3de <__trampolines_end+0x2ea>
     3c0:	28 25       	eor	r18, r8
     3c2:	28 f0       	brcs	.+10     	; 0x3ce <__trampolines_end+0x2da>
     3c4:	7c 54       	subi	r23, 0x4C	; 76
     3c6:	55 45       	sbci	r21, 0x55	; 85
     3c8:	00 20       	and	r0, r0
     3ca:	54 54       	subi	r21, 0x44	; 68
     3cc:	7c 54       	subi	r23, 0x4C	; 76
     3ce:	7c 0a       	sbc	r7, r28
     3d0:	09 7f       	andi	r16, 0xF9	; 249
     3d2:	49 32       	cpi	r20, 0x29	; 41
     3d4:	49 49       	sbci	r20, 0x99	; 153
     3d6:	49 32       	cpi	r20, 0x29	; 41
     3d8:	3a 44       	sbci	r19, 0x4A	; 74
     3da:	44 44       	sbci	r20, 0x44	; 68
     3dc:	3a 32       	cpi	r19, 0x2A	; 42
     3de:	4a 48       	sbci	r20, 0x8A	; 138
     3e0:	48 30       	cpi	r20, 0x08	; 8
     3e2:	3a 41       	sbci	r19, 0x1A	; 26
     3e4:	41 21       	and	r20, r1
     3e6:	7a 3a       	cpi	r23, 0xAA	; 170
     3e8:	42 40       	sbci	r20, 0x02	; 2
     3ea:	20 78       	andi	r18, 0x80	; 128
     3ec:	00 9d       	mul	r16, r0
     3ee:	a0 a0       	ldd	r10, Z+32	; 0x20
     3f0:	7d 3d       	cpi	r23, 0xDD	; 221
     3f2:	42 42       	sbci	r20, 0x22	; 34
     3f4:	42 3d       	cpi	r20, 0xD2	; 210
     3f6:	3d 40       	sbci	r19, 0x0D	; 13
     3f8:	40 40       	sbci	r20, 0x00	; 0
     3fa:	3d 3c       	cpi	r19, 0xCD	; 205
     3fc:	24 ff       	sbrs	r18, 4
     3fe:	24 24       	eor	r2, r4
     400:	48 7e       	andi	r20, 0xE8	; 232
     402:	49 43       	sbci	r20, 0x39	; 57
     404:	66 2b       	or	r22, r22
     406:	2f fc       	.word	0xfc2f	; ????
     408:	2f 2b       	or	r18, r31
     40a:	ff 09       	sbc	r31, r15
     40c:	29 f6       	brne	.-118    	; 0x398 <__trampolines_end+0x2a4>
     40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     410:	88 7e       	andi	r24, 0xE8	; 232
     412:	09 03       	fmul	r16, r17
     414:	20 54       	subi	r18, 0x40	; 64
     416:	54 79       	andi	r21, 0x94	; 148
     418:	41 00       	.word	0x0041	; ????
     41a:	00 44       	sbci	r16, 0x40	; 64
     41c:	7d 41       	sbci	r23, 0x1D	; 29
     41e:	30 48       	sbci	r19, 0x80	; 128
     420:	48 4a       	sbci	r20, 0xA8	; 168
     422:	32 38       	cpi	r19, 0x82	; 130
     424:	40 40       	sbci	r20, 0x00	; 0
     426:	22 7a       	andi	r18, 0xA2	; 162
     428:	00 7a       	andi	r16, 0xA0	; 160
     42a:	0a 0a       	sbc	r0, r26
     42c:	72 7d       	andi	r23, 0xD2	; 210
     42e:	0d 19       	sub	r16, r13
     430:	31 7d       	andi	r19, 0xD1	; 209
     432:	26 29       	or	r18, r6
     434:	29 2f       	mov	r18, r25
     436:	28 26       	eor	r2, r24
     438:	29 29       	or	r18, r9
     43a:	29 26       	eor	r2, r25
     43c:	30 48       	sbci	r19, 0x80	; 128
     43e:	4d 40       	sbci	r20, 0x0D	; 13
     440:	20 38       	cpi	r18, 0x80	; 128
     442:	08 08       	sbc	r0, r8
     444:	08 08       	sbc	r0, r8
     446:	08 08       	sbc	r0, r8
     448:	08 08       	sbc	r0, r8
     44a:	38 2f       	mov	r19, r24
     44c:	10 c8       	rjmp	.-4064   	; 0xfffff46e <__eeprom_end+0xff7ef46e>
     44e:	ac ba       	out	0x1c, r10	; 28
     450:	2f 10       	cpse	r2, r15
     452:	28 34       	cpi	r18, 0x48	; 72
     454:	fa 00       	.word	0x00fa	; ????
     456:	00 7b       	andi	r16, 0xB0	; 176
     458:	00 00       	nop
     45a:	08 14       	cp	r0, r8
     45c:	2a 14       	cp	r2, r10
     45e:	22 22       	and	r2, r18
     460:	14 2a       	or	r1, r20
     462:	14 08       	sbc	r1, r4
     464:	55 00       	.word	0x0055	; ????
     466:	55 00       	.word	0x0055	; ????
     468:	55 aa       	std	Z+53, r5	; 0x35
     46a:	55 aa       	std	Z+53, r5	; 0x35
     46c:	55 aa       	std	Z+53, r5	; 0x35
     46e:	ff 55       	subi	r31, 0x5F	; 95
     470:	ff 55       	subi	r31, 0x5F	; 95
     472:	ff 00       	.word	0x00ff	; ????
     474:	00 00       	nop
     476:	ff 00       	.word	0x00ff	; ????
     478:	10 10       	cpse	r1, r0
     47a:	10 ff       	sbrs	r17, 0
     47c:	00 14       	cp	r0, r0
     47e:	14 14       	cp	r1, r4
     480:	ff 00       	.word	0x00ff	; ????
     482:	10 10       	cpse	r1, r0
     484:	ff 00       	.word	0x00ff	; ????
     486:	ff 10       	cpse	r15, r15
     488:	10 f0       	brcs	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48a:	10 f0       	brcs	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48c:	14 14       	cp	r1, r4
     48e:	14 fc       	sbrc	r1, 4
     490:	00 14       	cp	r0, r0
     492:	14 f7       	brge	.-60     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     494:	00 ff       	sbrs	r16, 0
     496:	00 00       	nop
     498:	ff 00       	.word	0x00ff	; ????
     49a:	ff 14       	cp	r15, r15
     49c:	14 f4       	brge	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49e:	04 fc       	sbrc	r0, 4
     4a0:	14 14       	cp	r1, r4
     4a2:	17 10       	cpse	r1, r7
     4a4:	1f 10       	cpse	r1, r15
     4a6:	10 1f       	adc	r17, r16
     4a8:	10 1f       	adc	r17, r16
     4aa:	14 14       	cp	r1, r4
     4ac:	14 1f       	adc	r17, r20
     4ae:	00 10       	cpse	r0, r0
     4b0:	10 10       	cpse	r1, r0
     4b2:	f0 00       	.word	0x00f0	; ????
     4b4:	00 00       	nop
     4b6:	00 1f       	adc	r16, r16
     4b8:	10 10       	cpse	r1, r0
     4ba:	10 10       	cpse	r1, r0
     4bc:	1f 10       	cpse	r1, r15
     4be:	10 10       	cpse	r1, r0
     4c0:	10 f0       	brcs	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c2:	10 00       	.word	0x0010	; ????
     4c4:	00 00       	nop
     4c6:	ff 10       	cpse	r15, r15
     4c8:	10 10       	cpse	r1, r0
     4ca:	10 10       	cpse	r1, r0
     4cc:	10 10       	cpse	r1, r0
     4ce:	10 10       	cpse	r1, r0
     4d0:	ff 10       	cpse	r15, r15
     4d2:	00 00       	nop
     4d4:	00 ff       	sbrs	r16, 0
     4d6:	14 00       	.word	0x0014	; ????
     4d8:	00 ff       	sbrs	r16, 0
     4da:	00 ff       	sbrs	r16, 0
     4dc:	00 00       	nop
     4de:	1f 10       	cpse	r1, r15
     4e0:	17 00       	.word	0x0017	; ????
     4e2:	00 fc       	sbrc	r0, 0
     4e4:	04 f4       	brge	.+0      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e6:	14 14       	cp	r1, r4
     4e8:	17 10       	cpse	r1, r7
     4ea:	17 14       	cp	r1, r7
     4ec:	14 f4       	brge	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4ee:	04 f4       	brge	.+0      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f0:	00 00       	nop
     4f2:	ff 00       	.word	0x00ff	; ????
     4f4:	f7 14       	cp	r15, r7
     4f6:	14 14       	cp	r1, r4
     4f8:	14 14       	cp	r1, r4
     4fa:	14 14       	cp	r1, r4
     4fc:	f7 00       	.word	0x00f7	; ????
     4fe:	f7 14       	cp	r15, r7
     500:	14 14       	cp	r1, r4
     502:	17 14       	cp	r1, r7
     504:	10 10       	cpse	r1, r0
     506:	1f 10       	cpse	r1, r15
     508:	1f 14       	cp	r1, r15
     50a:	14 14       	cp	r1, r4
     50c:	f4 14       	cp	r15, r4
     50e:	10 10       	cpse	r1, r0
     510:	f0 10       	cpse	r15, r0
     512:	f0 00       	.word	0x00f0	; ????
     514:	00 1f       	adc	r16, r16
     516:	10 1f       	adc	r17, r16
     518:	00 00       	nop
     51a:	00 1f       	adc	r16, r16
     51c:	14 00       	.word	0x0014	; ????
     51e:	00 00       	nop
     520:	fc 14       	cp	r15, r12
     522:	00 00       	nop
     524:	f0 10       	cpse	r15, r0
     526:	f0 10       	cpse	r15, r0
     528:	10 ff       	sbrs	r17, 0
     52a:	10 ff       	sbrs	r17, 0
     52c:	14 14       	cp	r1, r4
     52e:	14 ff       	sbrs	r17, 4
     530:	14 10       	cpse	r1, r4
     532:	10 10       	cpse	r1, r0
     534:	1f 00       	.word	0x001f	; ????
     536:	00 00       	nop
     538:	00 f0       	brcs	.+0      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     53a:	10 ff       	sbrs	r17, 0
     53c:	ff ff       	.word	0xffff	; ????
     53e:	ff ff       	.word	0xffff	; ????
     540:	f0 f0       	brcs	.+60     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     542:	f0 f0       	brcs	.+60     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     544:	f0 ff       	sbrs	r31, 0
     546:	ff ff       	.word	0xffff	; ????
     548:	00 00       	nop
     54a:	00 00       	nop
     54c:	00 ff       	sbrs	r16, 0
     54e:	ff 0f       	add	r31, r31
     550:	0f 0f       	add	r16, r31
     552:	0f 0f       	add	r16, r31
     554:	38 44       	sbci	r19, 0x48	; 72
     556:	44 38       	cpi	r20, 0x84	; 132
     558:	44 fc       	sbrc	r4, 4
     55a:	4a 4a       	sbci	r20, 0xAA	; 170
     55c:	4a 34       	cpi	r20, 0x4A	; 74
     55e:	7e 02       	muls	r23, r30
     560:	02 06       	cpc	r0, r18
     562:	06 02       	muls	r16, r22
     564:	7e 02       	muls	r23, r30
     566:	7e 02       	muls	r23, r30
     568:	63 55       	subi	r22, 0x53	; 83
     56a:	49 41       	sbci	r20, 0x19	; 25
     56c:	63 38       	cpi	r22, 0x83	; 131
     56e:	44 44       	sbci	r20, 0x44	; 68
     570:	3c 04       	cpc	r3, r12
     572:	40 7e       	andi	r20, 0xE0	; 224
     574:	20 1e       	adc	r2, r16
     576:	20 06       	cpc	r2, r16
     578:	02 7e       	andi	r16, 0xE2	; 226
     57a:	02 02       	muls	r16, r18
     57c:	99 a5       	ldd	r25, Y+41	; 0x29
     57e:	e7 a5       	ldd	r30, Z+47	; 0x2f
     580:	99 1c       	adc	r9, r9
     582:	2a 49       	sbci	r18, 0x9A	; 154
     584:	2a 1c       	adc	r2, r10
     586:	4c 72       	andi	r20, 0x2C	; 44
     588:	01 72       	andi	r16, 0x21	; 33
     58a:	4c 30       	cpi	r20, 0x0C	; 12
     58c:	4a 4d       	sbci	r20, 0xDA	; 218
     58e:	4d 30       	cpi	r20, 0x0D	; 13
     590:	30 48       	sbci	r19, 0x80	; 128
     592:	78 48       	sbci	r23, 0x88	; 136
     594:	30 bc       	out	0x20, r3	; 32
     596:	62 5a       	subi	r22, 0xA2	; 162
     598:	46 3d       	cpi	r20, 0xD6	; 214
     59a:	3e 49       	sbci	r19, 0x9E	; 158
     59c:	49 49       	sbci	r20, 0x99	; 153
     59e:	00 7e       	andi	r16, 0xE0	; 224
     5a0:	01 01       	movw	r0, r2
     5a2:	01 7e       	andi	r16, 0xE1	; 225
     5a4:	2a 2a       	or	r2, r26
     5a6:	2a 2a       	or	r2, r26
     5a8:	2a 44       	sbci	r18, 0x4A	; 74
     5aa:	44 5f       	subi	r20, 0xF4	; 244
     5ac:	44 44       	sbci	r20, 0x44	; 68
     5ae:	40 51       	subi	r20, 0x10	; 16
     5b0:	4a 44       	sbci	r20, 0x4A	; 74
     5b2:	40 40       	sbci	r20, 0x00	; 0
     5b4:	44 4a       	sbci	r20, 0xA4	; 164
     5b6:	51 40       	sbci	r21, 0x01	; 1
     5b8:	00 00       	nop
     5ba:	ff 01       	movw	r30, r30
     5bc:	03 e0       	ldi	r16, 0x03	; 3
     5be:	80 ff       	sbrs	r24, 0
     5c0:	00 00       	nop
     5c2:	08 08       	sbc	r0, r8
     5c4:	6b 6b       	ori	r22, 0xBB	; 187
     5c6:	08 36       	cpi	r16, 0x68	; 104
     5c8:	12 36       	cpi	r17, 0x62	; 98
     5ca:	24 36       	cpi	r18, 0x64	; 100
     5cc:	06 0f       	add	r16, r22
     5ce:	09 0f       	add	r16, r25
     5d0:	06 00       	.word	0x0006	; ????
     5d2:	00 18       	sub	r0, r0
     5d4:	18 00       	.word	0x0018	; ????
     5d6:	00 00       	nop
     5d8:	10 10       	cpse	r1, r0
     5da:	00 30       	cpi	r16, 0x00	; 0
     5dc:	40 ff       	sbrs	r20, 0
     5de:	01 01       	movw	r0, r2
     5e0:	00 1f       	adc	r16, r16
     5e2:	01 01       	movw	r0, r2
     5e4:	1e 00       	.word	0x001e	; ????
     5e6:	19 1d       	adc	r17, r9
     5e8:	17 12       	cpse	r1, r23
     5ea:	00 3c       	cpi	r16, 0xC0	; 192
     5ec:	3c 3c       	cpi	r19, 0xCC	; 204
     5ee:	3c 00       	.word	0x003c	; ????
     5f0:	00 00       	nop
	...

000005f4 <digital_pin_to_bit_mask_PGM>:
     5f4:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     604:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     614:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     624:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     634:	04 08 10 20 40 80                                   ... @.

0000063a <digital_pin_to_port_PGM>:
     63a:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     64a:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     65a:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     66a:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     67a:	0b 0b 0b 0b 0b 0b                                   ......

00000680 <port_to_output_PGM>:
     680:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     690:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000069a <port_to_mode_PGM>:
     69a:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     6aa:	01 01 00 00 04 01 07 01 0a 01                       ..........

000006b4 <__ctors_start>:
     6b4:	90 03       	fmuls	r17, r16
     6b6:	21 13       	cpse	r18, r17

000006b8 <__ctors_end>:
     6b8:	11 24       	eor	r1, r1
     6ba:	1f be       	out	0x3f, r1	; 63
     6bc:	cf ef       	ldi	r28, 0xFF	; 255
     6be:	d1 e2       	ldi	r29, 0x21	; 33
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	00 e0       	ldi	r16, 0x00	; 0
     6c6:	0c bf       	out	0x3c, r16	; 60

000006c8 <__do_copy_data>:
     6c8:	12 e0       	ldi	r17, 0x02	; 2
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	b2 e0       	ldi	r27, 0x02	; 2
     6ce:	e6 ed       	ldi	r30, 0xD6	; 214
     6d0:	f9 e2       	ldi	r31, 0x29	; 41
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	0b bf       	out	0x3b, r16	; 59
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x14>
     6d8:	07 90       	elpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a0 37       	cpi	r26, 0x70	; 112
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0x10>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	a0 e7       	ldi	r26, 0x70	; 112
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ae 35       	cpi	r26, 0x5E	; 94
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>

000006f2 <__do_global_ctors>:
     6f2:	13 e0       	ldi	r17, 0x03	; 3
     6f4:	cc e5       	ldi	r28, 0x5C	; 92
     6f6:	d3 e0       	ldi	r29, 0x03	; 3
     6f8:	00 e0       	ldi	r16, 0x00	; 0
     6fa:	06 c0       	rjmp	.+12     	; 0x708 <__do_global_ctors+0x16>
     6fc:	21 97       	sbiw	r28, 0x01	; 1
     6fe:	01 09       	sbc	r16, r1
     700:	80 2f       	mov	r24, r16
     702:	fe 01       	movw	r30, r28
     704:	0e 94 b5 13 	call	0x276a	; 0x276a <__tablejump2__>
     708:	ca 35       	cpi	r28, 0x5A	; 90
     70a:	d1 07       	cpc	r29, r17
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	08 07       	cpc	r16, r24
     710:	a9 f7       	brne	.-22     	; 0x6fc <__do_global_ctors+0xa>
     712:	70 d0       	rcall	.+224    	; 0x7f4 <main>
     714:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <_exit>

00000718 <__bad_interrupt>:
     718:	73 cc       	rjmp	.-1818   	; 0x0 <__vectors>

0000071a <setup>:
uint8_t idx_x = 0, idx_y = 0;
RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);

void setup() {

  matrix.begin();
     71a:	81 e7       	ldi	r24, 0x71	; 113
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	d8 c3       	rjmp	.+1968   	; 0xed0 <_ZN14RGBmatrixPanel5beginEv>

00000720 <_GLOBAL__sub_I_idx_x>:
      cidx++;
      delay(100);
      if(cidx == 8) cidx = 0;
    }
  }
}
     720:	af 92       	push	r10
     722:	cf 92       	push	r12
     724:	ef 92       	push	r14
     726:	0f 93       	push	r16
#define A   A0
#define B   A1
#define C   A2

uint8_t idx_x = 0, idx_y = 0;
RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);
     728:	a1 2c       	mov	r10, r1
     72a:	89 e0       	ldi	r24, 0x09	; 9
     72c:	c8 2e       	mov	r12, r24
     72e:	99 e3       	ldi	r25, 0x39	; 57
     730:	e9 2e       	mov	r14, r25
     732:	0b e0       	ldi	r16, 0x0B	; 11
     734:	28 e3       	ldi	r18, 0x38	; 56
     736:	47 e3       	ldi	r20, 0x37	; 55
     738:	66 e3       	ldi	r22, 0x36	; 54
     73a:	81 e7       	ldi	r24, 0x71	; 113
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	99 d3       	rcall	.+1842   	; 0xe72 <_ZN14RGBmatrixPanelC1Ehhhhhhb>
      cidx++;
      delay(100);
      if(cidx == 8) cidx = 0;
    }
  }
}
     740:	0f 91       	pop	r16
     742:	ef 90       	pop	r14
     744:	cf 90       	pop	r12
     746:	af 90       	pop	r10
     748:	08 95       	ret

0000074a <loop>:
}

uint8_t cidx = 0;
void loop() {
  // do nothing
  switch(cidx){
     74a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	88 30       	cpi	r24, 0x08	; 8
     752:	91 05       	cpc	r25, r1
     754:	48 f5       	brcc	.+82     	; 0x7a8 <loop+0x5e>
     756:	fc 01       	movw	r30, r24
     758:	88 27       	eor	r24, r24
     75a:	ee 58       	subi	r30, 0x8E	; 142
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	8f 4f       	sbci	r24, 0xFF	; 255
     760:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__tablejump2__>
    case 0 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(7, 0, 0)); break;
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	0a c0       	rjmp	.+20     	; 0x77c <loop+0x32>
    case 1 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(0, 7, 0)); break;
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	03 c0       	rjmp	.+6      	; 0x772 <loop+0x28>
    case 2 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(0, 0, 7)); break;
     76c:	27 e0       	ldi	r18, 0x07	; 7
     76e:	0d c0       	rjmp	.+26     	; 0x78a <loop+0x40>
    case 3 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(0, 7, 7)); break;
     770:	27 e0       	ldi	r18, 0x07	; 7
     772:	47 e0       	ldi	r20, 0x07	; 7
     774:	0b c0       	rjmp	.+22     	; 0x78c <loop+0x42>
    case 4 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(7, 7, 0)); break;
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	04 c0       	rjmp	.+8      	; 0x782 <loop+0x38>
    case 5 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(7, 0, 7)); break;
     77a:	27 e0       	ldi	r18, 0x07	; 7
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	02 c0       	rjmp	.+4      	; 0x784 <loop+0x3a>
    case 6 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(7, 7, 7)); break;
     780:	27 e0       	ldi	r18, 0x07	; 7
     782:	47 e0       	ldi	r20, 0x07	; 7
     784:	67 e0       	ldi	r22, 0x07	; 7
     786:	03 c0       	rjmp	.+6      	; 0x78e <loop+0x44>
    case 7 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(0, 0, 0)); break;
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	81 e7       	ldi	r24, 0x71	; 113
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	19 d4       	rcall	.+2098   	; 0xfc6 <_ZN14RGBmatrixPanel8Color333Ehhh>
     794:	40 91 b0 02 	lds	r20, 0x02B0	; 0x8002b0 <idx_y>
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <idx_x>
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	9c 01       	movw	r18, r24
     7a2:	81 e7       	ldi	r24, 0x71	; 113
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	40 d1       	rcall	.+640    	; 0xa28 <_ZN14RGBmatrixPanel9drawPixelEiij>
    }
  
  //delay(100);

  idx_x++;
     7a8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <idx_x>
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
  if(idx_x ==128){
     7ae:	80 38       	cpi	r24, 0x80	; 128
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <loop+0x6e>
    case 7 : matrix.drawPixel(idx_x, idx_y, matrix.Color333(0, 0, 0)); break;
    }
  
  //delay(100);

  idx_x++;
     7b2:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <idx_x>
     7b6:	08 95       	ret
  if(idx_x ==128){
    idx_x = 0;
     7b8:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <idx_x>
    idx_y++;
     7bc:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <idx_y>
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
    //matrix.drawPixel(idx_x, idx_y, matrix.Color333(0, 0, 0)); 
    if(idx_y == 8){
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	19 f0       	breq	.+6      	; 0x7cc <loop+0x82>
  //delay(100);

  idx_x++;
  if(idx_x ==128){
    idx_x = 0;
    idx_y++;
     7c6:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <idx_y>
     7ca:	08 95       	ret
    //matrix.drawPixel(idx_x, idx_y, matrix.Color333(0, 0, 0)); 
    if(idx_y == 8){
      idx_y = 0;
     7cc:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <idx_y>
      cidx++;
     7d0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
      delay(100);
     7da:	64 e6       	ldi	r22, 0x64	; 100
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	82 d0       	rcall	.+260    	; 0x8e8 <delay>
      if(cidx == 8) cidx = 0;
     7e4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
     7e8:	88 30       	cpi	r24, 0x08	; 8
     7ea:	11 f4       	brne	.+4      	; 0x7f0 <loop+0xa6>
     7ec:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
     7f0:	08 95       	ret

000007f2 <initVariant>:
     7f2:	08 95       	ret

000007f4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     7f4:	b3 d0       	rcall	.+358    	; 0x95c <init>
     7f6:	fd df       	rcall	.-6      	; 0x7f2 <initVariant>
     7f8:	90 df       	rcall	.-224    	; 0x71a <setup>
     7fa:	c5 ef       	ldi	r28, 0xF5	; 245
     7fc:	d1 e1       	ldi	r29, 0x11	; 17
     7fe:	a5 df       	rcall	.-182    	; 0x74a <loop>
     800:	20 97       	sbiw	r28, 0x00	; 0
     802:	e9 f3       	breq	.-6      	; 0x7fe <main+0xa>
     804:	0e 94 f5 11 	call	0x23ea	; 0x23ea <_Z14serialEventRunv>
     808:	fa cf       	rjmp	.-12     	; 0x7fe <main+0xa>

0000080a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	2f 93       	push	r18
     816:	3f 93       	push	r19
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	af 93       	push	r26
     81e:	bf 93       	push	r27
     820:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <timer0_millis>
     824:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <timer0_millis+0x1>
     828:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <timer0_millis+0x2>
     82c:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <timer0_millis+0x3>
     830:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <timer0_fract>
     834:	23 e0       	ldi	r18, 0x03	; 3
     836:	23 0f       	add	r18, r19
     838:	2d 37       	cpi	r18, 0x7D	; 125
     83a:	20 f4       	brcc	.+8      	; 0x844 <__vector_23+0x3a>
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	a1 1d       	adc	r26, r1
     840:	b1 1d       	adc	r27, r1
     842:	05 c0       	rjmp	.+10     	; 0x84e <__vector_23+0x44>
     844:	26 e8       	ldi	r18, 0x86	; 134
     846:	23 0f       	add	r18, r19
     848:	02 96       	adiw	r24, 0x02	; 2
     84a:	a1 1d       	adc	r26, r1
     84c:	b1 1d       	adc	r27, r1
     84e:	20 93 b2 02 	sts	0x02B2, r18	; 0x8002b2 <timer0_fract>
     852:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <timer0_millis>
     856:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <timer0_millis+0x1>
     85a:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <timer0_millis+0x2>
     85e:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <timer0_millis+0x3>
     862:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <timer0_overflow_count>
     866:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x1>
     86a:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x2>
     86e:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <timer0_overflow_count+0x3>
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	a1 1d       	adc	r26, r1
     876:	b1 1d       	adc	r27, r1
     878:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <timer0_overflow_count>
     87c:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <timer0_overflow_count+0x1>
     880:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <timer0_overflow_count+0x2>
     884:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <timer0_overflow_count+0x3>
     888:	bf 91       	pop	r27
     88a:	af 91       	pop	r26
     88c:	9f 91       	pop	r25
     88e:	8f 91       	pop	r24
     890:	3f 91       	pop	r19
     892:	2f 91       	pop	r18
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <micros>:
     89e:	3f b7       	in	r19, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <timer0_overflow_count>
     8a6:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x1>
     8aa:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x2>
     8ae:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <timer0_overflow_count+0x3>
     8b2:	26 b5       	in	r18, 0x26	; 38
     8b4:	a8 9b       	sbis	0x15, 0	; 21
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <micros+0x24>
     8b8:	2f 3f       	cpi	r18, 0xFF	; 255
     8ba:	19 f0       	breq	.+6      	; 0x8c2 <micros+0x24>
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	a1 1d       	adc	r26, r1
     8c0:	b1 1d       	adc	r27, r1
     8c2:	3f bf       	out	0x3f, r19	; 63
     8c4:	ba 2f       	mov	r27, r26
     8c6:	a9 2f       	mov	r26, r25
     8c8:	98 2f       	mov	r25, r24
     8ca:	88 27       	eor	r24, r24
     8cc:	82 0f       	add	r24, r18
     8ce:	91 1d       	adc	r25, r1
     8d0:	a1 1d       	adc	r26, r1
     8d2:	b1 1d       	adc	r27, r1
     8d4:	bc 01       	movw	r22, r24
     8d6:	cd 01       	movw	r24, r26
     8d8:	42 e0       	ldi	r20, 0x02	; 2
     8da:	66 0f       	add	r22, r22
     8dc:	77 1f       	adc	r23, r23
     8de:	88 1f       	adc	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	4a 95       	dec	r20
     8e4:	d1 f7       	brne	.-12     	; 0x8da <micros+0x3c>
     8e6:	08 95       	ret

000008e8 <delay>:
     8e8:	8f 92       	push	r8
     8ea:	9f 92       	push	r9
     8ec:	af 92       	push	r10
     8ee:	bf 92       	push	r11
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
     8fc:	d0 df       	rcall	.-96     	; 0x89e <micros>
     8fe:	4b 01       	movw	r8, r22
     900:	5c 01       	movw	r10, r24
     902:	c1 14       	cp	r12, r1
     904:	d1 04       	cpc	r13, r1
     906:	e1 04       	cpc	r14, r1
     908:	f1 04       	cpc	r15, r1
     90a:	f9 f0       	breq	.+62     	; 0x94a <delay+0x62>
     90c:	0e 94 4e 13 	call	0x269c	; 0x269c <yield>
     910:	c6 df       	rcall	.-116    	; 0x89e <micros>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	88 19       	sub	r24, r8
     918:	99 09       	sbc	r25, r9
     91a:	aa 09       	sbc	r26, r10
     91c:	bb 09       	sbc	r27, r11
     91e:	88 3e       	cpi	r24, 0xE8	; 232
     920:	93 40       	sbci	r25, 0x03	; 3
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	68 f3       	brcs	.-38     	; 0x902 <delay+0x1a>
     928:	21 e0       	ldi	r18, 0x01	; 1
     92a:	c2 1a       	sub	r12, r18
     92c:	d1 08       	sbc	r13, r1
     92e:	e1 08       	sbc	r14, r1
     930:	f1 08       	sbc	r15, r1
     932:	88 ee       	ldi	r24, 0xE8	; 232
     934:	88 0e       	add	r8, r24
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	98 1e       	adc	r9, r24
     93a:	a1 1c       	adc	r10, r1
     93c:	b1 1c       	adc	r11, r1
     93e:	c1 14       	cp	r12, r1
     940:	d1 04       	cpc	r13, r1
     942:	e1 04       	cpc	r14, r1
     944:	f1 04       	cpc	r15, r1
     946:	21 f7       	brne	.-56     	; 0x910 <delay+0x28>
     948:	dc cf       	rjmp	.-72     	; 0x902 <delay+0x1a>
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	df 90       	pop	r13
     950:	cf 90       	pop	r12
     952:	bf 90       	pop	r11
     954:	af 90       	pop	r10
     956:	9f 90       	pop	r9
     958:	8f 90       	pop	r8
     95a:	08 95       	ret

0000095c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     95c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     95e:	84 b5       	in	r24, 0x24	; 36
     960:	82 60       	ori	r24, 0x02	; 2
     962:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     964:	84 b5       	in	r24, 0x24	; 36
     966:	81 60       	ori	r24, 0x01	; 1
     968:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     96a:	85 b5       	in	r24, 0x25	; 37
     96c:	82 60       	ori	r24, 0x02	; 2
     96e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     970:	85 b5       	in	r24, 0x25	; 37
     972:	81 60       	ori	r24, 0x01	; 1
     974:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     976:	ee e6       	ldi	r30, 0x6E	; 110
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	81 60       	ori	r24, 0x01	; 1
     97e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     980:	e1 e8       	ldi	r30, 0x81	; 129
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     986:	80 81       	ld	r24, Z
     988:	82 60       	ori	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     98c:	80 81       	ld	r24, Z
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     992:	e0 e8       	ldi	r30, 0x80	; 128
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     99c:	e1 eb       	ldi	r30, 0xB1	; 177
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	84 60       	ori	r24, 0x04	; 4
     9a4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     9a6:	e0 eb       	ldi	r30, 0xB0	; 176
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	81 60       	ori	r24, 0x01	; 1
     9ae:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     9b0:	e1 e9       	ldi	r30, 0x91	; 145
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	82 60       	ori	r24, 0x02	; 2
     9b8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     9ba:	80 81       	ld	r24, Z
     9bc:	81 60       	ori	r24, 0x01	; 1
     9be:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     9c0:	e0 e9       	ldi	r30, 0x90	; 144
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	81 60       	ori	r24, 0x01	; 1
     9c8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     9ca:	e1 ea       	ldi	r30, 0xA1	; 161
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	82 60       	ori	r24, 0x02	; 2
     9d2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     9d4:	80 81       	ld	r24, Z
     9d6:	81 60       	ori	r24, 0x01	; 1
     9d8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     9da:	e0 ea       	ldi	r30, 0xA0	; 160
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     9e4:	e1 e2       	ldi	r30, 0x21	; 33
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	80 81       	ld	r24, Z
     9ea:	82 60       	ori	r24, 0x02	; 2
     9ec:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     9ee:	80 81       	ld	r24, Z
     9f0:	81 60       	ori	r24, 0x01	; 1
     9f2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     9f4:	e0 e2       	ldi	r30, 0x20	; 32
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	80 81       	ld	r24, Z
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     9fe:	ea e7       	ldi	r30, 0x7A	; 122
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	84 60       	ori	r24, 0x04	; 4
     a06:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     a08:	80 81       	ld	r24, Z
     a0a:	82 60       	ori	r24, 0x02	; 2
     a0c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     a0e:	80 81       	ld	r24, Z
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     a14:	80 81       	ld	r24, Z
     a16:	80 68       	ori	r24, 0x80	; 128
     a18:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     a1a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     a1e:	08 95       	ret

00000a20 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	08 95       	ret

00000a26 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     a26:	08 95       	ret

00000a28 <_ZN14RGBmatrixPanel9drawPixelEiij>:
    swapflag = true;                  // Set flag here, then...
    while(swapflag == true) delay(1); // wait for interrupt to clear it
    if(copy == true)
      memcpy(matrixbuff[backindex], matrixbuff[1-backindex], WIDTH * nRows * 3);
  }
}
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	dc 01       	movw	r26, r24
     a3a:	77 fd       	sbrc	r23, 7
     a3c:	22 c1       	rjmp	.+580    	; 0xc82 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
     a3e:	18 96       	adiw	r26, 0x08	; 8
     a40:	8d 91       	ld	r24, X+
     a42:	9c 91       	ld	r25, X
     a44:	19 97       	sbiw	r26, 0x09	; 9
     a46:	68 17       	cp	r22, r24
     a48:	79 07       	cpc	r23, r25
     a4a:	0c f0       	brlt	.+2      	; 0xa4e <_ZN14RGBmatrixPanel9drawPixelEiij+0x26>
     a4c:	1a c1       	rjmp	.+564    	; 0xc82 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
     a4e:	57 fd       	sbrc	r21, 7
     a50:	18 c1       	rjmp	.+560    	; 0xc82 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
     a52:	1a 96       	adiw	r26, 0x0a	; 10
     a54:	8d 91       	ld	r24, X+
     a56:	9c 91       	ld	r25, X
     a58:	1b 97       	sbiw	r26, 0x0b	; 11
     a5a:	48 17       	cp	r20, r24
     a5c:	59 07       	cpc	r21, r25
     a5e:	0c f0       	brlt	.+2      	; 0xa62 <_ZN14RGBmatrixPanel9drawPixelEiij+0x3a>
     a60:	10 c1       	rjmp	.+544    	; 0xc82 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
     a62:	55 96       	adiw	r26, 0x15	; 21
     a64:	ec 91       	ld	r30, X
     a66:	55 97       	sbiw	r26, 0x15	; 21
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	8d 91       	ld	r24, X+
     a6c:	9c 91       	ld	r25, X
     a6e:	15 97       	sbiw	r26, 0x05	; 5
     a70:	e2 30       	cpi	r30, 0x02	; 2
     a72:	59 f0       	breq	.+22     	; 0xa8a <_ZN14RGBmatrixPanel9drawPixelEiij+0x62>
     a74:	e3 30       	cpi	r30, 0x03	; 3
     a76:	c9 f0       	breq	.+50     	; 0xaaa <_ZN14RGBmatrixPanel9drawPixelEiij+0x82>
     a78:	e1 30       	cpi	r30, 0x01	; 1
     a7a:	01 f5       	brne	.+64     	; 0xabc <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
     a7c:	fc 01       	movw	r30, r24
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	e4 1b       	sub	r30, r20
     a82:	f5 0b       	sbc	r31, r21
     a84:	ab 01       	movw	r20, r22
     a86:	bf 01       	movw	r22, r30
     a88:	19 c0       	rjmp	.+50     	; 0xabc <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	ef 01       	movw	r28, r30
     a90:	c6 1b       	sub	r28, r22
     a92:	d7 0b       	sbc	r29, r23
     a94:	be 01       	movw	r22, r28
     a96:	16 96       	adiw	r26, 0x06	; 6
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	17 97       	sbiw	r26, 0x07	; 7
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	ef 01       	movw	r28, r30
     aa2:	c4 1b       	sub	r28, r20
     aa4:	d5 0b       	sbc	r29, r21
     aa6:	ae 01       	movw	r20, r28
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <_ZN14RGBmatrixPanel9drawPixelEiij+0x94>
     aaa:	16 96       	adiw	r26, 0x06	; 6
     aac:	ed 91       	ld	r30, X+
     aae:	fc 91       	ld	r31, X
     ab0:	17 97       	sbiw	r26, 0x07	; 7
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	e6 1b       	sub	r30, r22
     ab6:	f7 0b       	sbc	r31, r23
     ab8:	ba 01       	movw	r22, r20
     aba:	af 01       	movw	r20, r30
     abc:	89 01       	movw	r16, r18
     abe:	01 2f       	mov	r16, r17
     ac0:	11 27       	eor	r17, r17
     ac2:	02 95       	swap	r16
     ac4:	0f 70       	andi	r16, 0x0F	; 15
     ac6:	f0 2e       	mov	r15, r16
     ac8:	e9 01       	movw	r28, r18
     aca:	cc 0f       	add	r28, r28
     acc:	cd 2f       	mov	r28, r29
     ace:	cc 1f       	adc	r28, r28
     ad0:	dd 0b       	sbc	r29, r29
     ad2:	d1 95       	neg	r29
     ad4:	ec 2f       	mov	r30, r28
     ad6:	ef 70       	andi	r30, 0x0F	; 15
     ad8:	ee 2e       	mov	r14, r30
     ada:	36 95       	lsr	r19
     adc:	27 95       	ror	r18
     ade:	e2 2f       	mov	r30, r18
     ae0:	ef 70       	andi	r30, 0x0F	; 15
     ae2:	de 2e       	mov	r13, r30
     ae4:	5e 96       	adiw	r26, 0x1e	; 30
     ae6:	ec 91       	ld	r30, X
     ae8:	5e 97       	sbiw	r26, 0x1e	; 30
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	01 70       	andi	r16, 0x01	; 1
     aee:	11 27       	eor	r17, r17
     af0:	3c 2f       	mov	r19, r28
     af2:	31 70       	andi	r19, 0x01	; 1
     af4:	21 70       	andi	r18, 0x01	; 1
     af6:	4e 17       	cp	r20, r30
     af8:	5f 07       	cpc	r21, r31
     afa:	0c f0       	brlt	.+2      	; 0xafe <_ZN14RGBmatrixPanel9drawPixelEiij+0xd6>
     afc:	6c c0       	rjmp	.+216    	; 0xbd6 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1ae>
     afe:	5f 96       	adiw	r26, 0x1f	; 31
     b00:	ec 91       	ld	r30, X
     b02:	5f 97       	sbiw	r26, 0x1f	; 31
     b04:	ed 01       	movw	r28, r26
     b06:	ce 0f       	add	r28, r30
     b08:	d1 1d       	adc	r29, r1
     b0a:	ce 0f       	add	r28, r30
     b0c:	d1 1d       	adc	r29, r1
     b0e:	48 9f       	mul	r20, r24
     b10:	f0 01       	movw	r30, r0
     b12:	49 9f       	mul	r20, r25
     b14:	f0 0d       	add	r31, r0
     b16:	58 9f       	mul	r21, r24
     b18:	f0 0d       	add	r31, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	af 01       	movw	r20, r30
     b1e:	44 0f       	add	r20, r20
     b20:	55 1f       	adc	r21, r21
     b22:	e4 0f       	add	r30, r20
     b24:	f5 1f       	adc	r31, r21
     b26:	6e 0f       	add	r22, r30
     b28:	7f 1f       	adc	r23, r31
     b2a:	ea 8d       	ldd	r30, Y+26	; 0x1a
     b2c:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b2e:	e6 0f       	add	r30, r22
     b30:	f7 1f       	adc	r31, r23
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	ef 01       	movw	r28, r30
     b38:	c8 0f       	add	r28, r24
     b3a:	d9 1f       	adc	r29, r25
     b3c:	88 81       	ld	r24, Y
     b3e:	8c 7f       	andi	r24, 0xFC	; 252
     b40:	88 83       	st	Y, r24
     b42:	01 2b       	or	r16, r17
     b44:	59 f0       	breq	.+22     	; 0xb5c <_ZN14RGBmatrixPanel9drawPixelEiij+0x134>
     b46:	14 96       	adiw	r26, 0x04	; 4
     b48:	cd 91       	ld	r28, X+
     b4a:	dc 91       	ld	r29, X
     b4c:	15 97       	sbiw	r26, 0x05	; 5
     b4e:	cc 0f       	add	r28, r28
     b50:	dd 1f       	adc	r29, r29
     b52:	ce 0f       	add	r28, r30
     b54:	df 1f       	adc	r29, r31
     b56:	88 81       	ld	r24, Y
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	88 83       	st	Y, r24
     b5c:	33 23       	and	r19, r19
     b5e:	59 f0       	breq	.+22     	; 0xb76 <_ZN14RGBmatrixPanel9drawPixelEiij+0x14e>
     b60:	14 96       	adiw	r26, 0x04	; 4
     b62:	cd 91       	ld	r28, X+
     b64:	dc 91       	ld	r29, X
     b66:	15 97       	sbiw	r26, 0x05	; 5
     b68:	cc 0f       	add	r28, r28
     b6a:	dd 1f       	adc	r29, r29
     b6c:	ce 0f       	add	r28, r30
     b6e:	df 1f       	adc	r29, r31
     b70:	88 81       	ld	r24, Y
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	88 83       	st	Y, r24
     b76:	14 96       	adiw	r26, 0x04	; 4
     b78:	cd 91       	ld	r28, X+
     b7a:	dc 91       	ld	r29, X
     b7c:	15 97       	sbiw	r26, 0x05	; 5
     b7e:	ce 0f       	add	r28, r30
     b80:	df 1f       	adc	r29, r31
     b82:	88 81       	ld	r24, Y
     b84:	22 23       	and	r18, r18
     b86:	31 f0       	breq	.+12     	; 0xb94 <_ZN14RGBmatrixPanel9drawPixelEiij+0x16c>
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	88 83       	st	Y, r24
     b8c:	23 e0       	ldi	r18, 0x03	; 3
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	1a c0       	rjmp	.+52     	; 0xbc8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
     b94:	8e 7f       	andi	r24, 0xFE	; 254
     b96:	f9 cf       	rjmp	.-14     	; 0xb8a <_ZN14RGBmatrixPanel9drawPixelEiij+0x162>
     b98:	80 83       	st	Z, r24
     b9a:	8e 2d       	mov	r24, r14
     b9c:	89 23       	and	r24, r25
     b9e:	19 f0       	breq	.+6      	; 0xba6 <_ZN14RGBmatrixPanel9drawPixelEiij+0x17e>
     ba0:	80 81       	ld	r24, Z
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	80 83       	st	Z, r24
     ba6:	8d 2d       	mov	r24, r13
     ba8:	89 23       	and	r24, r25
     baa:	19 f0       	breq	.+6      	; 0xbb2 <_ZN14RGBmatrixPanel9drawPixelEiij+0x18a>
     bac:	80 81       	ld	r24, Z
     bae:	80 61       	ori	r24, 0x10	; 16
     bb0:	80 83       	st	Z, r24
     bb2:	14 96       	adiw	r26, 0x04	; 4
     bb4:	4d 91       	ld	r20, X+
     bb6:	5c 91       	ld	r21, X
     bb8:	15 97       	sbiw	r26, 0x05	; 5
     bba:	e4 0f       	add	r30, r20
     bbc:	f5 1f       	adc	r31, r21
     bbe:	99 0f       	add	r25, r25
     bc0:	21 50       	subi	r18, 0x01	; 1
     bc2:	31 09       	sbc	r19, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1a0>
     bc6:	5d c0       	rjmp	.+186    	; 0xc82 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25a>
     bc8:	80 81       	ld	r24, Z
     bca:	83 7e       	andi	r24, 0xE3	; 227
     bcc:	4f 2d       	mov	r20, r15
     bce:	49 23       	and	r20, r25
     bd0:	19 f3       	breq	.-58     	; 0xb98 <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
     bd2:	84 60       	ori	r24, 0x04	; 4
     bd4:	e1 cf       	rjmp	.-62     	; 0xb98 <_ZN14RGBmatrixPanel9drawPixelEiij+0x170>
     bd6:	5f 96       	adiw	r26, 0x1f	; 31
     bd8:	cc 90       	ld	r12, X
     bda:	5f 97       	sbiw	r26, 0x1f	; 31
     bdc:	ed 01       	movw	r28, r26
     bde:	cc 0d       	add	r28, r12
     be0:	d1 1d       	adc	r29, r1
     be2:	cc 0d       	add	r28, r12
     be4:	d1 1d       	adc	r29, r1
     be6:	4e 1b       	sub	r20, r30
     be8:	5f 0b       	sbc	r21, r31
     bea:	48 9f       	mul	r20, r24
     bec:	f0 01       	movw	r30, r0
     bee:	49 9f       	mul	r20, r25
     bf0:	f0 0d       	add	r31, r0
     bf2:	58 9f       	mul	r21, r24
     bf4:	f0 0d       	add	r31, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	cf 01       	movw	r24, r30
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	e8 0f       	add	r30, r24
     c00:	f9 1f       	adc	r31, r25
     c02:	6e 0f       	add	r22, r30
     c04:	7f 1f       	adc	r23, r31
     c06:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c08:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c0a:	e6 0f       	add	r30, r22
     c0c:	f7 1f       	adc	r31, r23
     c0e:	80 81       	ld	r24, Z
     c10:	8c 7f       	andi	r24, 0xFC	; 252
     c12:	80 83       	st	Z, r24
     c14:	14 96       	adiw	r26, 0x04	; 4
     c16:	cd 91       	ld	r28, X+
     c18:	dc 91       	ld	r29, X
     c1a:	15 97       	sbiw	r26, 0x05	; 5
     c1c:	ce 0f       	add	r28, r30
     c1e:	df 1f       	adc	r29, r31
     c20:	88 81       	ld	r24, Y
     c22:	01 2b       	or	r16, r17
     c24:	11 f0       	breq	.+4      	; 0xc2a <_ZN14RGBmatrixPanel9drawPixelEiij+0x202>
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <_ZN14RGBmatrixPanel9drawPixelEiij+0x204>
     c2a:	8d 7f       	andi	r24, 0xFD	; 253
     c2c:	88 83       	st	Y, r24
     c2e:	33 23       	and	r19, r19
     c30:	19 f0       	breq	.+6      	; 0xc38 <_ZN14RGBmatrixPanel9drawPixelEiij+0x210>
     c32:	80 81       	ld	r24, Z
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	80 83       	st	Z, r24
     c38:	22 23       	and	r18, r18
     c3a:	19 f0       	breq	.+6      	; 0xc42 <_ZN14RGBmatrixPanel9drawPixelEiij+0x21a>
     c3c:	80 81       	ld	r24, Z
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	80 83       	st	Z, r24
     c42:	23 e0       	ldi	r18, 0x03	; 3
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	80 81       	ld	r24, Z
     c4a:	8f 71       	andi	r24, 0x1F	; 31
     c4c:	4f 2d       	mov	r20, r15
     c4e:	49 23       	and	r20, r25
     c50:	09 f0       	breq	.+2      	; 0xc54 <_ZN14RGBmatrixPanel9drawPixelEiij+0x22c>
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	80 83       	st	Z, r24
     c56:	8e 2d       	mov	r24, r14
     c58:	89 23       	and	r24, r25
     c5a:	19 f0       	breq	.+6      	; 0xc62 <_ZN14RGBmatrixPanel9drawPixelEiij+0x23a>
     c5c:	80 81       	ld	r24, Z
     c5e:	80 64       	ori	r24, 0x40	; 64
     c60:	80 83       	st	Z, r24
     c62:	8d 2d       	mov	r24, r13
     c64:	89 23       	and	r24, r25
     c66:	19 f0       	breq	.+6      	; 0xc6e <_ZN14RGBmatrixPanel9drawPixelEiij+0x246>
     c68:	80 81       	ld	r24, Z
     c6a:	80 68       	ori	r24, 0x80	; 128
     c6c:	80 83       	st	Z, r24
     c6e:	14 96       	adiw	r26, 0x04	; 4
     c70:	4d 91       	ld	r20, X+
     c72:	5c 91       	ld	r21, X
     c74:	15 97       	sbiw	r26, 0x05	; 5
     c76:	e4 0f       	add	r30, r20
     c78:	f5 1f       	adc	r31, r21
     c7a:	99 0f       	add	r25, r25
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	31 09       	sbc	r19, r1
     c80:	19 f7       	brne	.-58     	; 0xc48 <_ZN14RGBmatrixPanel9drawPixelEiij+0x220>
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	08 95       	ret

00000c94 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>:
     c94:	2f 92       	push	r2
     c96:	3f 92       	push	r3
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	3c 01       	movw	r6, r24
     cbe:	16 2f       	mov	r17, r22
     cc0:	d4 2e       	mov	r13, r20
     cc2:	f2 2e       	mov	r15, r18
     cc4:	b8 2c       	mov	r11, r8
     cc6:	dc 01       	movw	r26, r24
     cc8:	5e 96       	adiw	r26, 0x1e	; 30
     cca:	6c 93       	st	X, r22
     ccc:	2e 88       	ldd	r2, Y+22	; 0x16
     cce:	26 9e       	mul	r2, r22
     cd0:	c0 01       	movw	r24, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	1c 01       	movw	r2, r24
     cd6:	22 0c       	add	r2, r2
     cd8:	33 1c       	adc	r3, r3
     cda:	28 0e       	add	r2, r24
     cdc:	39 1e       	adc	r3, r25
     cde:	41 01       	movw	r8, r2
     ce0:	bb 20       	and	r11, r11
     ce2:	11 f0       	breq	.+4      	; 0xce8 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x54>
     ce4:	88 0c       	add	r8, r8
     ce6:	99 1c       	adc	r9, r9
     ce8:	c4 01       	movw	r24, r8
     cea:	0e 94 bd 13 	call	0x277a	; 0x277a <malloc>
     cee:	2c 01       	movw	r4, r24
     cf0:	f3 01       	movw	r30, r6
     cf2:	93 8f       	std	Z+27, r25	; 0x1b
     cf4:	82 8f       	std	Z+26, r24	; 0x1a
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	09 f4       	brne	.+2      	; 0xcfc <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x68>
     cfa:	a8 c0       	rjmp	.+336    	; 0xe4c <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x1b8>
     cfc:	a4 01       	movw	r20, r8
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <memset>
     d06:	bb 20       	and	r11, r11
     d08:	11 f0       	breq	.+4      	; 0xd0e <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x7a>
     d0a:	42 0c       	add	r4, r2
     d0c:	53 1c       	adc	r5, r3
     d0e:	d3 01       	movw	r26, r6
     d10:	5d 96       	adiw	r26, 0x1d	; 29
     d12:	5c 92       	st	X, r5
     d14:	4e 92       	st	-X, r4
     d16:	5c 97       	sbiw	r26, 0x1c	; 28
     d18:	d7 96       	adiw	r26, 0x37	; 55
     d1a:	dc 92       	st	X, r13
     d1c:	d7 97       	sbiw	r26, 0x37	; 55
     d1e:	d8 96       	adiw	r26, 0x38	; 56
     d20:	fc 92       	st	X, r15
     d22:	d8 97       	sbiw	r26, 0x38	; 56
     d24:	d9 96       	adiw	r26, 0x39	; 57
     d26:	0c 93       	st	X, r16
     d28:	d9 97       	sbiw	r26, 0x39	; 57
     d2a:	d4 96       	adiw	r26, 0x34	; 52
     d2c:	ec 92       	st	X, r14
     d2e:	d4 97       	sbiw	r26, 0x34	; 52
     d30:	d5 96       	adiw	r26, 0x35	; 53
     d32:	cc 92       	st	X, r12
     d34:	d5 97       	sbiw	r26, 0x35	; 53
     d36:	d6 96       	adiw	r26, 0x36	; 54
     d38:	ac 92       	st	X, r10
     d3a:	d6 97       	sbiw	r26, 0x36	; 54
     d3c:	ee 2d       	mov	r30, r14
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ec 50       	subi	r30, 0x0C	; 12
     d42:	fa 4f       	sbci	r31, 0xFA	; 250
     d44:	e4 91       	lpm	r30, Z
     d46:	9d 96       	adiw	r26, 0x2d	; 45
     d48:	ec 93       	st	X, r30
     d4a:	9d 97       	sbiw	r26, 0x2d	; 45
     d4c:	8c 2d       	mov	r24, r12
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	e6 5c       	subi	r30, 0xC6	; 198
     d54:	f9 4f       	sbci	r31, 0xF9	; 249
     d56:	e4 91       	lpm	r30, Z
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e0 58       	subi	r30, 0x80	; 128
     d60:	f9 4f       	sbci	r31, 0xF9	; 249
     d62:	25 91       	lpm	r18, Z+
     d64:	34 91       	lpm	r19, Z
     d66:	f3 01       	movw	r30, r6
     d68:	32 a3       	std	Z+34, r19	; 0x22
     d6a:	21 a3       	std	Z+33, r18	; 0x21
     d6c:	fc 01       	movw	r30, r24
     d6e:	ec 50       	subi	r30, 0x0C	; 12
     d70:	fa 4f       	sbci	r31, 0xFA	; 250
     d72:	84 91       	lpm	r24, Z
     d74:	9e 96       	adiw	r26, 0x2e	; 46
     d76:	8c 93       	st	X, r24
     d78:	9e 97       	sbiw	r26, 0x2e	; 46
     d7a:	8a 2d       	mov	r24, r10
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	e6 5c       	subi	r30, 0xC6	; 198
     d82:	f9 4f       	sbci	r31, 0xF9	; 249
     d84:	e4 91       	lpm	r30, Z
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	e0 58       	subi	r30, 0x80	; 128
     d8e:	f9 4f       	sbci	r31, 0xF9	; 249
     d90:	25 91       	lpm	r18, Z+
     d92:	34 91       	lpm	r19, Z
     d94:	f3 01       	movw	r30, r6
     d96:	34 a3       	std	Z+36, r19	; 0x24
     d98:	23 a3       	std	Z+35, r18	; 0x23
     d9a:	fc 01       	movw	r30, r24
     d9c:	ec 50       	subi	r30, 0x0C	; 12
     d9e:	fa 4f       	sbci	r31, 0xFA	; 250
     da0:	84 91       	lpm	r24, Z
     da2:	9f 96       	adiw	r26, 0x2f	; 47
     da4:	8c 93       	st	X, r24
     da6:	9f 97       	sbiw	r26, 0x2f	; 47
     da8:	8d 2d       	mov	r24, r13
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	e6 5c       	subi	r30, 0xC6	; 198
     db0:	f9 4f       	sbci	r31, 0xF9	; 249
     db2:	e4 91       	lpm	r30, Z
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	e0 58       	subi	r30, 0x80	; 128
     dbc:	f9 4f       	sbci	r31, 0xF9	; 249
     dbe:	25 91       	lpm	r18, Z+
     dc0:	34 91       	lpm	r19, Z
     dc2:	f3 01       	movw	r30, r6
     dc4:	36 a3       	std	Z+38, r19	; 0x26
     dc6:	25 a3       	std	Z+37, r18	; 0x25
     dc8:	fc 01       	movw	r30, r24
     dca:	ec 50       	subi	r30, 0x0C	; 12
     dcc:	fa 4f       	sbci	r31, 0xFA	; 250
     dce:	84 91       	lpm	r24, Z
     dd0:	d0 96       	adiw	r26, 0x30	; 48
     dd2:	8c 93       	st	X, r24
     dd4:	d0 97       	sbiw	r26, 0x30	; 48
     dd6:	8f 2d       	mov	r24, r15
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc 01       	movw	r30, r24
     ddc:	e6 5c       	subi	r30, 0xC6	; 198
     dde:	f9 4f       	sbci	r31, 0xF9	; 249
     de0:	e4 91       	lpm	r30, Z
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	e0 58       	subi	r30, 0x80	; 128
     dea:	f9 4f       	sbci	r31, 0xF9	; 249
     dec:	25 91       	lpm	r18, Z+
     dee:	34 91       	lpm	r19, Z
     df0:	f3 01       	movw	r30, r6
     df2:	30 a7       	std	Z+40, r19	; 0x28
     df4:	27 a3       	std	Z+39, r18	; 0x27
     df6:	fc 01       	movw	r30, r24
     df8:	ec 50       	subi	r30, 0x0C	; 12
     dfa:	fa 4f       	sbci	r31, 0xFA	; 250
     dfc:	84 91       	lpm	r24, Z
     dfe:	d1 96       	adiw	r26, 0x31	; 49
     e00:	8c 93       	st	X, r24
     e02:	d1 97       	sbiw	r26, 0x31	; 49
     e04:	80 2f       	mov	r24, r16
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	fc 01       	movw	r30, r24
     e0a:	e6 5c       	subi	r30, 0xC6	; 198
     e0c:	f9 4f       	sbci	r31, 0xF9	; 249
     e0e:	e4 91       	lpm	r30, Z
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	e0 58       	subi	r30, 0x80	; 128
     e18:	f9 4f       	sbci	r31, 0xF9	; 249
     e1a:	25 91       	lpm	r18, Z+
     e1c:	34 91       	lpm	r19, Z
     e1e:	f3 01       	movw	r30, r6
     e20:	32 a7       	std	Z+42, r19	; 0x2a
     e22:	21 a7       	std	Z+41, r18	; 0x29
     e24:	fc 01       	movw	r30, r24
     e26:	ec 50       	subi	r30, 0x0C	; 12
     e28:	fa 4f       	sbci	r31, 0xFA	; 250
     e2a:	84 91       	lpm	r24, Z
     e2c:	d2 96       	adiw	r26, 0x32	; 50
     e2e:	8c 93       	st	X, r24
     e30:	d2 97       	sbiw	r26, 0x32	; 50
     e32:	83 e0       	ldi	r24, 0x03	; 3
     e34:	dc 96       	adiw	r26, 0x3c	; 60
     e36:	8c 93       	st	X, r24
     e38:	dc 97       	sbiw	r26, 0x3c	; 60
     e3a:	11 50       	subi	r17, 0x01	; 1
     e3c:	db 96       	adiw	r26, 0x3b	; 59
     e3e:	1c 93       	st	X, r17
     e40:	db 97       	sbiw	r26, 0x3b	; 59
     e42:	90 96       	adiw	r26, 0x20	; 32
     e44:	1c 92       	st	X, r1
     e46:	90 97       	sbiw	r26, 0x20	; 32
     e48:	5f 96       	adiw	r26, 0x1f	; 31
     e4a:	1c 92       	st	X, r1
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	9f 90       	pop	r9
     e62:	8f 90       	pop	r8
     e64:	7f 90       	pop	r7
     e66:	6f 90       	pop	r6
     e68:	5f 90       	pop	r5
     e6a:	4f 90       	pop	r4
     e6c:	3f 90       	pop	r3
     e6e:	2f 90       	pop	r2
     e70:	08 95       	ret

00000e72 <_ZN14RGBmatrixPanelC1Ehhhhhhb>:
     e72:	8f 92       	push	r8
     e74:	af 92       	push	r10
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	ec 01       	movw	r28, r24
     e88:	16 2f       	mov	r17, r22
     e8a:	f4 2e       	mov	r15, r20
     e8c:	d2 2e       	mov	r13, r18
     e8e:	48 e0       	ldi	r20, 0x08	; 8
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	60 e8       	ldi	r22, 0x80	; 128
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	5c d7       	rcall	.+3768   	; 0x1d50 <_ZN12Adafruit_GFXC1Eii>
     e98:	8a e0       	ldi	r24, 0x0A	; 10
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	99 83       	std	Y+1, r25	; 0x01
     e9e:	88 83       	st	Y, r24
     ea0:	88 e0       	ldi	r24, 0x08	; 8
     ea2:	8f 93       	push	r24
     ea4:	8a 2c       	mov	r8, r10
     ea6:	ac 2c       	mov	r10, r12
     ea8:	ce 2c       	mov	r12, r14
     eaa:	e0 2e       	mov	r14, r16
     eac:	0d 2d       	mov	r16, r13
     eae:	2f 2d       	mov	r18, r15
     eb0:	41 2f       	mov	r20, r17
     eb2:	64 e0       	ldi	r22, 0x04	; 4
     eb4:	ce 01       	movw	r24, r28
     eb6:	ee de       	rcall	.-548    	; 0xc94 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>
     eb8:	0f 90       	pop	r0
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	af 90       	pop	r10
     ecc:	8f 90       	pop	r8
     ece:	08 95       	ret

00000ed0 <_ZN14RGBmatrixPanel5beginEv>:
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
     ed6:	1f 8e       	std	Y+31, r1	; 0x1f
     ed8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eda:	e1 e0       	ldi	r30, 0x01	; 1
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	e8 1b       	sub	r30, r24
     ee0:	f1 09       	sbc	r31, r1
     ee2:	3d 96       	adiw	r30, 0x0d	; 13
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ec 0f       	add	r30, r28
     eea:	fd 1f       	adc	r31, r29
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	9e af       	std	Y+62, r25	; 0x3e
     ef2:	8d af       	std	Y+61, r24	; 0x3d
     ef4:	d0 93 bc 02 	sts	0x02BC, r29	; 0x8002bc <_ZL11activePanel+0x1>
     ef8:	c0 93 bb 02 	sts	0x02BB, r28	; 0x8002bb <_ZL11activePanel>
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	8c a9       	ldd	r24, Y+52	; 0x34
     f00:	0e 94 79 13 	call	0x26f2	; 0x26f2 <pinMode>
     f04:	95 b1       	in	r25, 0x05	; 5
     f06:	8d a5       	ldd	r24, Y+45	; 0x2d
     f08:	80 95       	com	r24
     f0a:	89 23       	and	r24, r25
     f0c:	85 b9       	out	0x05, r24	; 5
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	8d a9       	ldd	r24, Y+53	; 0x35
     f12:	0e 94 79 13 	call	0x26f2	; 0x26f2 <pinMode>
     f16:	e9 a1       	ldd	r30, Y+33	; 0x21
     f18:	fa a1       	ldd	r31, Y+34	; 0x22
     f1a:	90 81       	ld	r25, Z
     f1c:	8e a5       	ldd	r24, Y+46	; 0x2e
     f1e:	80 95       	com	r24
     f20:	89 23       	and	r24, r25
     f22:	80 83       	st	Z, r24
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	8e a9       	ldd	r24, Y+54	; 0x36
     f28:	0e 94 79 13 	call	0x26f2	; 0x26f2 <pinMode>
     f2c:	eb a1       	ldd	r30, Y+35	; 0x23
     f2e:	fc a1       	ldd	r31, Y+36	; 0x24
     f30:	90 81       	ld	r25, Z
     f32:	8f a5       	ldd	r24, Y+47	; 0x2f
     f34:	89 2b       	or	r24, r25
     f36:	80 83       	st	Z, r24
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	8f a9       	ldd	r24, Y+55	; 0x37
     f3c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <pinMode>
     f40:	ed a1       	ldd	r30, Y+37	; 0x25
     f42:	fe a1       	ldd	r31, Y+38	; 0x26
     f44:	90 81       	ld	r25, Z
     f46:	88 a9       	ldd	r24, Y+48	; 0x30
     f48:	80 95       	com	r24
     f4a:	89 23       	and	r24, r25
     f4c:	80 83       	st	Z, r24
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	88 ad       	ldd	r24, Y+56	; 0x38
     f52:	0e 94 79 13 	call	0x26f2	; 0x26f2 <pinMode>
     f56:	ef a1       	ldd	r30, Y+39	; 0x27
     f58:	f8 a5       	ldd	r31, Y+40	; 0x28
     f5a:	90 81       	ld	r25, Z
     f5c:	89 a9       	ldd	r24, Y+49	; 0x31
     f5e:	80 95       	com	r24
     f60:	89 23       	and	r24, r25
     f62:	80 83       	st	Z, r24
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	89 ad       	ldd	r24, Y+57	; 0x39
     f68:	0e 94 79 13 	call	0x26f2	; 0x26f2 <pinMode>
     f6c:	e9 a5       	ldd	r30, Y+41	; 0x29
     f6e:	fa a5       	ldd	r31, Y+42	; 0x2a
     f70:	90 81       	ld	r25, Z
     f72:	8a a9       	ldd	r24, Y+50	; 0x32
     f74:	80 95       	com	r24
     f76:	89 23       	and	r24, r25
     f78:	80 83       	st	Z, r24
     f7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f7c:	89 30       	cpi	r24, 0x09	; 9
     f7e:	58 f0       	brcs	.+22     	; 0xf96 <_ZN14RGBmatrixPanel5beginEv+0xc6>
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	8a ad       	ldd	r24, Y+58	; 0x3a
     f84:	0e 94 79 13 	call	0x26f2	; 0x26f2 <pinMode>
     f88:	eb a5       	ldd	r30, Y+43	; 0x2b
     f8a:	fc a5       	ldd	r31, Y+44	; 0x2c
     f8c:	90 81       	ld	r25, Z
     f8e:	8b a9       	ldd	r24, Y+51	; 0x33
     f90:	80 95       	com	r24
     f92:	89 23       	and	r24, r25
     f94:	80 83       	st	Z, r24
     f96:	8c ef       	ldi	r24, 0xFC	; 252
     f98:	81 b9       	out	0x01, r24	; 1
     f9a:	12 b8       	out	0x02, r1	; 2
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     fa2:	89 e1       	ldi	r24, 0x19	; 25
     fa4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     fa8:	84 e6       	ldi	r24, 0x64	; 100
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     fb0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     fb4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
     fbe:	78 94       	sei
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <_ZN14RGBmatrixPanel8Color333Ehhh>:
     fc6:	82 2f       	mov	r24, r18
     fc8:	87 70       	andi	r24, 0x07	; 7
     fca:	34 e0       	ldi	r19, 0x04	; 4
     fcc:	83 9f       	mul	r24, r19
     fce:	c0 01       	movw	r24, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	26 70       	andi	r18, 0x06	; 6
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	35 95       	asr	r19
     fd8:	27 95       	ror	r18
     fda:	28 2b       	or	r18, r24
     fdc:	39 2b       	or	r19, r25
     fde:	86 2f       	mov	r24, r22
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	98 2f       	mov	r25, r24
     fe4:	88 27       	eor	r24, r24
     fe6:	92 95       	swap	r25
     fe8:	99 0f       	add	r25, r25
     fea:	90 7e       	andi	r25, 0xE0	; 224
     fec:	82 2b       	or	r24, r18
     fee:	93 2b       	or	r25, r19
     ff0:	24 2f       	mov	r18, r20
     ff2:	27 70       	andi	r18, 0x07	; 7
     ff4:	92 2b       	or	r25, r18
     ff6:	20 e2       	ldi	r18, 0x20	; 32
     ff8:	42 9f       	mul	r20, r18
     ffa:	a0 01       	movw	r20, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	55 27       	eor	r21, r21
    1000:	84 2b       	or	r24, r20
    1002:	95 2b       	or	r25, r21
    1004:	66 70       	andi	r22, 0x06	; 6
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	76 2f       	mov	r23, r22
    100a:	66 27       	eor	r22, r22
    100c:	77 0f       	add	r23, r23
    100e:	77 0f       	add	r23, r23
    1010:	86 2b       	or	r24, r22
    1012:	97 2b       	or	r25, r23
    1014:	08 95       	ret

00001016 <_ZN14RGBmatrixPanel13updateDisplayEv>:
// being issued to the LED matrix for the *next* bitplane and/or row
// while the *current* plane/row is being shown.  As a result, the
// counter variables change between past/present/future tense in mid-
// function...hopefully tenses are sufficiently commented.

void RGBmatrixPanel::updateDisplay(void) {
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	dc 01       	movw	r26, r24
  uint8_t  i, tick, tock, *ptr;
  uint16_t t, duration;

  *oeport  |= oepin;  // Disable LED output during row/plane switchover
    1022:	93 96       	adiw	r26, 0x23	; 35
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	94 97       	sbiw	r26, 0x24	; 36
    102a:	90 81       	ld	r25, Z
    102c:	9f 96       	adiw	r26, 0x2f	; 47
    102e:	8c 91       	ld	r24, X
    1030:	9f 97       	sbiw	r26, 0x2f	; 47
    1032:	89 2b       	or	r24, r25
    1034:	80 83       	st	Z, r24
  *latport |= latpin; // Latch data loaded during *prior* interrupt
    1036:	91 96       	adiw	r26, 0x21	; 33
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	92 97       	sbiw	r26, 0x22	; 34
    103e:	90 81       	ld	r25, Z
    1040:	9e 96       	adiw	r26, 0x2e	; 46
    1042:	8c 91       	ld	r24, X
    1044:	9e 97       	sbiw	r26, 0x2e	; 46
    1046:	89 2b       	or	r24, r25
    1048:	80 83       	st	Z, r24
  // This is because duration is the display time for the data loaded
  // on the PRIOR interrupt.  CALLOVERHEAD is subtracted from the
  // result because that time is implicit between the timer overflow
  // (interrupt triggered) and the initial LEDs-off line at the start
  // of this method.
  t = (nRows > 8) ? LOOPTIME : (LOOPTIME * 2);
    104a:	5e 96       	adiw	r26, 0x1e	; 30
    104c:	3c 91       	ld	r19, X
    104e:	5e 97       	sbiw	r26, 0x1e	; 30
    1050:	39 30       	cpi	r19, 0x09	; 9
    1052:	18 f4       	brcc	.+6      	; 0x105a <_ZN14RGBmatrixPanel13updateDisplayEv+0x44>
    1054:	80 e9       	ldi	r24, 0x90	; 144
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	02 c0       	rjmp	.+4      	; 0x105e <_ZN14RGBmatrixPanel13updateDisplayEv+0x48>
    105a:	88 ec       	ldi	r24, 0xC8	; 200
    105c:	90 e0       	ldi	r25, 0x00	; 0
  duration = ((t + CALLOVERHEAD * 2) << plane) - CALLOVERHEAD;
    105e:	dc 96       	adiw	r26, 0x3c	; 60
    1060:	2c 91       	ld	r18, X
    1062:	dc 97       	sbiw	r26, 0x3c	; 60
    1064:	88 58       	subi	r24, 0x88	; 136
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	02 c0       	rjmp	.+4      	; 0x106e <_ZN14RGBmatrixPanel13updateDisplayEv+0x58>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	2a 95       	dec	r18
    1070:	e2 f7       	brpl	.-8      	; 0x106a <_ZN14RGBmatrixPanel13updateDisplayEv+0x54>
    1072:	cc 97       	sbiw	r24, 0x3c	; 60
  // advancing to the next line.  While it might seem beneficial to
  // advance lines every time and interleave the planes to reduce
  // vertical scanning artifacts, in practice with this panel it causes
  // a green 'ghosting' effect on black pixels, a much worse artifact.

  if(++plane >= nPlanes) {      // Advance plane counter.  Maxed out?
    1074:	dc 96       	adiw	r26, 0x3c	; 60
    1076:	2c 91       	ld	r18, X
    1078:	dc 97       	sbiw	r26, 0x3c	; 60
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	dc 96       	adiw	r26, 0x3c	; 60
    107e:	2c 93       	st	X, r18
    1080:	dc 97       	sbiw	r26, 0x3c	; 60
    1082:	24 30       	cpi	r18, 0x04	; 4
    1084:	98 f1       	brcs	.+102    	; 0x10ec <_ZN14RGBmatrixPanel13updateDisplayEv+0xd6>
    plane = 0;                  // Yes, reset to plane 0, and
    1086:	dc 96       	adiw	r26, 0x3c	; 60
    1088:	1c 92       	st	X, r1
    108a:	dc 97       	sbiw	r26, 0x3c	; 60
    if(++row >= nRows) {        // advance row counter.  Maxed out?
    108c:	db 96       	adiw	r26, 0x3b	; 59
    108e:	2c 91       	ld	r18, X
    1090:	db 97       	sbiw	r26, 0x3b	; 59
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	db 96       	adiw	r26, 0x3b	; 59
    1096:	2c 93       	st	X, r18
    1098:	db 97       	sbiw	r26, 0x3b	; 59
    109a:	23 17       	cp	r18, r19
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x8a>
    109e:	7d c0       	rjmp	.+250    	; 0x119a <_ZN14RGBmatrixPanel13updateDisplayEv+0x184>
      row     = 0;              // Yes, reset row counter, then...
    10a0:	db 96       	adiw	r26, 0x3b	; 59
    10a2:	1c 92       	st	X, r1
    10a4:	db 97       	sbiw	r26, 0x3b	; 59
      if(swapflag == true) {    // Swap front/back buffers if requested
    10a6:	90 96       	adiw	r26, 0x20	; 32
    10a8:	2c 91       	ld	r18, X
    10aa:	90 97       	sbiw	r26, 0x20	; 32
    10ac:	22 23       	and	r18, r18
    10ae:	59 f0       	breq	.+22     	; 0x10c6 <_ZN14RGBmatrixPanel13updateDisplayEv+0xb0>
        backindex = 1 - backindex;
    10b0:	5f 96       	adiw	r26, 0x1f	; 31
    10b2:	3c 91       	ld	r19, X
    10b4:	5f 97       	sbiw	r26, 0x1f	; 31
    10b6:	21 e0       	ldi	r18, 0x01	; 1
    10b8:	23 1b       	sub	r18, r19
    10ba:	5f 96       	adiw	r26, 0x1f	; 31
    10bc:	2c 93       	st	X, r18
    10be:	5f 97       	sbiw	r26, 0x1f	; 31
        swapflag  = false;
    10c0:	90 96       	adiw	r26, 0x20	; 32
    10c2:	1c 92       	st	X, r1
    10c4:	90 97       	sbiw	r26, 0x20	; 32
      }
      buffptr = matrixbuff[1-backindex]; // Reset into front buffer
    10c6:	5f 96       	adiw	r26, 0x1f	; 31
    10c8:	2c 91       	ld	r18, X
    10ca:	5f 97       	sbiw	r26, 0x1f	; 31
    10cc:	e1 e0       	ldi	r30, 0x01	; 1
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	e2 1b       	sub	r30, r18
    10d2:	f1 09       	sbc	r31, r1
    10d4:	3d 96       	adiw	r30, 0x0d	; 13
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	ea 0f       	add	r30, r26
    10dc:	fb 1f       	adc	r31, r27
    10de:	20 81       	ld	r18, Z
    10e0:	31 81       	ldd	r19, Z+1	; 0x01
    10e2:	de 96       	adiw	r26, 0x3e	; 62
    10e4:	3c 93       	st	X, r19
    10e6:	2e 93       	st	-X, r18
    10e8:	dd 97       	sbiw	r26, 0x3d	; 61
    10ea:	57 c0       	rjmp	.+174    	; 0x119a <_ZN14RGBmatrixPanel13updateDisplayEv+0x184>
    }
  } else if(plane == 1) {
    10ec:	dc 96       	adiw	r26, 0x3c	; 60
    10ee:	2c 91       	ld	r18, X
    10f0:	dc 97       	sbiw	r26, 0x3c	; 60
    10f2:	21 30       	cpi	r18, 0x01	; 1
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <_ZN14RGBmatrixPanel13updateDisplayEv+0xe2>
    10f6:	51 c0       	rjmp	.+162    	; 0x119a <_ZN14RGBmatrixPanel13updateDisplayEv+0x184>
    // Plane 0 was loaded on prior interrupt invocation and is about to
    // latch now, so update the row address lines before we do that:
    if(row & 0x1)   *addraport |=  addrapin;
    10f8:	db 96       	adiw	r26, 0x3b	; 59
    10fa:	3c 91       	ld	r19, X
    10fc:	db 97       	sbiw	r26, 0x3b	; 59
    10fe:	95 96       	adiw	r26, 0x25	; 37
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	96 97       	sbiw	r26, 0x26	; 38
    1106:	d0 96       	adiw	r26, 0x30	; 48
    1108:	2c 91       	ld	r18, X
    110a:	d0 97       	sbiw	r26, 0x30	; 48
    110c:	30 ff       	sbrs	r19, 0
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <_ZN14RGBmatrixPanel13updateDisplayEv+0x100>
    1110:	30 81       	ld	r19, Z
    1112:	23 2b       	or	r18, r19
    1114:	03 c0       	rjmp	.+6      	; 0x111c <_ZN14RGBmatrixPanel13updateDisplayEv+0x106>
    else            *addraport &= ~addrapin;
    1116:	30 81       	ld	r19, Z
    1118:	20 95       	com	r18
    111a:	23 23       	and	r18, r19
    111c:	20 83       	st	Z, r18
    if(row & 0x2)   *addrbport |=  addrbpin;
    111e:	db 96       	adiw	r26, 0x3b	; 59
    1120:	3c 91       	ld	r19, X
    1122:	db 97       	sbiw	r26, 0x3b	; 59
    1124:	97 96       	adiw	r26, 0x27	; 39
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	98 97       	sbiw	r26, 0x28	; 40
    112c:	d1 96       	adiw	r26, 0x31	; 49
    112e:	2c 91       	ld	r18, X
    1130:	d1 97       	sbiw	r26, 0x31	; 49
    1132:	31 ff       	sbrs	r19, 1
    1134:	03 c0       	rjmp	.+6      	; 0x113c <_ZN14RGBmatrixPanel13updateDisplayEv+0x126>
    1136:	30 81       	ld	r19, Z
    1138:	23 2b       	or	r18, r19
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <_ZN14RGBmatrixPanel13updateDisplayEv+0x12c>
    else            *addrbport &= ~addrbpin;
    113c:	30 81       	ld	r19, Z
    113e:	20 95       	com	r18
    1140:	23 23       	and	r18, r19
    1142:	20 83       	st	Z, r18
    if(row & 0x4)   *addrcport |=  addrcpin;
    1144:	db 96       	adiw	r26, 0x3b	; 59
    1146:	3c 91       	ld	r19, X
    1148:	db 97       	sbiw	r26, 0x3b	; 59
    114a:	99 96       	adiw	r26, 0x29	; 41
    114c:	ed 91       	ld	r30, X+
    114e:	fc 91       	ld	r31, X
    1150:	9a 97       	sbiw	r26, 0x2a	; 42
    1152:	d2 96       	adiw	r26, 0x32	; 50
    1154:	2c 91       	ld	r18, X
    1156:	d2 97       	sbiw	r26, 0x32	; 50
    1158:	32 ff       	sbrs	r19, 2
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <_ZN14RGBmatrixPanel13updateDisplayEv+0x14c>
    115c:	30 81       	ld	r19, Z
    115e:	23 2b       	or	r18, r19
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <_ZN14RGBmatrixPanel13updateDisplayEv+0x152>
    else            *addrcport &= ~addrcpin;
    1162:	30 81       	ld	r19, Z
    1164:	20 95       	com	r18
    1166:	23 23       	and	r18, r19
    1168:	20 83       	st	Z, r18
    if(nRows > 8) {
    116a:	5e 96       	adiw	r26, 0x1e	; 30
    116c:	2c 91       	ld	r18, X
    116e:	5e 97       	sbiw	r26, 0x1e	; 30
    1170:	29 30       	cpi	r18, 0x09	; 9
    1172:	98 f0       	brcs	.+38     	; 0x119a <_ZN14RGBmatrixPanel13updateDisplayEv+0x184>
      if(row & 0x8) *addrdport |=  addrdpin;
    1174:	db 96       	adiw	r26, 0x3b	; 59
    1176:	3c 91       	ld	r19, X
    1178:	db 97       	sbiw	r26, 0x3b	; 59
    117a:	9b 96       	adiw	r26, 0x2b	; 43
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	9c 97       	sbiw	r26, 0x2c	; 44
    1182:	d3 96       	adiw	r26, 0x33	; 51
    1184:	2c 91       	ld	r18, X
    1186:	d3 97       	sbiw	r26, 0x33	; 51
    1188:	33 ff       	sbrs	r19, 3
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <_ZN14RGBmatrixPanel13updateDisplayEv+0x17c>
    118c:	30 81       	ld	r19, Z
    118e:	23 2b       	or	r18, r19
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <_ZN14RGBmatrixPanel13updateDisplayEv+0x182>
      else          *addrdport &= ~addrdpin;
    1192:	30 81       	ld	r19, Z
    1194:	20 95       	com	r18
    1196:	23 23       	and	r18, r19
    1198:	20 83       	st	Z, r18
    }
  }

  // buffptr, being 'volatile' type, doesn't take well to optimization.
  // A local register copy can speed some things up:
  ptr = (uint8_t *)buffptr;
    119a:	dd 96       	adiw	r26, 0x3d	; 61
    119c:	ed 91       	ld	r30, X+
    119e:	fc 91       	ld	r31, X
    11a0:	de 97       	sbiw	r26, 0x3e	; 62

  ICR1      = duration; // Set interval for next interrupt
    11a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    11a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
  TCNT1     = 0;        // Restart interrupt timer
    11aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    11ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
  *oeport  &= ~oepin;   // Re-enable output
    11b2:	93 96       	adiw	r26, 0x23	; 35
    11b4:	cd 91       	ld	r28, X+
    11b6:	dc 91       	ld	r29, X
    11b8:	94 97       	sbiw	r26, 0x24	; 36
    11ba:	98 81       	ld	r25, Y
    11bc:	9f 96       	adiw	r26, 0x2f	; 47
    11be:	8c 91       	ld	r24, X
    11c0:	9f 97       	sbiw	r26, 0x2f	; 47
    11c2:	80 95       	com	r24
    11c4:	89 23       	and	r24, r25
    11c6:	88 83       	st	Y, r24
  *latport &= ~latpin;  // Latch down
    11c8:	91 96       	adiw	r26, 0x21	; 33
    11ca:	cd 91       	ld	r28, X+
    11cc:	dc 91       	ld	r29, X
    11ce:	92 97       	sbiw	r26, 0x22	; 34
    11d0:	98 81       	ld	r25, Y
    11d2:	9e 96       	adiw	r26, 0x2e	; 46
    11d4:	8c 91       	ld	r24, X
    11d6:	9e 97       	sbiw	r26, 0x2e	; 46
    11d8:	80 95       	com	r24
    11da:	89 23       	and	r24, r25
    11dc:	88 83       	st	Y, r24
  // not have to load/modify/store bits every single time.  It's a
  // somewhat rude trick that ONLY works because the interrupt
  // handler is set ISR_BLOCK, halting any other interrupts that
  // might otherwise also be twiddling the port at the same time
  // (else this would clobber them).
  tock = SCLKPORT;
    11de:	25 b1       	in	r18, 0x05	; 5
  tick = tock | sclkpin;
    11e0:	9d 96       	adiw	r26, 0x2d	; 45
    11e2:	9c 91       	ld	r25, X
    11e4:	9d 97       	sbiw	r26, 0x2d	; 45
    11e6:	92 2b       	or	r25, r18

  if(plane > 0) { // 188 ticks from TCNT1=0 (above) to end of function
    11e8:	dc 96       	adiw	r26, 0x3c	; 60
    11ea:	8c 91       	ld	r24, X
    11ec:	dc 97       	sbiw	r26, 0x3c	; 60
    11ee:	81 11       	cpse	r24, r1
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1e0>
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8d c2       	rjmp	.+1306   	; 0x1710 <_ZN14RGBmatrixPanel13updateDisplayEv+0x6fa>
         [clk]  "I" (_SFR_IO_ADDR(SCLKPORT)), \
         [tick] "r" (tick),                   \
         [tock] "r" (tock));

    // Loop is unrolled for speed:
    pew pew pew pew pew pew pew pew
    11f6:	01 90       	ld	r0, Z+
    11f8:	02 b8       	out	0x02, r0	; 2
    11fa:	95 b9       	out	0x05, r25	; 5
    11fc:	25 b9       	out	0x05, r18	; 5
    11fe:	01 90       	ld	r0, Z+
    1200:	02 b8       	out	0x02, r0	; 2
    1202:	95 b9       	out	0x05, r25	; 5
    1204:	25 b9       	out	0x05, r18	; 5
    1206:	01 90       	ld	r0, Z+
    1208:	02 b8       	out	0x02, r0	; 2
    120a:	95 b9       	out	0x05, r25	; 5
    120c:	25 b9       	out	0x05, r18	; 5
    120e:	01 90       	ld	r0, Z+
    1210:	02 b8       	out	0x02, r0	; 2
    1212:	95 b9       	out	0x05, r25	; 5
    1214:	25 b9       	out	0x05, r18	; 5
    1216:	01 90       	ld	r0, Z+
    1218:	02 b8       	out	0x02, r0	; 2
    121a:	95 b9       	out	0x05, r25	; 5
    121c:	25 b9       	out	0x05, r18	; 5
    121e:	01 90       	ld	r0, Z+
    1220:	02 b8       	out	0x02, r0	; 2
    1222:	95 b9       	out	0x05, r25	; 5
    1224:	25 b9       	out	0x05, r18	; 5
    1226:	01 90       	ld	r0, Z+
    1228:	02 b8       	out	0x02, r0	; 2
    122a:	95 b9       	out	0x05, r25	; 5
    122c:	25 b9       	out	0x05, r18	; 5
    122e:	01 90       	ld	r0, Z+
    1230:	02 b8       	out	0x02, r0	; 2
    1232:	95 b9       	out	0x05, r25	; 5
    1234:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1236:	01 90       	ld	r0, Z+
    1238:	02 b8       	out	0x02, r0	; 2
    123a:	95 b9       	out	0x05, r25	; 5
    123c:	25 b9       	out	0x05, r18	; 5
    123e:	01 90       	ld	r0, Z+
    1240:	02 b8       	out	0x02, r0	; 2
    1242:	95 b9       	out	0x05, r25	; 5
    1244:	25 b9       	out	0x05, r18	; 5
    1246:	01 90       	ld	r0, Z+
    1248:	02 b8       	out	0x02, r0	; 2
    124a:	95 b9       	out	0x05, r25	; 5
    124c:	25 b9       	out	0x05, r18	; 5
    124e:	01 90       	ld	r0, Z+
    1250:	02 b8       	out	0x02, r0	; 2
    1252:	95 b9       	out	0x05, r25	; 5
    1254:	25 b9       	out	0x05, r18	; 5
    1256:	01 90       	ld	r0, Z+
    1258:	02 b8       	out	0x02, r0	; 2
    125a:	95 b9       	out	0x05, r25	; 5
    125c:	25 b9       	out	0x05, r18	; 5
    125e:	01 90       	ld	r0, Z+
    1260:	02 b8       	out	0x02, r0	; 2
    1262:	95 b9       	out	0x05, r25	; 5
    1264:	25 b9       	out	0x05, r18	; 5
    1266:	01 90       	ld	r0, Z+
    1268:	02 b8       	out	0x02, r0	; 2
    126a:	95 b9       	out	0x05, r25	; 5
    126c:	25 b9       	out	0x05, r18	; 5
    126e:	01 90       	ld	r0, Z+
    1270:	02 b8       	out	0x02, r0	; 2
    1272:	95 b9       	out	0x05, r25	; 5
    1274:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1276:	01 90       	ld	r0, Z+
    1278:	02 b8       	out	0x02, r0	; 2
    127a:	95 b9       	out	0x05, r25	; 5
    127c:	25 b9       	out	0x05, r18	; 5
    127e:	01 90       	ld	r0, Z+
    1280:	02 b8       	out	0x02, r0	; 2
    1282:	95 b9       	out	0x05, r25	; 5
    1284:	25 b9       	out	0x05, r18	; 5
    1286:	01 90       	ld	r0, Z+
    1288:	02 b8       	out	0x02, r0	; 2
    128a:	95 b9       	out	0x05, r25	; 5
    128c:	25 b9       	out	0x05, r18	; 5
    128e:	01 90       	ld	r0, Z+
    1290:	02 b8       	out	0x02, r0	; 2
    1292:	95 b9       	out	0x05, r25	; 5
    1294:	25 b9       	out	0x05, r18	; 5
    1296:	01 90       	ld	r0, Z+
    1298:	02 b8       	out	0x02, r0	; 2
    129a:	95 b9       	out	0x05, r25	; 5
    129c:	25 b9       	out	0x05, r18	; 5
    129e:	01 90       	ld	r0, Z+
    12a0:	02 b8       	out	0x02, r0	; 2
    12a2:	95 b9       	out	0x05, r25	; 5
    12a4:	25 b9       	out	0x05, r18	; 5
    12a6:	01 90       	ld	r0, Z+
    12a8:	02 b8       	out	0x02, r0	; 2
    12aa:	95 b9       	out	0x05, r25	; 5
    12ac:	25 b9       	out	0x05, r18	; 5
    12ae:	01 90       	ld	r0, Z+
    12b0:	02 b8       	out	0x02, r0	; 2
    12b2:	95 b9       	out	0x05, r25	; 5
    12b4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    12b6:	01 90       	ld	r0, Z+
    12b8:	02 b8       	out	0x02, r0	; 2
    12ba:	95 b9       	out	0x05, r25	; 5
    12bc:	25 b9       	out	0x05, r18	; 5
    12be:	01 90       	ld	r0, Z+
    12c0:	02 b8       	out	0x02, r0	; 2
    12c2:	95 b9       	out	0x05, r25	; 5
    12c4:	25 b9       	out	0x05, r18	; 5
    12c6:	01 90       	ld	r0, Z+
    12c8:	02 b8       	out	0x02, r0	; 2
    12ca:	95 b9       	out	0x05, r25	; 5
    12cc:	25 b9       	out	0x05, r18	; 5
    12ce:	01 90       	ld	r0, Z+
    12d0:	02 b8       	out	0x02, r0	; 2
    12d2:	95 b9       	out	0x05, r25	; 5
    12d4:	25 b9       	out	0x05, r18	; 5
    12d6:	01 90       	ld	r0, Z+
    12d8:	02 b8       	out	0x02, r0	; 2
    12da:	95 b9       	out	0x05, r25	; 5
    12dc:	25 b9       	out	0x05, r18	; 5
    12de:	01 90       	ld	r0, Z+
    12e0:	02 b8       	out	0x02, r0	; 2
    12e2:	95 b9       	out	0x05, r25	; 5
    12e4:	25 b9       	out	0x05, r18	; 5
    12e6:	01 90       	ld	r0, Z+
    12e8:	02 b8       	out	0x02, r0	; 2
    12ea:	95 b9       	out	0x05, r25	; 5
    12ec:	25 b9       	out	0x05, r18	; 5
    12ee:	01 90       	ld	r0, Z+
    12f0:	02 b8       	out	0x02, r0	; 2
    12f2:	95 b9       	out	0x05, r25	; 5
    12f4:	25 b9       	out	0x05, r18	; 5
    
    pew pew pew pew pew pew pew pew
    12f6:	01 90       	ld	r0, Z+
    12f8:	02 b8       	out	0x02, r0	; 2
    12fa:	95 b9       	out	0x05, r25	; 5
    12fc:	25 b9       	out	0x05, r18	; 5
    12fe:	01 90       	ld	r0, Z+
    1300:	02 b8       	out	0x02, r0	; 2
    1302:	95 b9       	out	0x05, r25	; 5
    1304:	25 b9       	out	0x05, r18	; 5
    1306:	01 90       	ld	r0, Z+
    1308:	02 b8       	out	0x02, r0	; 2
    130a:	95 b9       	out	0x05, r25	; 5
    130c:	25 b9       	out	0x05, r18	; 5
    130e:	01 90       	ld	r0, Z+
    1310:	02 b8       	out	0x02, r0	; 2
    1312:	95 b9       	out	0x05, r25	; 5
    1314:	25 b9       	out	0x05, r18	; 5
    1316:	01 90       	ld	r0, Z+
    1318:	02 b8       	out	0x02, r0	; 2
    131a:	95 b9       	out	0x05, r25	; 5
    131c:	25 b9       	out	0x05, r18	; 5
    131e:	01 90       	ld	r0, Z+
    1320:	02 b8       	out	0x02, r0	; 2
    1322:	95 b9       	out	0x05, r25	; 5
    1324:	25 b9       	out	0x05, r18	; 5
    1326:	01 90       	ld	r0, Z+
    1328:	02 b8       	out	0x02, r0	; 2
    132a:	95 b9       	out	0x05, r25	; 5
    132c:	25 b9       	out	0x05, r18	; 5
    132e:	01 90       	ld	r0, Z+
    1330:	02 b8       	out	0x02, r0	; 2
    1332:	95 b9       	out	0x05, r25	; 5
    1334:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1336:	01 90       	ld	r0, Z+
    1338:	02 b8       	out	0x02, r0	; 2
    133a:	95 b9       	out	0x05, r25	; 5
    133c:	25 b9       	out	0x05, r18	; 5
    133e:	01 90       	ld	r0, Z+
    1340:	02 b8       	out	0x02, r0	; 2
    1342:	95 b9       	out	0x05, r25	; 5
    1344:	25 b9       	out	0x05, r18	; 5
    1346:	01 90       	ld	r0, Z+
    1348:	02 b8       	out	0x02, r0	; 2
    134a:	95 b9       	out	0x05, r25	; 5
    134c:	25 b9       	out	0x05, r18	; 5
    134e:	01 90       	ld	r0, Z+
    1350:	02 b8       	out	0x02, r0	; 2
    1352:	95 b9       	out	0x05, r25	; 5
    1354:	25 b9       	out	0x05, r18	; 5
    1356:	01 90       	ld	r0, Z+
    1358:	02 b8       	out	0x02, r0	; 2
    135a:	95 b9       	out	0x05, r25	; 5
    135c:	25 b9       	out	0x05, r18	; 5
    135e:	01 90       	ld	r0, Z+
    1360:	02 b8       	out	0x02, r0	; 2
    1362:	95 b9       	out	0x05, r25	; 5
    1364:	25 b9       	out	0x05, r18	; 5
    1366:	01 90       	ld	r0, Z+
    1368:	02 b8       	out	0x02, r0	; 2
    136a:	95 b9       	out	0x05, r25	; 5
    136c:	25 b9       	out	0x05, r18	; 5
    136e:	01 90       	ld	r0, Z+
    1370:	02 b8       	out	0x02, r0	; 2
    1372:	95 b9       	out	0x05, r25	; 5
    1374:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1376:	01 90       	ld	r0, Z+
    1378:	02 b8       	out	0x02, r0	; 2
    137a:	95 b9       	out	0x05, r25	; 5
    137c:	25 b9       	out	0x05, r18	; 5
    137e:	01 90       	ld	r0, Z+
    1380:	02 b8       	out	0x02, r0	; 2
    1382:	95 b9       	out	0x05, r25	; 5
    1384:	25 b9       	out	0x05, r18	; 5
    1386:	01 90       	ld	r0, Z+
    1388:	02 b8       	out	0x02, r0	; 2
    138a:	95 b9       	out	0x05, r25	; 5
    138c:	25 b9       	out	0x05, r18	; 5
    138e:	01 90       	ld	r0, Z+
    1390:	02 b8       	out	0x02, r0	; 2
    1392:	95 b9       	out	0x05, r25	; 5
    1394:	25 b9       	out	0x05, r18	; 5
    1396:	01 90       	ld	r0, Z+
    1398:	02 b8       	out	0x02, r0	; 2
    139a:	95 b9       	out	0x05, r25	; 5
    139c:	25 b9       	out	0x05, r18	; 5
    139e:	01 90       	ld	r0, Z+
    13a0:	02 b8       	out	0x02, r0	; 2
    13a2:	95 b9       	out	0x05, r25	; 5
    13a4:	25 b9       	out	0x05, r18	; 5
    13a6:	01 90       	ld	r0, Z+
    13a8:	02 b8       	out	0x02, r0	; 2
    13aa:	95 b9       	out	0x05, r25	; 5
    13ac:	25 b9       	out	0x05, r18	; 5
    13ae:	01 90       	ld	r0, Z+
    13b0:	02 b8       	out	0x02, r0	; 2
    13b2:	95 b9       	out	0x05, r25	; 5
    13b4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    13b6:	01 90       	ld	r0, Z+
    13b8:	02 b8       	out	0x02, r0	; 2
    13ba:	95 b9       	out	0x05, r25	; 5
    13bc:	25 b9       	out	0x05, r18	; 5
    13be:	01 90       	ld	r0, Z+
    13c0:	02 b8       	out	0x02, r0	; 2
    13c2:	95 b9       	out	0x05, r25	; 5
    13c4:	25 b9       	out	0x05, r18	; 5
    13c6:	01 90       	ld	r0, Z+
    13c8:	02 b8       	out	0x02, r0	; 2
    13ca:	95 b9       	out	0x05, r25	; 5
    13cc:	25 b9       	out	0x05, r18	; 5
    13ce:	01 90       	ld	r0, Z+
    13d0:	02 b8       	out	0x02, r0	; 2
    13d2:	95 b9       	out	0x05, r25	; 5
    13d4:	25 b9       	out	0x05, r18	; 5
    13d6:	01 90       	ld	r0, Z+
    13d8:	02 b8       	out	0x02, r0	; 2
    13da:	95 b9       	out	0x05, r25	; 5
    13dc:	25 b9       	out	0x05, r18	; 5
    13de:	01 90       	ld	r0, Z+
    13e0:	02 b8       	out	0x02, r0	; 2
    13e2:	95 b9       	out	0x05, r25	; 5
    13e4:	25 b9       	out	0x05, r18	; 5
    13e6:	01 90       	ld	r0, Z+
    13e8:	02 b8       	out	0x02, r0	; 2
    13ea:	95 b9       	out	0x05, r25	; 5
    13ec:	25 b9       	out	0x05, r18	; 5
    13ee:	01 90       	ld	r0, Z+
    13f0:	02 b8       	out	0x02, r0	; 2
    13f2:	95 b9       	out	0x05, r25	; 5
    13f4:	25 b9       	out	0x05, r18	; 5
    
    pew pew pew pew pew pew pew pew
    13f6:	01 90       	ld	r0, Z+
    13f8:	02 b8       	out	0x02, r0	; 2
    13fa:	95 b9       	out	0x05, r25	; 5
    13fc:	25 b9       	out	0x05, r18	; 5
    13fe:	01 90       	ld	r0, Z+
    1400:	02 b8       	out	0x02, r0	; 2
    1402:	95 b9       	out	0x05, r25	; 5
    1404:	25 b9       	out	0x05, r18	; 5
    1406:	01 90       	ld	r0, Z+
    1408:	02 b8       	out	0x02, r0	; 2
    140a:	95 b9       	out	0x05, r25	; 5
    140c:	25 b9       	out	0x05, r18	; 5
    140e:	01 90       	ld	r0, Z+
    1410:	02 b8       	out	0x02, r0	; 2
    1412:	95 b9       	out	0x05, r25	; 5
    1414:	25 b9       	out	0x05, r18	; 5
    1416:	01 90       	ld	r0, Z+
    1418:	02 b8       	out	0x02, r0	; 2
    141a:	95 b9       	out	0x05, r25	; 5
    141c:	25 b9       	out	0x05, r18	; 5
    141e:	01 90       	ld	r0, Z+
    1420:	02 b8       	out	0x02, r0	; 2
    1422:	95 b9       	out	0x05, r25	; 5
    1424:	25 b9       	out	0x05, r18	; 5
    1426:	01 90       	ld	r0, Z+
    1428:	02 b8       	out	0x02, r0	; 2
    142a:	95 b9       	out	0x05, r25	; 5
    142c:	25 b9       	out	0x05, r18	; 5
    142e:	01 90       	ld	r0, Z+
    1430:	02 b8       	out	0x02, r0	; 2
    1432:	95 b9       	out	0x05, r25	; 5
    1434:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1436:	01 90       	ld	r0, Z+
    1438:	02 b8       	out	0x02, r0	; 2
    143a:	95 b9       	out	0x05, r25	; 5
    143c:	25 b9       	out	0x05, r18	; 5
    143e:	01 90       	ld	r0, Z+
    1440:	02 b8       	out	0x02, r0	; 2
    1442:	95 b9       	out	0x05, r25	; 5
    1444:	25 b9       	out	0x05, r18	; 5
    1446:	01 90       	ld	r0, Z+
    1448:	02 b8       	out	0x02, r0	; 2
    144a:	95 b9       	out	0x05, r25	; 5
    144c:	25 b9       	out	0x05, r18	; 5
    144e:	01 90       	ld	r0, Z+
    1450:	02 b8       	out	0x02, r0	; 2
    1452:	95 b9       	out	0x05, r25	; 5
    1454:	25 b9       	out	0x05, r18	; 5
    1456:	01 90       	ld	r0, Z+
    1458:	02 b8       	out	0x02, r0	; 2
    145a:	95 b9       	out	0x05, r25	; 5
    145c:	25 b9       	out	0x05, r18	; 5
    145e:	01 90       	ld	r0, Z+
    1460:	02 b8       	out	0x02, r0	; 2
    1462:	95 b9       	out	0x05, r25	; 5
    1464:	25 b9       	out	0x05, r18	; 5
    1466:	01 90       	ld	r0, Z+
    1468:	02 b8       	out	0x02, r0	; 2
    146a:	95 b9       	out	0x05, r25	; 5
    146c:	25 b9       	out	0x05, r18	; 5
    146e:	01 90       	ld	r0, Z+
    1470:	02 b8       	out	0x02, r0	; 2
    1472:	95 b9       	out	0x05, r25	; 5
    1474:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1476:	01 90       	ld	r0, Z+
    1478:	02 b8       	out	0x02, r0	; 2
    147a:	95 b9       	out	0x05, r25	; 5
    147c:	25 b9       	out	0x05, r18	; 5
    147e:	01 90       	ld	r0, Z+
    1480:	02 b8       	out	0x02, r0	; 2
    1482:	95 b9       	out	0x05, r25	; 5
    1484:	25 b9       	out	0x05, r18	; 5
    1486:	01 90       	ld	r0, Z+
    1488:	02 b8       	out	0x02, r0	; 2
    148a:	95 b9       	out	0x05, r25	; 5
    148c:	25 b9       	out	0x05, r18	; 5
    148e:	01 90       	ld	r0, Z+
    1490:	02 b8       	out	0x02, r0	; 2
    1492:	95 b9       	out	0x05, r25	; 5
    1494:	25 b9       	out	0x05, r18	; 5
    1496:	01 90       	ld	r0, Z+
    1498:	02 b8       	out	0x02, r0	; 2
    149a:	95 b9       	out	0x05, r25	; 5
    149c:	25 b9       	out	0x05, r18	; 5
    149e:	01 90       	ld	r0, Z+
    14a0:	02 b8       	out	0x02, r0	; 2
    14a2:	95 b9       	out	0x05, r25	; 5
    14a4:	25 b9       	out	0x05, r18	; 5
    14a6:	01 90       	ld	r0, Z+
    14a8:	02 b8       	out	0x02, r0	; 2
    14aa:	95 b9       	out	0x05, r25	; 5
    14ac:	25 b9       	out	0x05, r18	; 5
    14ae:	01 90       	ld	r0, Z+
    14b0:	02 b8       	out	0x02, r0	; 2
    14b2:	95 b9       	out	0x05, r25	; 5
    14b4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    14b6:	01 90       	ld	r0, Z+
    14b8:	02 b8       	out	0x02, r0	; 2
    14ba:	95 b9       	out	0x05, r25	; 5
    14bc:	25 b9       	out	0x05, r18	; 5
    14be:	01 90       	ld	r0, Z+
    14c0:	02 b8       	out	0x02, r0	; 2
    14c2:	95 b9       	out	0x05, r25	; 5
    14c4:	25 b9       	out	0x05, r18	; 5
    14c6:	01 90       	ld	r0, Z+
    14c8:	02 b8       	out	0x02, r0	; 2
    14ca:	95 b9       	out	0x05, r25	; 5
    14cc:	25 b9       	out	0x05, r18	; 5
    14ce:	01 90       	ld	r0, Z+
    14d0:	02 b8       	out	0x02, r0	; 2
    14d2:	95 b9       	out	0x05, r25	; 5
    14d4:	25 b9       	out	0x05, r18	; 5
    14d6:	01 90       	ld	r0, Z+
    14d8:	02 b8       	out	0x02, r0	; 2
    14da:	95 b9       	out	0x05, r25	; 5
    14dc:	25 b9       	out	0x05, r18	; 5
    14de:	01 90       	ld	r0, Z+
    14e0:	02 b8       	out	0x02, r0	; 2
    14e2:	95 b9       	out	0x05, r25	; 5
    14e4:	25 b9       	out	0x05, r18	; 5
    14e6:	01 90       	ld	r0, Z+
    14e8:	02 b8       	out	0x02, r0	; 2
    14ea:	95 b9       	out	0x05, r25	; 5
    14ec:	25 b9       	out	0x05, r18	; 5
    14ee:	01 90       	ld	r0, Z+
    14f0:	02 b8       	out	0x02, r0	; 2
    14f2:	95 b9       	out	0x05, r25	; 5
    14f4:	25 b9       	out	0x05, r18	; 5
    
    pew pew pew pew pew pew pew pew
    14f6:	01 90       	ld	r0, Z+
    14f8:	02 b8       	out	0x02, r0	; 2
    14fa:	95 b9       	out	0x05, r25	; 5
    14fc:	25 b9       	out	0x05, r18	; 5
    14fe:	01 90       	ld	r0, Z+
    1500:	02 b8       	out	0x02, r0	; 2
    1502:	95 b9       	out	0x05, r25	; 5
    1504:	25 b9       	out	0x05, r18	; 5
    1506:	01 90       	ld	r0, Z+
    1508:	02 b8       	out	0x02, r0	; 2
    150a:	95 b9       	out	0x05, r25	; 5
    150c:	25 b9       	out	0x05, r18	; 5
    150e:	01 90       	ld	r0, Z+
    1510:	02 b8       	out	0x02, r0	; 2
    1512:	95 b9       	out	0x05, r25	; 5
    1514:	25 b9       	out	0x05, r18	; 5
    1516:	01 90       	ld	r0, Z+
    1518:	02 b8       	out	0x02, r0	; 2
    151a:	95 b9       	out	0x05, r25	; 5
    151c:	25 b9       	out	0x05, r18	; 5
    151e:	01 90       	ld	r0, Z+
    1520:	02 b8       	out	0x02, r0	; 2
    1522:	95 b9       	out	0x05, r25	; 5
    1524:	25 b9       	out	0x05, r18	; 5
    1526:	01 90       	ld	r0, Z+
    1528:	02 b8       	out	0x02, r0	; 2
    152a:	95 b9       	out	0x05, r25	; 5
    152c:	25 b9       	out	0x05, r18	; 5
    152e:	01 90       	ld	r0, Z+
    1530:	02 b8       	out	0x02, r0	; 2
    1532:	95 b9       	out	0x05, r25	; 5
    1534:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1536:	01 90       	ld	r0, Z+
    1538:	02 b8       	out	0x02, r0	; 2
    153a:	95 b9       	out	0x05, r25	; 5
    153c:	25 b9       	out	0x05, r18	; 5
    153e:	01 90       	ld	r0, Z+
    1540:	02 b8       	out	0x02, r0	; 2
    1542:	95 b9       	out	0x05, r25	; 5
    1544:	25 b9       	out	0x05, r18	; 5
    1546:	01 90       	ld	r0, Z+
    1548:	02 b8       	out	0x02, r0	; 2
    154a:	95 b9       	out	0x05, r25	; 5
    154c:	25 b9       	out	0x05, r18	; 5
    154e:	01 90       	ld	r0, Z+
    1550:	02 b8       	out	0x02, r0	; 2
    1552:	95 b9       	out	0x05, r25	; 5
    1554:	25 b9       	out	0x05, r18	; 5
    1556:	01 90       	ld	r0, Z+
    1558:	02 b8       	out	0x02, r0	; 2
    155a:	95 b9       	out	0x05, r25	; 5
    155c:	25 b9       	out	0x05, r18	; 5
    155e:	01 90       	ld	r0, Z+
    1560:	02 b8       	out	0x02, r0	; 2
    1562:	95 b9       	out	0x05, r25	; 5
    1564:	25 b9       	out	0x05, r18	; 5
    1566:	01 90       	ld	r0, Z+
    1568:	02 b8       	out	0x02, r0	; 2
    156a:	95 b9       	out	0x05, r25	; 5
    156c:	25 b9       	out	0x05, r18	; 5
    156e:	01 90       	ld	r0, Z+
    1570:	02 b8       	out	0x02, r0	; 2
    1572:	95 b9       	out	0x05, r25	; 5
    1574:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1576:	01 90       	ld	r0, Z+
    1578:	02 b8       	out	0x02, r0	; 2
    157a:	95 b9       	out	0x05, r25	; 5
    157c:	25 b9       	out	0x05, r18	; 5
    157e:	01 90       	ld	r0, Z+
    1580:	02 b8       	out	0x02, r0	; 2
    1582:	95 b9       	out	0x05, r25	; 5
    1584:	25 b9       	out	0x05, r18	; 5
    1586:	01 90       	ld	r0, Z+
    1588:	02 b8       	out	0x02, r0	; 2
    158a:	95 b9       	out	0x05, r25	; 5
    158c:	25 b9       	out	0x05, r18	; 5
    158e:	01 90       	ld	r0, Z+
    1590:	02 b8       	out	0x02, r0	; 2
    1592:	95 b9       	out	0x05, r25	; 5
    1594:	25 b9       	out	0x05, r18	; 5
    1596:	01 90       	ld	r0, Z+
    1598:	02 b8       	out	0x02, r0	; 2
    159a:	95 b9       	out	0x05, r25	; 5
    159c:	25 b9       	out	0x05, r18	; 5
    159e:	01 90       	ld	r0, Z+
    15a0:	02 b8       	out	0x02, r0	; 2
    15a2:	95 b9       	out	0x05, r25	; 5
    15a4:	25 b9       	out	0x05, r18	; 5
    15a6:	01 90       	ld	r0, Z+
    15a8:	02 b8       	out	0x02, r0	; 2
    15aa:	95 b9       	out	0x05, r25	; 5
    15ac:	25 b9       	out	0x05, r18	; 5
    15ae:	01 90       	ld	r0, Z+
    15b0:	02 b8       	out	0x02, r0	; 2
    15b2:	95 b9       	out	0x05, r25	; 5
    15b4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    15b6:	01 90       	ld	r0, Z+
    15b8:	02 b8       	out	0x02, r0	; 2
    15ba:	95 b9       	out	0x05, r25	; 5
    15bc:	25 b9       	out	0x05, r18	; 5
    15be:	01 90       	ld	r0, Z+
    15c0:	02 b8       	out	0x02, r0	; 2
    15c2:	95 b9       	out	0x05, r25	; 5
    15c4:	25 b9       	out	0x05, r18	; 5
    15c6:	01 90       	ld	r0, Z+
    15c8:	02 b8       	out	0x02, r0	; 2
    15ca:	95 b9       	out	0x05, r25	; 5
    15cc:	25 b9       	out	0x05, r18	; 5
    15ce:	01 90       	ld	r0, Z+
    15d0:	02 b8       	out	0x02, r0	; 2
    15d2:	95 b9       	out	0x05, r25	; 5
    15d4:	25 b9       	out	0x05, r18	; 5
    15d6:	01 90       	ld	r0, Z+
    15d8:	02 b8       	out	0x02, r0	; 2
    15da:	95 b9       	out	0x05, r25	; 5
    15dc:	25 b9       	out	0x05, r18	; 5
    15de:	01 90       	ld	r0, Z+
    15e0:	02 b8       	out	0x02, r0	; 2
    15e2:	95 b9       	out	0x05, r25	; 5
    15e4:	25 b9       	out	0x05, r18	; 5
    15e6:	01 90       	ld	r0, Z+
    15e8:	02 b8       	out	0x02, r0	; 2
    15ea:	95 b9       	out	0x05, r25	; 5
    15ec:	25 b9       	out	0x05, r18	; 5
    15ee:	01 90       	ld	r0, Z+
    15f0:	02 b8       	out	0x02, r0	; 2
    15f2:	95 b9       	out	0x05, r25	; 5
    15f4:	25 b9       	out	0x05, r18	; 5

      if (WIDTH == 64) {
    15f6:	14 96       	adiw	r26, 0x04	; 4
    15f8:	4d 91       	ld	r20, X+
    15fa:	5c 91       	ld	r21, X
    15fc:	15 97       	sbiw	r26, 0x05	; 5
    15fe:	40 34       	cpi	r20, 0x40	; 64
    1600:	51 05       	cpc	r21, r1
    1602:	09 f0       	breq	.+2      	; 0x1606 <_ZN14RGBmatrixPanel13updateDisplayEv+0x5f0>
    1604:	80 c0       	rjmp	.+256    	; 0x1706 <_ZN14RGBmatrixPanel13updateDisplayEv+0x6f0>
    pew pew pew pew pew pew pew pew
    1606:	01 90       	ld	r0, Z+
    1608:	02 b8       	out	0x02, r0	; 2
    160a:	95 b9       	out	0x05, r25	; 5
    160c:	25 b9       	out	0x05, r18	; 5
    160e:	01 90       	ld	r0, Z+
    1610:	02 b8       	out	0x02, r0	; 2
    1612:	95 b9       	out	0x05, r25	; 5
    1614:	25 b9       	out	0x05, r18	; 5
    1616:	01 90       	ld	r0, Z+
    1618:	02 b8       	out	0x02, r0	; 2
    161a:	95 b9       	out	0x05, r25	; 5
    161c:	25 b9       	out	0x05, r18	; 5
    161e:	01 90       	ld	r0, Z+
    1620:	02 b8       	out	0x02, r0	; 2
    1622:	95 b9       	out	0x05, r25	; 5
    1624:	25 b9       	out	0x05, r18	; 5
    1626:	01 90       	ld	r0, Z+
    1628:	02 b8       	out	0x02, r0	; 2
    162a:	95 b9       	out	0x05, r25	; 5
    162c:	25 b9       	out	0x05, r18	; 5
    162e:	01 90       	ld	r0, Z+
    1630:	02 b8       	out	0x02, r0	; 2
    1632:	95 b9       	out	0x05, r25	; 5
    1634:	25 b9       	out	0x05, r18	; 5
    1636:	01 90       	ld	r0, Z+
    1638:	02 b8       	out	0x02, r0	; 2
    163a:	95 b9       	out	0x05, r25	; 5
    163c:	25 b9       	out	0x05, r18	; 5
    163e:	01 90       	ld	r0, Z+
    1640:	02 b8       	out	0x02, r0	; 2
    1642:	95 b9       	out	0x05, r25	; 5
    1644:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1646:	01 90       	ld	r0, Z+
    1648:	02 b8       	out	0x02, r0	; 2
    164a:	95 b9       	out	0x05, r25	; 5
    164c:	25 b9       	out	0x05, r18	; 5
    164e:	01 90       	ld	r0, Z+
    1650:	02 b8       	out	0x02, r0	; 2
    1652:	95 b9       	out	0x05, r25	; 5
    1654:	25 b9       	out	0x05, r18	; 5
    1656:	01 90       	ld	r0, Z+
    1658:	02 b8       	out	0x02, r0	; 2
    165a:	95 b9       	out	0x05, r25	; 5
    165c:	25 b9       	out	0x05, r18	; 5
    165e:	01 90       	ld	r0, Z+
    1660:	02 b8       	out	0x02, r0	; 2
    1662:	95 b9       	out	0x05, r25	; 5
    1664:	25 b9       	out	0x05, r18	; 5
    1666:	01 90       	ld	r0, Z+
    1668:	02 b8       	out	0x02, r0	; 2
    166a:	95 b9       	out	0x05, r25	; 5
    166c:	25 b9       	out	0x05, r18	; 5
    166e:	01 90       	ld	r0, Z+
    1670:	02 b8       	out	0x02, r0	; 2
    1672:	95 b9       	out	0x05, r25	; 5
    1674:	25 b9       	out	0x05, r18	; 5
    1676:	01 90       	ld	r0, Z+
    1678:	02 b8       	out	0x02, r0	; 2
    167a:	95 b9       	out	0x05, r25	; 5
    167c:	25 b9       	out	0x05, r18	; 5
    167e:	01 90       	ld	r0, Z+
    1680:	02 b8       	out	0x02, r0	; 2
    1682:	95 b9       	out	0x05, r25	; 5
    1684:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    1686:	01 90       	ld	r0, Z+
    1688:	02 b8       	out	0x02, r0	; 2
    168a:	95 b9       	out	0x05, r25	; 5
    168c:	25 b9       	out	0x05, r18	; 5
    168e:	01 90       	ld	r0, Z+
    1690:	02 b8       	out	0x02, r0	; 2
    1692:	95 b9       	out	0x05, r25	; 5
    1694:	25 b9       	out	0x05, r18	; 5
    1696:	01 90       	ld	r0, Z+
    1698:	02 b8       	out	0x02, r0	; 2
    169a:	95 b9       	out	0x05, r25	; 5
    169c:	25 b9       	out	0x05, r18	; 5
    169e:	01 90       	ld	r0, Z+
    16a0:	02 b8       	out	0x02, r0	; 2
    16a2:	95 b9       	out	0x05, r25	; 5
    16a4:	25 b9       	out	0x05, r18	; 5
    16a6:	01 90       	ld	r0, Z+
    16a8:	02 b8       	out	0x02, r0	; 2
    16aa:	95 b9       	out	0x05, r25	; 5
    16ac:	25 b9       	out	0x05, r18	; 5
    16ae:	01 90       	ld	r0, Z+
    16b0:	02 b8       	out	0x02, r0	; 2
    16b2:	95 b9       	out	0x05, r25	; 5
    16b4:	25 b9       	out	0x05, r18	; 5
    16b6:	01 90       	ld	r0, Z+
    16b8:	02 b8       	out	0x02, r0	; 2
    16ba:	95 b9       	out	0x05, r25	; 5
    16bc:	25 b9       	out	0x05, r18	; 5
    16be:	01 90       	ld	r0, Z+
    16c0:	02 b8       	out	0x02, r0	; 2
    16c2:	95 b9       	out	0x05, r25	; 5
    16c4:	25 b9       	out	0x05, r18	; 5
    pew pew pew pew pew pew pew pew
    16c6:	01 90       	ld	r0, Z+
    16c8:	02 b8       	out	0x02, r0	; 2
    16ca:	95 b9       	out	0x05, r25	; 5
    16cc:	25 b9       	out	0x05, r18	; 5
    16ce:	01 90       	ld	r0, Z+
    16d0:	02 b8       	out	0x02, r0	; 2
    16d2:	95 b9       	out	0x05, r25	; 5
    16d4:	25 b9       	out	0x05, r18	; 5
    16d6:	01 90       	ld	r0, Z+
    16d8:	02 b8       	out	0x02, r0	; 2
    16da:	95 b9       	out	0x05, r25	; 5
    16dc:	25 b9       	out	0x05, r18	; 5
    16de:	01 90       	ld	r0, Z+
    16e0:	02 b8       	out	0x02, r0	; 2
    16e2:	95 b9       	out	0x05, r25	; 5
    16e4:	25 b9       	out	0x05, r18	; 5
    16e6:	01 90       	ld	r0, Z+
    16e8:	02 b8       	out	0x02, r0	; 2
    16ea:	95 b9       	out	0x05, r25	; 5
    16ec:	25 b9       	out	0x05, r18	; 5
    16ee:	01 90       	ld	r0, Z+
    16f0:	02 b8       	out	0x02, r0	; 2
    16f2:	95 b9       	out	0x05, r25	; 5
    16f4:	25 b9       	out	0x05, r18	; 5
    16f6:	01 90       	ld	r0, Z+
    16f8:	02 b8       	out	0x02, r0	; 2
    16fa:	95 b9       	out	0x05, r25	; 5
    16fc:	25 b9       	out	0x05, r18	; 5
    16fe:	01 90       	ld	r0, Z+
    1700:	02 b8       	out	0x02, r0	; 2
    1702:	95 b9       	out	0x05, r25	; 5
    1704:	25 b9       	out	0x05, r18	; 5
      }

    buffptr = ptr; //+= 32;
    1706:	de 96       	adiw	r26, 0x3e	; 62
    1708:	fc 93       	st	X, r31
    170a:	ee 93       	st	-X, r30
    170c:	dd 97       	sbiw	r26, 0x3d	; 61
    170e:	31 c0       	rjmp	.+98     	; 0x1772 <_ZN14RGBmatrixPanel13updateDisplayEv+0x75c>
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    1710:	63 2f       	mov	r22, r19
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	14 96       	adiw	r26, 0x04	; 4
    1716:	4d 91       	ld	r20, X+
    1718:	5c 91       	ld	r21, X
    171a:	15 97       	sbiw	r26, 0x05	; 5
    171c:	64 17       	cp	r22, r20
    171e:	75 07       	cpc	r23, r21
    1720:	44 f5       	brge	.+80     	; 0x1772 <_ZN14RGBmatrixPanel13updateDisplayEv+0x75c>
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+WIDTH] << 4) & 0x30) |
    1722:	8b 01       	movw	r16, r22
    1724:	04 0f       	add	r16, r20
    1726:	15 1f       	adc	r17, r21
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1728:	4e 0f       	add	r20, r30
    172a:	5f 1f       	adc	r21, r31
    172c:	ea 01       	movw	r28, r20
    172e:	c0 0f       	add	r28, r16
    1730:	d1 1f       	adc	r29, r17
    1732:	48 81       	ld	r20, Y
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	48 9f       	mul	r20, r24
    1738:	a0 01       	movw	r20, r0
    173a:	11 24       	eor	r1, r1
    173c:	c4 2f       	mov	r28, r20
    173e:	cc 70       	andi	r28, 0x0C	; 12
    1740:	fc 2e       	mov	r15, r28
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+WIDTH] << 4) & 0x30) |
    1742:	0e 0f       	add	r16, r30
    1744:	1f 1f       	adc	r17, r31
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    1746:	e8 01       	movw	r28, r16
    1748:	88 81       	ld	r24, Y
    174a:	d0 e1       	ldi	r29, 0x10	; 16
    174c:	8d 9f       	mul	r24, r29
    174e:	a0 01       	movw	r20, r0
    1750:	11 24       	eor	r1, r1
    1752:	40 73       	andi	r20, 0x30	; 48
    1754:	4f 29       	or	r20, r15
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
    1756:	ef 01       	movw	r28, r30
    1758:	c6 0f       	add	r28, r22
    175a:	d7 1f       	adc	r29, r23
        ((ptr[i+WIDTH] << 4) & 0x30) |
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
    175c:	68 81       	ld	r22, Y
    175e:	80 e4       	ldi	r24, 0x40	; 64
    1760:	68 9f       	mul	r22, r24
    1762:	b0 01       	movw	r22, r0
    1764:	11 24       	eor	r1, r1
    1766:	46 2b       	or	r20, r22
    1768:	42 b9       	out	0x02, r20	; 2
      SCLKPORT = tick; // Clock lo
    176a:	95 b9       	out	0x05, r25	; 5
      SCLKPORT = tock; // Clock hi
    176c:	25 b9       	out	0x05, r18	; 5
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<WIDTH; i++) {
    176e:	3f 5f       	subi	r19, 0xFF	; 255
    1770:	cf cf       	rjmp	.-98     	; 0x1710 <_ZN14RGBmatrixPanel13updateDisplayEv+0x6fa>
        ((ptr[i+WIDTH*2] << 2) & 0x0C);
      SCLKPORT = tick; // Clock lo
      SCLKPORT = tock; // Clock hi
    } 
  }
}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	08 95       	ret

0000177e <__vector_20>:
  Serial.println(F("\n};"));
}

// -------------------- Interrupt handler stuff --------------------

ISR(TIMER1_OVF_vect, ISR_BLOCK) { // ISR_BLOCK important -- see notes later
    177e:	1f 92       	push	r1
    1780:	0f 92       	push	r0
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	0f 92       	push	r0
    1786:	11 24       	eor	r1, r1
    1788:	0b b6       	in	r0, 0x3b	; 59
    178a:	0f 92       	push	r0
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
  activePanel->updateDisplay();   // Call refresh func for active display
    17a4:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_ZL11activePanel>
    17a8:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <_ZL11activePanel+0x1>
    17ac:	34 dc       	rcall	.-1944   	; 0x1016 <_ZN14RGBmatrixPanel13updateDisplayEv>
  TIFR1 |= TOV1;                  // Clear Timer1 interrupt flag
    17ae:	86 b3       	in	r24, 0x16	; 22
    17b0:	86 bb       	out	0x16, r24	; 22
}
    17b2:	ff 91       	pop	r31
    17b4:	ef 91       	pop	r30
    17b6:	bf 91       	pop	r27
    17b8:	af 91       	pop	r26
    17ba:	9f 91       	pop	r25
    17bc:	8f 91       	pop	r24
    17be:	7f 91       	pop	r23
    17c0:	6f 91       	pop	r22
    17c2:	5f 91       	pop	r21
    17c4:	4f 91       	pop	r20
    17c6:	3f 91       	pop	r19
    17c8:	2f 91       	pop	r18
    17ca:	0f 90       	pop	r0
    17cc:	0b be       	out	0x3b, r0	; 59
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	0f 90       	pop	r0
    17d4:	1f 90       	pop	r1
    17d6:	18 95       	reti

000017d8 <_ZN14RGBmatrixPanel10fillScreenEj>:
    }
  }
}

void RGBmatrixPanel::fillScreen(uint16_t c) {
  if((c == 0x0000) || (c == 0xffff)) {
    17d8:	9b 01       	movw	r18, r22
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	31 09       	sbc	r19, r1
    17de:	2e 3f       	cpi	r18, 0xFE	; 254
    17e0:	3f 4f       	sbci	r19, 0xFF	; 255
    17e2:	f0 f0       	brcs	.+60     	; 0x1820 <_ZN14RGBmatrixPanel10fillScreenEj+0x48>
    // For black or white, all bits in frame buffer will be identically
    // set or unset (regardless of weird bit packing), so it's OK to just
    // quickly memset the whole thing:
    memset(matrixbuff[backindex], c, WIDTH * nRows * 3);
    17e4:	dc 01       	movw	r26, r24
    17e6:	5f 96       	adiw	r26, 0x1f	; 31
    17e8:	2c 91       	ld	r18, X
    17ea:	5f 97       	sbiw	r26, 0x1f	; 31
    17ec:	5e 96       	adiw	r26, 0x1e	; 30
    17ee:	3c 91       	ld	r19, X
    17f0:	5e 97       	sbiw	r26, 0x1e	; 30
    17f2:	14 96       	adiw	r26, 0x04	; 4
    17f4:	ed 91       	ld	r30, X+
    17f6:	fc 91       	ld	r31, X
    17f8:	15 97       	sbiw	r26, 0x05	; 5
    17fa:	3e 9f       	mul	r19, r30
    17fc:	a0 01       	movw	r20, r0
    17fe:	3f 9f       	mul	r19, r31
    1800:	50 0d       	add	r21, r0
    1802:	11 24       	eor	r1, r1
    1804:	fa 01       	movw	r30, r20
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	4e 0f       	add	r20, r30
    180c:	5f 1f       	adc	r21, r31
    180e:	fc 01       	movw	r30, r24
    1810:	e2 0f       	add	r30, r18
    1812:	f1 1d       	adc	r31, r1
    1814:	e2 0f       	add	r30, r18
    1816:	f1 1d       	adc	r31, r1
    1818:	82 8d       	ldd	r24, Z+26	; 0x1a
    181a:	93 8d       	ldd	r25, Z+27	; 0x1b
    181c:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <memset>
    1820:	98 c1       	rjmp	.+816    	; 0x1b52 <_ZN12Adafruit_GFX10fillScreenEj>

00001822 <_ZN12Adafruit_GFX9writeLineEiiiij>:
            if(byte & 0x80) {
                writePixel(x+i, y, bitmap[j * w + i]);
            }
        }
    }
    endWrite();
    1822:	2f 92       	push	r2
    1824:	3f 92       	push	r3
    1826:	4f 92       	push	r4
    1828:	5f 92       	push	r5
    182a:	6f 92       	push	r6
    182c:	7f 92       	push	r7
    182e:	8f 92       	push	r8
    1830:	9f 92       	push	r9
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	00 d0       	rcall	.+0      	; 0x1848 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    1848:	00 d0       	rcall	.+0      	; 0x184a <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	2c 01       	movw	r4, r24
    1850:	7e 83       	std	Y+6, r23	; 0x06
    1852:	6d 83       	std	Y+5, r22	; 0x05
    1854:	6a 01       	movw	r12, r20
    1856:	59 01       	movw	r10, r18
    1858:	c8 01       	movw	r24, r16
    185a:	fc 82       	std	Y+4, r15	; 0x04
    185c:	eb 82       	std	Y+3, r14	; 0x03
    185e:	48 01       	movw	r8, r16
    1860:	84 1a       	sub	r8, r20
    1862:	95 0a       	sbc	r9, r21
    1864:	97 fe       	sbrs	r9, 7
    1866:	03 c0       	rjmp	.+6      	; 0x186e <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    1868:	91 94       	neg	r9
    186a:	81 94       	neg	r8
    186c:	91 08       	sbc	r9, r1
    186e:	35 01       	movw	r6, r10
    1870:	2d 81       	ldd	r18, Y+5	; 0x05
    1872:	3e 81       	ldd	r19, Y+6	; 0x06
    1874:	62 1a       	sub	r6, r18
    1876:	73 0a       	sbc	r7, r19
    1878:	77 fe       	sbrs	r7, 7
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    187c:	71 94       	neg	r7
    187e:	61 94       	neg	r6
    1880:	71 08       	sbc	r7, r1
    1882:	68 14       	cp	r6, r8
    1884:	79 04       	cpc	r7, r9
    1886:	5c f4       	brge	.+22     	; 0x189e <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    1888:	3a 2d       	mov	r19, r10
    188a:	2b 2d       	mov	r18, r11
    188c:	5c 01       	movw	r10, r24
    188e:	83 2f       	mov	r24, r19
    1890:	92 2f       	mov	r25, r18
    1892:	3d 81       	ldd	r19, Y+5	; 0x05
    1894:	2e 81       	ldd	r18, Y+6	; 0x06
    1896:	de 82       	std	Y+6, r13	; 0x06
    1898:	cd 82       	std	Y+5, r12	; 0x05
    189a:	c3 2e       	mov	r12, r19
    189c:	d2 2e       	mov	r13, r18
    189e:	ad 81       	ldd	r26, Y+5	; 0x05
    18a0:	be 81       	ldd	r27, Y+6	; 0x06
    18a2:	aa 16       	cp	r10, r26
    18a4:	bb 06       	cpc	r11, r27
    18a6:	5c f4       	brge	.+22     	; 0x18be <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    18a8:	3c 2d       	mov	r19, r12
    18aa:	2d 2d       	mov	r18, r13
    18ac:	6c 01       	movw	r12, r24
    18ae:	83 2f       	mov	r24, r19
    18b0:	92 2f       	mov	r25, r18
    18b2:	3d 81       	ldd	r19, Y+5	; 0x05
    18b4:	2e 81       	ldd	r18, Y+6	; 0x06
    18b6:	be 82       	std	Y+6, r11	; 0x06
    18b8:	ad 82       	std	Y+5, r10	; 0x05
    18ba:	a3 2e       	mov	r10, r19
    18bc:	b2 2e       	mov	r11, r18
    18be:	85 01       	movw	r16, r10
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3e 81       	ldd	r19, Y+6	; 0x06
    18c4:	02 1b       	sub	r16, r18
    18c6:	13 0b       	sbc	r17, r19
    18c8:	1c 01       	movw	r2, r24
    18ca:	2c 18       	sub	r2, r12
    18cc:	3d 08       	sbc	r3, r13
    18ce:	37 fe       	sbrs	r3, 7
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    18d2:	31 94       	neg	r3
    18d4:	21 94       	neg	r2
    18d6:	31 08       	sbc	r3, r1
    18d8:	78 01       	movw	r14, r16
    18da:	17 ff       	sbrs	r17, 7
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	e3 1a       	sub	r14, r19
    18e2:	f3 0a       	sbc	r15, r19
    18e4:	f5 94       	asr	r15
    18e6:	e7 94       	ror	r14
    18e8:	c8 16       	cp	r12, r24
    18ea:	d9 06       	cpc	r13, r25
    18ec:	2c f0       	brlt	.+10     	; 0x18f8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	9f ef       	ldi	r25, 0xFF	; 255
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    18f8:	a1 e0       	ldi	r26, 0x01	; 1
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ba 83       	std	Y+2, r27	; 0x02
    18fe:	a9 83       	std	Y+1, r26	; 0x01
    1900:	2d 81       	ldd	r18, Y+5	; 0x05
    1902:	3e 81       	ldd	r19, Y+6	; 0x06
    1904:	a2 16       	cp	r10, r18
    1906:	b3 06       	cpc	r11, r19
    1908:	24 f1       	brlt	.+72     	; 0x1952 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    190a:	d2 01       	movw	r26, r4
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	04 84       	ldd	r0, Z+12	; 0x0c
    1912:	f5 85       	ldd	r31, Z+13	; 0x0d
    1914:	e0 2d       	mov	r30, r0
    1916:	2b 81       	ldd	r18, Y+3	; 0x03
    1918:	3c 81       	ldd	r19, Y+4	; 0x04
    191a:	68 14       	cp	r6, r8
    191c:	79 04       	cpc	r7, r9
    191e:	24 f4       	brge	.+8      	; 0x1928 <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    1920:	4d 81       	ldd	r20, Y+5	; 0x05
    1922:	5e 81       	ldd	r21, Y+6	; 0x06
    1924:	b6 01       	movw	r22, r12
    1926:	03 c0       	rjmp	.+6      	; 0x192e <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    1928:	a6 01       	movw	r20, r12
    192a:	6d 81       	ldd	r22, Y+5	; 0x05
    192c:	7e 81       	ldd	r23, Y+6	; 0x06
    192e:	c2 01       	movw	r24, r4
    1930:	19 95       	eicall
    1932:	e2 18       	sub	r14, r2
    1934:	f3 08       	sbc	r15, r3
    1936:	f7 fe       	sbrs	r15, 7
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    193a:	29 81       	ldd	r18, Y+1	; 0x01
    193c:	3a 81       	ldd	r19, Y+2	; 0x02
    193e:	c2 0e       	add	r12, r18
    1940:	d3 1e       	adc	r13, r19
    1942:	e0 0e       	add	r14, r16
    1944:	f1 1e       	adc	r15, r17
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	d7 cf       	rjmp	.-82     	; 0x1900 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1952:	26 96       	adiw	r28, 0x06	; 6
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	9f 90       	pop	r9
    1974:	8f 90       	pop	r8
    1976:	7f 90       	pop	r7
    1978:	6f 90       	pop	r6
    197a:	5f 90       	pop	r5
    197c:	4f 90       	pop	r4
    197e:	3f 90       	pop	r3
    1980:	2f 90       	pop	r2
    1982:	08 95       	ret

00001984 <_ZN12Adafruit_GFX10writePixelEiij>:
    1984:	dc 01       	movw	r26, r24
    1986:	ed 91       	ld	r30, X+
    1988:	fc 91       	ld	r31, X
    198a:	00 84       	ldd	r0, Z+8	; 0x08
    198c:	f1 85       	ldd	r31, Z+9	; 0x09
    198e:	e0 2d       	mov	r30, r0
    1990:	19 94       	eijmp

00001992 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	dc 01       	movw	r26, r24
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	04 8c       	ldd	r0, Z+28	; 0x1c
    199e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    19a0:	e0 2d       	mov	r30, r0
    19a2:	19 95       	eicall
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	08 95       	ret

000019aa <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	dc 01       	movw	r26, r24
    19b0:	ed 91       	ld	r30, X+
    19b2:	fc 91       	ld	r31, X
    19b4:	06 8c       	ldd	r0, Z+30	; 0x1e
    19b6:	f7 8d       	ldd	r31, Z+31	; 0x1f
    19b8:	e0 2d       	mov	r30, r0
    19ba:	19 95       	eicall
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	dc 01       	movw	r26, r24
    19cc:	ed 91       	ld	r30, X+
    19ce:	fc 91       	ld	r31, X
    19d0:	00 a0       	ldd	r0, Z+32	; 0x20
    19d2:	f1 a1       	ldd	r31, Z+33	; 0x21
    19d4:	e0 2d       	mov	r30, r0
    19d6:	19 95       	eicall
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	08 95       	ret

000019e2 <_ZN12Adafruit_GFX10startWriteEv>:
    19e2:	08 95       	ret

000019e4 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ec 01       	movw	r28, r24
    19fe:	5b 01       	movw	r10, r22
    1a00:	4a 01       	movw	r8, r20
    1a02:	69 01       	movw	r12, r18
    1a04:	78 01       	movw	r14, r16
    1a06:	e8 81       	ld	r30, Y
    1a08:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0a:	02 84       	ldd	r0, Z+10	; 0x0a
    1a0c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a0e:	e0 2d       	mov	r30, r0
    1a10:	19 95       	eicall
    1a12:	c8 0c       	add	r12, r8
    1a14:	d9 1c       	adc	r13, r9
    1a16:	86 01       	movw	r16, r12
    1a18:	01 50       	subi	r16, 0x01	; 1
    1a1a:	11 09       	sbc	r17, r1
    1a1c:	e8 81       	ld	r30, Y
    1a1e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a20:	04 88       	ldd	r0, Z+20	; 0x14
    1a22:	f5 89       	ldd	r31, Z+21	; 0x15
    1a24:	e0 2d       	mov	r30, r0
    1a26:	95 01       	movw	r18, r10
    1a28:	a4 01       	movw	r20, r8
    1a2a:	b5 01       	movw	r22, r10
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	19 95       	eicall
    1a30:	e8 81       	ld	r30, Y
    1a32:	f9 81       	ldd	r31, Y+1	; 0x01
    1a34:	06 88       	ldd	r0, Z+22	; 0x16
    1a36:	f7 89       	ldd	r31, Z+23	; 0x17
    1a38:	e0 2d       	mov	r30, r0
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	bf 90       	pop	r11
    1a4e:	af 90       	pop	r10
    1a50:	9f 90       	pop	r9
    1a52:	8f 90       	pop	r8
    1a54:	19 94       	eijmp

00001a56 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    1a70:	5b 01       	movw	r10, r22
    1a72:	4a 01       	movw	r8, r20
    1a74:	69 01       	movw	r12, r18
    1a76:	e8 81       	ld	r30, Y
    1a78:	f9 81       	ldd	r31, Y+1	; 0x01
    1a7a:	02 84       	ldd	r0, Z+10	; 0x0a
    1a7c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a7e:	e0 2d       	mov	r30, r0
    1a80:	19 95       	eicall
    1a82:	95 01       	movw	r18, r10
    1a84:	2c 0d       	add	r18, r12
    1a86:	3d 1d       	adc	r19, r13
    1a88:	21 50       	subi	r18, 0x01	; 1
    1a8a:	31 09       	sbc	r19, r1
    1a8c:	e8 81       	ld	r30, Y
    1a8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a90:	04 88       	ldd	r0, Z+20	; 0x14
    1a92:	f5 89       	ldd	r31, Z+21	; 0x15
    1a94:	e0 2d       	mov	r30, r0
    1a96:	78 01       	movw	r14, r16
    1a98:	84 01       	movw	r16, r8
    1a9a:	a4 01       	movw	r20, r8
    1a9c:	b5 01       	movw	r22, r10
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	19 95       	eicall
    1aa2:	e8 81       	ld	r30, Y
    1aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa6:	06 88       	ldd	r0, Z+22	; 0x16
    1aa8:	f7 89       	ldd	r31, Z+23	; 0x17
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	ce 01       	movw	r24, r28
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	9f 90       	pop	r9
    1ac4:	8f 90       	pop	r8
    1ac6:	19 94       	eijmp

00001ac8 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    1ac8:	4f 92       	push	r4
    1aca:	5f 92       	push	r5
    1acc:	6f 92       	push	r6
    1ace:	7f 92       	push	r7
    1ad0:	8f 92       	push	r8
    1ad2:	9f 92       	push	r9
    1ad4:	af 92       	push	r10
    1ad6:	bf 92       	push	r11
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	6c 01       	movw	r12, r24
    1aea:	2b 01       	movw	r4, r22
    1aec:	5a 01       	movw	r10, r20
    1aee:	39 01       	movw	r6, r18
    1af0:	48 01       	movw	r8, r16
    1af2:	dc 01       	movw	r26, r24
    1af4:	ed 91       	ld	r30, X+
    1af6:	fc 91       	ld	r31, X
    1af8:	02 84       	ldd	r0, Z+10	; 0x0a
    1afa:	f3 85       	ldd	r31, Z+11	; 0x0b
    1afc:	e0 2d       	mov	r30, r0
    1afe:	19 95       	eicall
    1b00:	e2 01       	movw	r28, r4
    1b02:	64 0c       	add	r6, r4
    1b04:	75 1c       	adc	r7, r5
    1b06:	d6 01       	movw	r26, r12
    1b08:	ed 91       	ld	r30, X+
    1b0a:	fc 91       	ld	r31, X
    1b0c:	c6 15       	cp	r28, r6
    1b0e:	d7 05       	cpc	r29, r7
    1b10:	5c f4       	brge	.+22     	; 0x1b28 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    1b12:	00 88       	ldd	r0, Z+16	; 0x10
    1b14:	f1 89       	ldd	r31, Z+17	; 0x11
    1b16:	e0 2d       	mov	r30, r0
    1b18:	87 01       	movw	r16, r14
    1b1a:	94 01       	movw	r18, r8
    1b1c:	a5 01       	movw	r20, r10
    1b1e:	be 01       	movw	r22, r28
    1b20:	c6 01       	movw	r24, r12
    1b22:	19 95       	eicall
    1b24:	21 96       	adiw	r28, 0x01	; 1
    1b26:	ef cf       	rjmp	.-34     	; 0x1b06 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    1b28:	06 88       	ldd	r0, Z+22	; 0x16
    1b2a:	f7 89       	ldd	r31, Z+23	; 0x17
    1b2c:	e0 2d       	mov	r30, r0
    1b2e:	c6 01       	movw	r24, r12
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	df 90       	pop	r13
    1b3e:	cf 90       	pop	r12
    1b40:	bf 90       	pop	r11
    1b42:	af 90       	pop	r10
    1b44:	9f 90       	pop	r9
    1b46:	8f 90       	pop	r8
    1b48:	7f 90       	pop	r7
    1b4a:	6f 90       	pop	r6
    1b4c:	5f 90       	pop	r5
    1b4e:	4f 90       	pop	r4
    1b50:	19 94       	eijmp

00001b52 <_ZN12Adafruit_GFX10fillScreenEj>:
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	1a 96       	adiw	r26, 0x0a	; 10
    1b5e:	0d 91       	ld	r16, X+
    1b60:	1c 91       	ld	r17, X
    1b62:	1b 97       	sbiw	r26, 0x0b	; 11
    1b64:	18 96       	adiw	r26, 0x08	; 8
    1b66:	2d 91       	ld	r18, X+
    1b68:	3c 91       	ld	r19, X
    1b6a:	19 97       	sbiw	r26, 0x09	; 9
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	00 a0       	ldd	r0, Z+32	; 0x20
    1b72:	f1 a1       	ldd	r31, Z+33	; 0x21
    1b74:	e0 2d       	mov	r30, r0
    1b76:	7b 01       	movw	r14, r22
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	19 95       	eicall
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	08 95       	ret

00001b8c <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1b8c:	8f 92       	push	r8
    1b8e:	9f 92       	push	r9
    1b90:	af 92       	push	r10
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	4c 01       	movw	r8, r24
    1ba6:	6b 01       	movw	r12, r22
    1ba8:	5a 01       	movw	r10, r20
    1baa:	e9 01       	movw	r28, r18
    1bac:	dc 01       	movw	r26, r24
    1bae:	ed 91       	ld	r30, X+
    1bb0:	fc 91       	ld	r31, X
    1bb2:	62 17       	cp	r22, r18
    1bb4:	73 07       	cpc	r23, r19
    1bb6:	81 f4       	brne	.+32     	; 0x1bd8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    1bb8:	04 17       	cp	r16, r20
    1bba:	15 07       	cpc	r17, r21
    1bbc:	24 f4       	brge	.+8      	; 0x1bc6 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    1bbe:	8b 2d       	mov	r24, r11
    1bc0:	58 01       	movw	r10, r16
    1bc2:	04 2f       	mov	r16, r20
    1bc4:	18 2f       	mov	r17, r24
    1bc6:	0a 19       	sub	r16, r10
    1bc8:	1b 09       	sbc	r17, r11
    1bca:	98 01       	movw	r18, r16
    1bcc:	2f 5f       	subi	r18, 0xFF	; 255
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	04 8c       	ldd	r0, Z+28	; 0x1c
    1bd2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	12 c0       	rjmp	.+36     	; 0x1bfc <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    1bd8:	40 17       	cp	r20, r16
    1bda:	51 07       	cpc	r21, r17
    1bdc:	09 f5       	brne	.+66     	; 0x1c20 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    1bde:	26 17       	cp	r18, r22
    1be0:	37 07       	cpc	r19, r23
    1be2:	24 f4       	brge	.+8      	; 0x1bec <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    1be4:	8d 2d       	mov	r24, r13
    1be6:	69 01       	movw	r12, r18
    1be8:	c6 2f       	mov	r28, r22
    1bea:	d8 2f       	mov	r29, r24
    1bec:	9e 01       	movw	r18, r28
    1bee:	2c 19       	sub	r18, r12
    1bf0:	3d 09       	sbc	r19, r13
    1bf2:	2f 5f       	subi	r18, 0xFF	; 255
    1bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf6:	06 8c       	ldd	r0, Z+30	; 0x1e
    1bf8:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1bfa:	e0 2d       	mov	r30, r0
    1bfc:	87 01       	movw	r16, r14
    1bfe:	a5 01       	movw	r20, r10
    1c00:	b6 01       	movw	r22, r12
    1c02:	c4 01       	movw	r24, r8
    1c04:	19 95       	eicall
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	df 90       	pop	r13
    1c14:	cf 90       	pop	r12
    1c16:	bf 90       	pop	r11
    1c18:	af 90       	pop	r10
    1c1a:	9f 90       	pop	r9
    1c1c:	8f 90       	pop	r8
    1c1e:	08 95       	ret
    1c20:	02 84       	ldd	r0, Z+10	; 0x0a
    1c22:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c24:	e0 2d       	mov	r30, r0
    1c26:	19 95       	eicall
    1c28:	d4 01       	movw	r26, r8
    1c2a:	ed 91       	ld	r30, X+
    1c2c:	fc 91       	ld	r31, X
    1c2e:	04 88       	ldd	r0, Z+20	; 0x14
    1c30:	f5 89       	ldd	r31, Z+21	; 0x15
    1c32:	e0 2d       	mov	r30, r0
    1c34:	9e 01       	movw	r18, r28
    1c36:	a5 01       	movw	r20, r10
    1c38:	b6 01       	movw	r22, r12
    1c3a:	c4 01       	movw	r24, r8
    1c3c:	19 95       	eicall
    1c3e:	d4 01       	movw	r26, r8
    1c40:	ed 91       	ld	r30, X+
    1c42:	fc 91       	ld	r31, X
    1c44:	06 88       	ldd	r0, Z+22	; 0x16
    1c46:	f7 89       	ldd	r31, Z+23	; 0x17
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	c4 01       	movw	r24, r8
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	bf 90       	pop	r11
    1c5e:	af 90       	pop	r10
    1c60:	9f 90       	pop	r9
    1c62:	8f 90       	pop	r8
    1c64:	19 94       	eijmp

00001c66 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    1c66:	6f 92       	push	r6
    1c68:	7f 92       	push	r7
    1c6a:	8f 92       	push	r8
    1c6c:	9f 92       	push	r9
    1c6e:	af 92       	push	r10
    1c70:	bf 92       	push	r11
    1c72:	cf 92       	push	r12
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	ec 01       	movw	r28, r24
    1c84:	4b 01       	movw	r8, r22
    1c86:	5a 01       	movw	r10, r20
    1c88:	69 01       	movw	r12, r18
    1c8a:	38 01       	movw	r6, r16
    1c8c:	e8 81       	ld	r30, Y
    1c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c90:	02 84       	ldd	r0, Z+10	; 0x0a
    1c92:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c94:	e0 2d       	mov	r30, r0
    1c96:	19 95       	eicall
    1c98:	e8 81       	ld	r30, Y
    1c9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c9c:	02 88       	ldd	r0, Z+18	; 0x12
    1c9e:	f3 89       	ldd	r31, Z+19	; 0x13
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	87 01       	movw	r16, r14
    1ca4:	96 01       	movw	r18, r12
    1ca6:	a5 01       	movw	r20, r10
    1ca8:	b4 01       	movw	r22, r8
    1caa:	ce 01       	movw	r24, r28
    1cac:	19 95       	eicall
    1cae:	a5 01       	movw	r20, r10
    1cb0:	46 0d       	add	r20, r6
    1cb2:	57 1d       	adc	r21, r7
    1cb4:	41 50       	subi	r20, 0x01	; 1
    1cb6:	51 09       	sbc	r21, r1
    1cb8:	e8 81       	ld	r30, Y
    1cba:	f9 81       	ldd	r31, Y+1	; 0x01
    1cbc:	02 88       	ldd	r0, Z+18	; 0x12
    1cbe:	f3 89       	ldd	r31, Z+19	; 0x13
    1cc0:	e0 2d       	mov	r30, r0
    1cc2:	96 01       	movw	r18, r12
    1cc4:	b4 01       	movw	r22, r8
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	19 95       	eicall
    1cca:	e8 81       	ld	r30, Y
    1ccc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cce:	00 88       	ldd	r0, Z+16	; 0x10
    1cd0:	f1 89       	ldd	r31, Z+17	; 0x11
    1cd2:	e0 2d       	mov	r30, r0
    1cd4:	93 01       	movw	r18, r6
    1cd6:	a5 01       	movw	r20, r10
    1cd8:	b4 01       	movw	r22, r8
    1cda:	ce 01       	movw	r24, r28
    1cdc:	19 95       	eicall
    1cde:	c8 0c       	add	r12, r8
    1ce0:	d9 1c       	adc	r13, r9
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	61 50       	subi	r22, 0x01	; 1
    1ce6:	71 09       	sbc	r23, r1
    1ce8:	e8 81       	ld	r30, Y
    1cea:	f9 81       	ldd	r31, Y+1	; 0x01
    1cec:	00 88       	ldd	r0, Z+16	; 0x10
    1cee:	f1 89       	ldd	r31, Z+17	; 0x11
    1cf0:	e0 2d       	mov	r30, r0
    1cf2:	93 01       	movw	r18, r6
    1cf4:	a5 01       	movw	r20, r10
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	19 95       	eicall
    1cfa:	e8 81       	ld	r30, Y
    1cfc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cfe:	06 88       	ldd	r0, Z+22	; 0x16
    1d00:	f7 89       	ldd	r31, Z+23	; 0x17
    1d02:	e0 2d       	mov	r30, r0
    1d04:	ce 01       	movw	r24, r28
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	bf 90       	pop	r11
    1d18:	af 90       	pop	r10
    1d1a:	9f 90       	pop	r9
    1d1c:	8f 90       	pop	r8
    1d1e:	7f 90       	pop	r7
    1d20:	6f 90       	pop	r6
    1d22:	19 94       	eijmp

00001d24 <_ZN12Adafruit_GFX13invertDisplayEb>:
    1d24:	08 95       	ret

00001d26 <_ZN12Adafruit_GFX11setRotationEh>:
    1d26:	fc 01       	movw	r30, r24
    1d28:	63 70       	andi	r22, 0x03	; 3
    1d2a:	65 8b       	std	Z+21, r22	; 0x15
    1d2c:	84 81       	ldd	r24, Z+4	; 0x04
    1d2e:	95 81       	ldd	r25, Z+5	; 0x05
    1d30:	26 81       	ldd	r18, Z+6	; 0x06
    1d32:	37 81       	ldd	r19, Z+7	; 0x07
    1d34:	61 30       	cpi	r22, 0x01	; 1
    1d36:	39 f0       	breq	.+14     	; 0x1d46 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1d38:	63 30       	cpi	r22, 0x03	; 3
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1d3c:	91 87       	std	Z+9, r25	; 0x09
    1d3e:	80 87       	std	Z+8, r24	; 0x08
    1d40:	33 87       	std	Z+11, r19	; 0x0b
    1d42:	22 87       	std	Z+10, r18	; 0x0a
    1d44:	08 95       	ret
    1d46:	31 87       	std	Z+9, r19	; 0x09
    1d48:	20 87       	std	Z+8, r18	; 0x08
    1d4a:	93 87       	std	Z+11, r25	; 0x0b
    1d4c:	82 87       	std	Z+10, r24	; 0x0a
    1d4e:	08 95       	ret

00001d50 <_ZN12Adafruit_GFXC1Eii>:
    1d50:	fc 01       	movw	r30, r24
    1d52:	13 82       	std	Z+3, r1	; 0x03
    1d54:	12 82       	std	Z+2, r1	; 0x02
    1d56:	86 e3       	ldi	r24, 0x36	; 54
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
    1d5e:	75 83       	std	Z+5, r23	; 0x05
    1d60:	64 83       	std	Z+4, r22	; 0x04
    1d62:	57 83       	std	Z+7, r21	; 0x07
    1d64:	46 83       	std	Z+6, r20	; 0x06
    1d66:	71 87       	std	Z+9, r23	; 0x09
    1d68:	60 87       	std	Z+8, r22	; 0x08
    1d6a:	53 87       	std	Z+11, r21	; 0x0b
    1d6c:	42 87       	std	Z+10, r20	; 0x0a
    1d6e:	15 8a       	std	Z+21, r1	; 0x15
    1d70:	15 86       	std	Z+13, r1	; 0x0d
    1d72:	14 86       	std	Z+12, r1	; 0x0c
    1d74:	17 86       	std	Z+15, r1	; 0x0f
    1d76:	16 86       	std	Z+14, r1	; 0x0e
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	84 8b       	std	Z+20, r24	; 0x14
    1d7c:	2f ef       	ldi	r18, 0xFF	; 255
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	33 8b       	std	Z+19, r19	; 0x13
    1d82:	22 8b       	std	Z+18, r18	; 0x12
    1d84:	31 8b       	std	Z+17, r19	; 0x11
    1d86:	20 8b       	std	Z+16, r18	; 0x10
    1d88:	86 8b       	std	Z+22, r24	; 0x16
    1d8a:	17 8a       	std	Z+23, r1	; 0x17
    1d8c:	11 8e       	std	Z+25, r1	; 0x19
    1d8e:	10 8e       	std	Z+24, r1	; 0x18
    1d90:	08 95       	ret

00001d92 <_ZN12Adafruit_GFX8drawCharEiihjjh>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    1d92:	2f 92       	push	r2
    1d94:	3f 92       	push	r3
    1d96:	4f 92       	push	r4
    1d98:	5f 92       	push	r5
    1d9a:	6f 92       	push	r6
    1d9c:	7f 92       	push	r7
    1d9e:	8f 92       	push	r8
    1da0:	9f 92       	push	r9
    1da2:	af 92       	push	r10
    1da4:	bf 92       	push	r11
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	6b 97       	sbiw	r28, 0x1b	; 27
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	9b 8f       	std	Y+27, r25	; 0x1b
    1dc8:	8a 8f       	std	Y+26, r24	; 0x1a
    1dca:	5b 01       	movw	r10, r22
    1dcc:	1a 01       	movw	r2, r20
    1dce:	d2 2e       	mov	r13, r18
    1dd0:	1f 83       	std	Y+7, r17	; 0x07
    1dd2:	0e 83       	std	Y+6, r16	; 0x06
    1dd4:	37 01       	movw	r6, r14
    1dd6:	c9 82       	std	Y+1, r12	; 0x01

    if(!gfxFont) { // 'Classic' built-in font
    1dd8:	dc 01       	movw	r26, r24
    1dda:	58 96       	adiw	r26, 0x18	; 24
    1ddc:	2d 91       	ld	r18, X+
    1dde:	3c 91       	ld	r19, X
    1de0:	59 97       	sbiw	r26, 0x19	; 25
    1de2:	21 15       	cp	r18, r1
    1de4:	31 05       	cpc	r19, r1
    1de6:	09 f0       	breq	.+2      	; 0x1dea <_ZN12Adafruit_GFX8drawCharEiihjjh+0x58>
    1de8:	e6 c0       	rjmp	.+460    	; 0x1fb6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x224>

        if((x >= _width)            || // Clip right
    1dea:	18 96       	adiw	r26, 0x08	; 8
    1dec:	8d 91       	ld	r24, X+
    1dee:	9c 91       	ld	r25, X
    1df0:	19 97       	sbiw	r26, 0x09	; 9
    1df2:	68 17       	cp	r22, r24
    1df4:	79 07       	cpc	r23, r25
    1df6:	0c f0       	brlt	.+2      	; 0x1dfa <_ZN12Adafruit_GFX8drawCharEiihjjh+0x68>
    1df8:	cd c1       	rjmp	.+922    	; 0x2194 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    1dfa:	1a 96       	adiw	r26, 0x0a	; 10
    1dfc:	8d 91       	ld	r24, X+
    1dfe:	9c 91       	ld	r25, X
    1e00:	1b 97       	sbiw	r26, 0x0b	; 11
    1e02:	48 17       	cp	r20, r24
    1e04:	59 07       	cpc	r21, r25
    1e06:	0c f0       	brlt	.+2      	; 0x1e0a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    1e08:	c5 c1       	rjmp	.+906    	; 0x2194 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
           (y >= _height)           || // Clip bottom
           ((x + 6 * size - 1) < 0) || // Clip left
    1e0a:	8c 2c       	mov	r8, r12
    1e0c:	91 2c       	mov	r9, r1
    1e0e:	fb 01       	movw	r30, r22
    1e10:	26 e0       	ldi	r18, 0x06	; 6
    1e12:	c2 9e       	mul	r12, r18
    1e14:	e0 0d       	add	r30, r0
    1e16:	f1 1d       	adc	r31, r1
    1e18:	11 24       	eor	r1, r1
    1e1a:	fb 87       	std	Y+11, r31	; 0x0b
    1e1c:	ea 87       	std	Y+10, r30	; 0x0a
  uint16_t color, uint16_t bg, uint8_t size) {

    if(!gfxFont) { // 'Classic' built-in font

        if((x >= _width)            || // Clip right
           (y >= _height)           || // Clip bottom
    1e1e:	1e 16       	cp	r1, r30
    1e20:	1f 06       	cpc	r1, r31
    1e22:	0c f0       	brlt	.+2      	; 0x1e26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x94>
    1e24:	b7 c1       	rjmp	.+878    	; 0x2194 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
           ((x + 6 * size - 1) < 0) || // Clip left
           ((y + 8 * size - 1) < 0))   // Clip top
    1e26:	a4 01       	movw	r20, r8
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	44 0f       	add	r20, r20
    1e2c:	55 1f       	adc	r21, r21
    1e2e:	8a 95       	dec	r24
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x98>
    1e32:	5d 87       	std	Y+13, r21	; 0x0d
    1e34:	4c 87       	std	Y+12, r20	; 0x0c

    if(!gfxFont) { // 'Classic' built-in font

        if((x >= _width)            || // Clip right
           (y >= _height)           || // Clip bottom
           ((x + 6 * size - 1) < 0) || // Clip left
    1e36:	ca 01       	movw	r24, r20
    1e38:	82 0d       	add	r24, r2
    1e3a:	93 1d       	adc	r25, r3
    1e3c:	18 16       	cp	r1, r24
    1e3e:	19 06       	cpc	r1, r25
    1e40:	0c f0       	brlt	.+2      	; 0x1e44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb2>
    1e42:	a8 c1       	rjmp	.+848    	; 0x2194 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
           ((y + 8 * size - 1) < 0))   // Clip top
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    1e44:	57 96       	adiw	r26, 0x17	; 23
    1e46:	8c 91       	ld	r24, X
    1e48:	81 11       	cpse	r24, r1
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    1e4c:	5f ea       	ldi	r21, 0xAF	; 175
    1e4e:	5d 15       	cp	r21, r13
    1e50:	08 f4       	brcc	.+2      	; 0x1e54 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    1e52:	d3 94       	inc	r13

        startWrite();
    1e54:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e56:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e58:	ed 91       	ld	r30, X+
    1e5a:	fc 91       	ld	r31, X
    1e5c:	11 97       	sbiw	r26, 0x01	; 1
    1e5e:	02 84       	ldd	r0, Z+10	; 0x0a
    1e60:	f3 85       	ldd	r31, Z+11	; 0x0b
    1e62:	e0 2d       	mov	r30, r0
    1e64:	cd 01       	movw	r24, r26
    1e66:	19 95       	eicall
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    1e68:	b5 e0       	ldi	r27, 0x05	; 5
    1e6a:	db 9e       	mul	r13, r27
    1e6c:	c0 01       	movw	r24, r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	f5 01       	movw	r30, r10
    1e72:	35 96       	adiw	r30, 0x05	; 5
    1e74:	ff 87       	std	Y+15, r31	; 0x0f
    1e76:	ee 87       	std	Y+14, r30	; 0x0e
    1e78:	25 01       	movw	r4, r10
    1e7a:	bb 82       	std	Y+3, r11	; 0x03
    1e7c:	aa 82       	std	Y+2, r10	; 0x02
    1e7e:	9c 01       	movw	r18, r24
    1e80:	2a 19       	sub	r18, r10
    1e82:	3b 09       	sbc	r19, r11
    1e84:	39 8b       	std	Y+17, r19	; 0x11
    1e86:	28 8b       	std	Y+16, r18	; 0x10
    1e88:	a1 01       	movw	r20, r2
    1e8a:	48 5f       	subi	r20, 0xF8	; 248
    1e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8e:	5b 8b       	std	Y+19, r21	; 0x13
    1e90:	4a 8b       	std	Y+18, r20	; 0x12
    1e92:	e8 89       	ldd	r30, Y+16	; 0x10
    1e94:	f9 89       	ldd	r31, Y+17	; 0x11
    1e96:	e4 0d       	add	r30, r4
    1e98:	f5 1d       	adc	r31, r5
    1e9a:	ec 50       	subi	r30, 0x0C	; 12
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	54 91       	lpm	r21, Z
    1ea0:	58 87       	std	Y+8, r21	; 0x08
    1ea2:	3d 82       	std	Y+5, r3	; 0x05
    1ea4:	2c 82       	std	Y+4, r2	; 0x04
    1ea6:	61 01       	movw	r12, r2
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
    1ea8:	88 85       	ldd	r24, Y+8	; 0x08
    1eaa:	80 ff       	sbrs	r24, 0
    1eac:	13 c0       	rjmp	.+38     	; 0x1ed4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x142>
    1eae:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1eb0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1eb2:	ed 91       	ld	r30, X+
    1eb4:	fc 91       	ld	r31, X
                    if(size == 1)
    1eb6:	b9 81       	ldd	r27, Y+1	; 0x01
    1eb8:	b1 30       	cpi	r27, 0x01	; 1
    1eba:	31 f4       	brne	.+12     	; 0x1ec8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x136>
                        writePixel(x+i, y+j, color);
    1ebc:	04 84       	ldd	r0, Z+12	; 0x0c
    1ebe:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ec4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec6:	16 c0       	rjmp	.+44     	; 0x1ef4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    1ec8:	06 84       	ldd	r0, Z+14	; 0x0e
    1eca:	f7 85       	ldd	r31, Z+15	; 0x0f
    1ecc:	e0 2d       	mov	r30, r0
    1ece:	ee 80       	ldd	r14, Y+6	; 0x06
    1ed0:	ff 80       	ldd	r15, Y+7	; 0x07
    1ed2:	1a c0       	rjmp	.+52     	; 0x1f08 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x176>
                } else if(bg != color) {
    1ed4:	ee 81       	ldd	r30, Y+6	; 0x06
    1ed6:	ff 81       	ldd	r31, Y+7	; 0x07
    1ed8:	e6 15       	cp	r30, r6
    1eda:	f7 05       	cpc	r31, r7
    1edc:	f1 f0       	breq	.+60     	; 0x1f1a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    1ede:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1ee0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
                    if(size == 1)
    1ee6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee8:	b1 30       	cpi	r27, 0x01	; 1
    1eea:	51 f4       	brne	.+20     	; 0x1f00 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16e>
                        writePixel(x+i, y+j, bg);
    1eec:	04 84       	ldd	r0, Z+12	; 0x0c
    1eee:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ef0:	e0 2d       	mov	r30, r0
    1ef2:	93 01       	movw	r18, r6
    1ef4:	a6 01       	movw	r20, r12
    1ef6:	b2 01       	movw	r22, r4
    1ef8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1efa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1efc:	19 95       	eicall
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    1f00:	06 84       	ldd	r0, Z+14	; 0x0e
    1f02:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f04:	e0 2d       	mov	r30, r0
    1f06:	73 01       	movw	r14, r6
    1f08:	84 01       	movw	r16, r8
    1f0a:	94 01       	movw	r18, r8
    1f0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1f0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1f10:	6a 81       	ldd	r22, Y+2	; 0x02
    1f12:	7b 81       	ldd	r23, Y+3	; 0x03
    1f14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f18:	19 95       	eicall
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
    1f1a:	e8 85       	ldd	r30, Y+8	; 0x08
    1f1c:	e6 95       	lsr	r30
    1f1e:	e8 87       	std	Y+8, r30	; 0x08
    1f20:	2c 81       	ldd	r18, Y+4	; 0x04
    1f22:	3d 81       	ldd	r19, Y+5	; 0x05
    1f24:	28 0d       	add	r18, r8
    1f26:	39 1d       	adc	r19, r9
    1f28:	3d 83       	std	Y+5, r19	; 0x05
    1f2a:	2c 83       	std	Y+4, r18	; 0x04
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	c3 1a       	sub	r12, r19
    1f30:	d3 0a       	sbc	r13, r19
    1f32:	4a 89       	ldd	r20, Y+18	; 0x12
    1f34:	5b 89       	ldd	r21, Y+19	; 0x13
    1f36:	c4 16       	cp	r12, r20
    1f38:	d5 06       	cpc	r13, r21
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ac>
    1f3c:	b5 cf       	rjmp	.-150    	; 0x1ea8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x116>
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	9b 81       	ldd	r25, Y+3	; 0x03
    1f42:	88 0d       	add	r24, r8
    1f44:	99 1d       	adc	r25, r9
    1f46:	9b 83       	std	Y+3, r25	; 0x03
    1f48:	8a 83       	std	Y+2, r24	; 0x02
    1f4a:	9f ef       	ldi	r25, 0xFF	; 255
    1f4c:	49 1a       	sub	r4, r25
    1f4e:	59 0a       	sbc	r5, r25
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    1f50:	ae 85       	ldd	r26, Y+14	; 0x0e
    1f52:	bf 85       	ldd	r27, Y+15	; 0x0f
    1f54:	4a 16       	cp	r4, r26
    1f56:	5b 06       	cpc	r5, r27
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ca>
    1f5a:	9b cf       	rjmp	.-202    	; 0x1e92 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x100>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
    1f5c:	ee 81       	ldd	r30, Y+6	; 0x06
    1f5e:	ff 81       	ldd	r31, Y+7	; 0x07
    1f60:	e6 15       	cp	r30, r6
    1f62:	f7 05       	cpc	r31, r7
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d6>
    1f66:	f4 c0       	rjmp	.+488    	; 0x2150 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    1f68:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f6a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1f6c:	a0 81       	ld	r26, Z
    1f6e:	b1 81       	ldd	r27, Z+1	; 0x01
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    1f70:	f9 81       	ldd	r31, Y+1	; 0x01
    1f72:	f1 30       	cpi	r31, 0x01	; 1
    1f74:	79 f4       	brne	.+30     	; 0x1f94 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
    1f76:	b5 01       	movw	r22, r10
    1f78:	6b 5f       	subi	r22, 0xFB	; 251
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	50 96       	adiw	r26, 0x10	; 16
    1f7e:	ed 91       	ld	r30, X+
    1f80:	fc 91       	ld	r31, X
    1f82:	51 97       	sbiw	r26, 0x11	; 17
    1f84:	83 01       	movw	r16, r6
    1f86:	28 e0       	ldi	r18, 0x08	; 8
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	a1 01       	movw	r20, r2
    1f8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f90:	19 95       	eicall
    1f92:	de c0       	rjmp	.+444    	; 0x2150 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    1f94:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f96:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f98:	68 19       	sub	r22, r8
    1f9a:	79 09       	sbc	r23, r9
    1f9c:	1e 96       	adiw	r26, 0x0e	; 14
    1f9e:	ed 91       	ld	r30, X+
    1fa0:	fc 91       	ld	r31, X
    1fa2:	1f 97       	sbiw	r26, 0x0f	; 15
    1fa4:	73 01       	movw	r14, r6
    1fa6:	0c 85       	ldd	r16, Y+12	; 0x0c
    1fa8:	1d 85       	ldd	r17, Y+13	; 0x0d
    1faa:	94 01       	movw	r18, r8
    1fac:	a1 01       	movw	r20, r2
    1fae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fb0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fb2:	19 95       	eicall
    1fb4:	cd c0       	rjmp	.+410    	; 0x2150 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	34 96       	adiw	r30, 0x04	; 4
    1fba:	e4 91       	lpm	r30, Z
    1fbc:	de 1a       	sub	r13, r30
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1fbe:	f9 01       	movw	r30, r18
    1fc0:	32 96       	adiw	r30, 0x02	; 2
    1fc2:	85 91       	lpm	r24, Z+
    1fc4:	94 91       	lpm	r25, Z
    1fc6:	b7 e0       	ldi	r27, 0x07	; 7
    1fc8:	db 9e       	mul	r13, r27
    1fca:	80 0d       	add	r24, r0
    1fcc:	91 1d       	adc	r25, r1
    1fce:	11 24       	eor	r1, r1
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	25 91       	lpm	r18, Z+
    1fd4:	34 91       	lpm	r19, Z
    1fd6:	3b 8b       	std	Y+19, r19	; 0x13
    1fd8:	2a 8b       	std	Y+18, r18	; 0x12

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    1fda:	fc 01       	movw	r30, r24
    1fdc:	25 91       	lpm	r18, Z+
    1fde:	34 91       	lpm	r19, Z
    1fe0:	29 01       	movw	r4, r18
        uint8_t  w  = pgm_read_byte(&glyph->width),
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	32 96       	adiw	r30, 0x02	; 2
    1fe6:	c4 90       	lpm	r12, Z
                 h  = pgm_read_byte(&glyph->height);
    1fe8:	31 96       	adiw	r30, 0x01	; 1
    1fea:	34 91       	lpm	r19, Z
    1fec:	3c 87       	std	Y+12, r19	; 0x0c
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    1fee:	32 96       	adiw	r30, 0x02	; 2
    1ff0:	14 91       	lpm	r17, Z
                 yo = pgm_read_byte(&glyph->yOffset);
    1ff2:	31 96       	adiw	r30, 0x01	; 1
    1ff4:	d4 90       	lpm	r13, Z
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
    1ff6:	49 81       	ldd	r20, Y+1	; 0x01
    1ff8:	42 30       	cpi	r20, 0x02	; 2
    1ffa:	58 f0       	brcs	.+22     	; 0x2012 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x280>
            xo16 = xo;
    1ffc:	61 2e       	mov	r6, r17
    1ffe:	01 2e       	mov	r0, r17
    2000:	00 0c       	add	r0, r0
    2002:	77 08       	sbc	r7, r7
            yo16 = yo;
    2004:	8d 2d       	mov	r24, r13
    2006:	0d 2c       	mov	r0, r13
    2008:	00 0c       	add	r0, r0
    200a:	99 0b       	sbc	r25, r25
    200c:	99 87       	std	Y+9, r25	; 0x09
    200e:	88 87       	std	Y+8, r24	; 0x08
    2010:	04 c0       	rjmp	.+8      	; 0x201a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x288>
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
    2012:	19 86       	std	Y+9, r1	; 0x09
    2014:	18 86       	std	Y+8, r1	; 0x08
    2016:	61 2c       	mov	r6, r1
    2018:	71 2c       	mov	r7, r1
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
    201a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    201c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    201e:	ed 91       	ld	r30, X+
    2020:	fc 91       	ld	r31, X
    2022:	11 97       	sbiw	r26, 0x01	; 1
    2024:	02 84       	ldd	r0, Z+10	; 0x0a
    2026:	f3 85       	ldd	r31, Z+11	; 0x0b
    2028:	e0 2d       	mov	r30, r0
    202a:	cd 01       	movw	r24, r26
    202c:	19 95       	eicall
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    202e:	b9 81       	ldd	r27, Y+1	; 0x01
    2030:	8b 2e       	mov	r8, r27
    2032:	91 2c       	mov	r9, r1
    2034:	68 9c       	mul	r6, r8
    2036:	c0 01       	movw	r24, r0
    2038:	69 9c       	mul	r6, r9
    203a:	90 0d       	add	r25, r0
    203c:	78 9c       	mul	r7, r8
    203e:	90 0d       	add	r25, r0
    2040:	11 24       	eor	r1, r1
    2042:	fc 01       	movw	r30, r24
    2044:	ea 0d       	add	r30, r10
    2046:	fb 1d       	adc	r31, r11
    2048:	f9 8b       	std	Y+17, r31	; 0x11
    204a:	e8 8b       	std	Y+16, r30	; 0x10
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
    204c:	1a 82       	std	Y+2, r1	; 0x02
    204e:	71 2c       	mov	r7, r1
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
    2050:	61 2c       	mov	r6, r1
    2052:	e1 2f       	mov	r30, r17
    2054:	11 0f       	add	r17, r17
    2056:	ff 0b       	sbc	r31, r31
    2058:	95 01       	movw	r18, r10
    205a:	2e 0f       	add	r18, r30
    205c:	3f 1f       	adc	r19, r31
    205e:	3b 87       	std	Y+11, r19	; 0x0b
    2060:	2a 87       	std	Y+10, r18	; 0x0a
    2062:	ac 0c       	add	r10, r12
    2064:	b1 1c       	adc	r11, r1
    2066:	a5 01       	movw	r20, r10
    2068:	4e 0f       	add	r20, r30
    206a:	5f 1f       	adc	r21, r31
    206c:	5f 8b       	std	Y+23, r21	; 0x17
    206e:	4e 8b       	std	Y+22, r20	; 0x16
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
    2070:	c1 01       	movw	r24, r2
    2072:	8d 0d       	add	r24, r13
    2074:	91 1d       	adc	r25, r1
    2076:	d7 fc       	sbrc	r13, 7
    2078:	9a 95       	dec	r25
    207a:	99 8f       	std	Y+25, r25	; 0x19
    207c:	88 8f       	std	Y+24, r24	; 0x18
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
    207e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2080:	69 16       	cp	r6, r25
    2082:	08 f0       	brcs	.+2      	; 0x2086 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2f4>
    2084:	65 c0       	rjmp	.+202    	; 0x2150 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    2086:	86 2d       	mov	r24, r6
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	48 85       	ldd	r20, Y+8	; 0x08
    208c:	59 85       	ldd	r21, Y+9	; 0x09
    208e:	48 0f       	add	r20, r24
    2090:	59 1f       	adc	r21, r25
    2092:	48 9d       	mul	r20, r8
    2094:	90 01       	movw	r18, r0
    2096:	49 9d       	mul	r20, r9
    2098:	30 0d       	add	r19, r0
    209a:	58 9d       	mul	r21, r8
    209c:	30 0d       	add	r19, r0
    209e:	11 24       	eor	r1, r1
    20a0:	d1 01       	movw	r26, r2
    20a2:	a2 0f       	add	r26, r18
    20a4:	b3 1f       	adc	r27, r19
    20a6:	bf 87       	std	Y+15, r27	; 0x0f
    20a8:	ae 87       	std	Y+14, r26	; 0x0e
    20aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    20ac:	bb 84       	ldd	r11, Y+11	; 0x0b
    20ae:	e8 89       	ldd	r30, Y+16	; 0x10
    20b0:	f9 89       	ldd	r31, Y+17	; 0x11
    20b2:	fd 83       	std	Y+5, r31	; 0x05
    20b4:	ec 83       	std	Y+4, r30	; 0x04
    20b6:	da 80       	ldd	r13, Y+2	; 0x02
    20b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    20ba:	df 1a       	sub	r13, r31
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
    20bc:	28 8d       	ldd	r18, Y+24	; 0x18
    20be:	39 8d       	ldd	r19, Y+25	; 0x19
    20c0:	28 0f       	add	r18, r24
    20c2:	39 1f       	adc	r19, r25
    20c4:	3d 8b       	std	Y+21, r19	; 0x15
    20c6:	2c 8b       	std	Y+20, r18	; 0x14
    20c8:	8d 2d       	mov	r24, r13
    20ca:	8a 0d       	add	r24, r10
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
    20cc:	4e 89       	ldd	r20, Y+22	; 0x16
    20ce:	5f 89       	ldd	r21, Y+23	; 0x17
    20d0:	a4 16       	cp	r10, r20
    20d2:	b5 06       	cpc	r11, r21
    20d4:	c1 f1       	breq	.+112    	; 0x2146 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3b4>
                if(!(bit++ & 7)) {
    20d6:	87 70       	andi	r24, 0x07	; 7
    20d8:	41 f4       	brne	.+16     	; 0x20ea <_ZN12Adafruit_GFX8drawCharEiihjjh+0x358>
                    bits = pgm_read_byte(&bitmap[bo++]);
    20da:	c2 01       	movw	r24, r4
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	ea 89       	ldd	r30, Y+18	; 0x12
    20e0:	fb 89       	ldd	r31, Y+19	; 0x13
    20e2:	e4 0d       	add	r30, r4
    20e4:	f5 1d       	adc	r31, r5
    20e6:	74 90       	lpm	r7, Z
    20e8:	2c 01       	movw	r4, r24
                }
                if(bits & 0x80) {
    20ea:	77 fe       	sbrs	r7, 7
    20ec:	21 c0       	rjmp	.+66     	; 0x2130 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    20ee:	aa 8d       	ldd	r26, Y+26	; 0x1a
    20f0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    20f2:	ed 91       	ld	r30, X+
    20f4:	fc 91       	ld	r31, X
                    if(size == 1) {
    20f6:	b9 81       	ldd	r27, Y+1	; 0x01
    20f8:	b1 30       	cpi	r27, 0x01	; 1
    20fa:	61 f4       	brne	.+24     	; 0x2114 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x382>
                        writePixel(x+xo+xx, y+yo+yy, color);
    20fc:	04 84       	ldd	r0, Z+12	; 0x0c
    20fe:	f5 85       	ldd	r31, Z+13	; 0x0d
    2100:	e0 2d       	mov	r30, r0
    2102:	2e 81       	ldd	r18, Y+6	; 0x06
    2104:	3f 81       	ldd	r19, Y+7	; 0x07
    2106:	4c 89       	ldd	r20, Y+20	; 0x14
    2108:	5d 89       	ldd	r21, Y+21	; 0x15
    210a:	b5 01       	movw	r22, r10
    210c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    210e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2110:	19 95       	eicall
    2112:	0e c0       	rjmp	.+28     	; 0x2130 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
    2114:	06 84       	ldd	r0, Z+14	; 0x0e
    2116:	f7 85       	ldd	r31, Z+15	; 0x0f
    2118:	e0 2d       	mov	r30, r0
    211a:	ee 80       	ldd	r14, Y+6	; 0x06
    211c:	ff 80       	ldd	r15, Y+7	; 0x07
    211e:	84 01       	movw	r16, r8
    2120:	94 01       	movw	r18, r8
    2122:	4e 85       	ldd	r20, Y+14	; 0x0e
    2124:	5f 85       	ldd	r21, Y+15	; 0x0f
    2126:	6c 81       	ldd	r22, Y+4	; 0x04
    2128:	7d 81       	ldd	r23, Y+5	; 0x05
    212a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    212c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    212e:	19 95       	eicall
                    }
                }
                bits <<= 1;
    2130:	77 0c       	add	r7, r7
    2132:	ec 81       	ldd	r30, Y+4	; 0x04
    2134:	fd 81       	ldd	r31, Y+5	; 0x05
    2136:	e8 0d       	add	r30, r8
    2138:	f9 1d       	adc	r31, r9
    213a:	fd 83       	std	Y+5, r31	; 0x05
    213c:	ec 83       	std	Y+4, r30	; 0x04
    213e:	ff ef       	ldi	r31, 0xFF	; 255
    2140:	af 1a       	sub	r10, r31
    2142:	bf 0a       	sbc	r11, r31
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
    2144:	c1 cf       	rjmp	.-126    	; 0x20c8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x336>
    2146:	2a 81       	ldd	r18, Y+2	; 0x02
    2148:	2c 0d       	add	r18, r12
    214a:	2a 83       	std	Y+2, r18	; 0x02
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
    214c:	63 94       	inc	r6
    214e:	97 cf       	rjmp	.-210    	; 0x207e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ec>
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
    2150:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2152:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2154:	ed 91       	ld	r30, X+
    2156:	fc 91       	ld	r31, X
    2158:	11 97       	sbiw	r26, 0x01	; 1
    215a:	06 88       	ldd	r0, Z+22	; 0x16
    215c:	f7 89       	ldd	r31, Z+23	; 0x17
    215e:	e0 2d       	mov	r30, r0
    2160:	cd 01       	movw	r24, r26

    } // End classic vs custom font
}
    2162:	6b 96       	adiw	r28, 0x1b	; 27
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	ff 90       	pop	r15
    2178:	ef 90       	pop	r14
    217a:	df 90       	pop	r13
    217c:	cf 90       	pop	r12
    217e:	bf 90       	pop	r11
    2180:	af 90       	pop	r10
    2182:	9f 90       	pop	r9
    2184:	8f 90       	pop	r8
    2186:	7f 90       	pop	r7
    2188:	6f 90       	pop	r6
    218a:	5f 90       	pop	r5
    218c:	4f 90       	pop	r4
    218e:	3f 90       	pop	r3
    2190:	2f 90       	pop	r2
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
    2192:	19 94       	eijmp

    } // End classic vs custom font
}
    2194:	6b 96       	adiw	r28, 0x1b	; 27
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	bf 90       	pop	r11
    21b2:	af 90       	pop	r10
    21b4:	9f 90       	pop	r9
    21b6:	8f 90       	pop	r8
    21b8:	7f 90       	pop	r7
    21ba:	6f 90       	pop	r6
    21bc:	5f 90       	pop	r5
    21be:	4f 90       	pop	r4
    21c0:	3f 90       	pop	r3
    21c2:	2f 90       	pop	r2
    21c4:	08 95       	ret

000021c6 <_ZN12Adafruit_GFX5writeEh>:

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
    21c6:	af 92       	push	r10
    21c8:	bf 92       	push	r11
    21ca:	cf 92       	push	r12
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	ec 01       	movw	r28, r24
    21da:	26 2f       	mov	r18, r22
#else
void Adafruit_GFX::write(uint8_t c) {
#endif
    if(!gfxFont) { // 'Classic' built-in font
    21dc:	88 8d       	ldd	r24, Y+24	; 0x18
    21de:	99 8d       	ldd	r25, Y+25	; 0x19
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <_ZN12Adafruit_GFX5writeEh+0x20>
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <__stack+0x65>

        if(c == '\n') {                        // Newline?
    21e6:	6a 30       	cpi	r22, 0x0A	; 10
    21e8:	59 f4       	brne	.+22     	; 0x2200 <__stack+0x1>
            cursor_x  = 0;                     // Reset x to zero,
    21ea:	1d 86       	std	Y+13, r1	; 0x0d
    21ec:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += textsize * 8;          // advance y one line
    21ee:	2c 89       	ldd	r18, Y+20	; 0x14
    21f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    21f4:	38 e0       	ldi	r19, 0x08	; 8
    21f6:	23 9f       	mul	r18, r19
    21f8:	80 0d       	add	r24, r0
    21fa:	91 1d       	adc	r25, r1
    21fc:	11 24       	eor	r1, r1
    21fe:	40 c0       	rjmp	.+128    	; 0x2280 <__stack+0x81>
        } else if(c != '\r') {                 // Ignore carriage returns
    2200:	6d 30       	cpi	r22, 0x0D	; 13
    2202:	09 f4       	brne	.+2      	; 0x2206 <__stack+0x7>
    2204:	a8 c0       	rjmp	.+336    	; 0x2356 <__stack+0x157>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    2206:	8e 89       	ldd	r24, Y+22	; 0x16
    2208:	88 23       	and	r24, r24
    220a:	c1 f0       	breq	.+48     	; 0x223c <__stack+0x3d>
    220c:	3c 89       	ldd	r19, Y+20	; 0x14
    220e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2210:	9d 85       	ldd	r25, Y+13	; 0x0d
    2212:	46 e0       	ldi	r20, 0x06	; 6
    2214:	34 9f       	mul	r19, r20
    2216:	80 0d       	add	r24, r0
    2218:	91 1d       	adc	r25, r1
    221a:	11 24       	eor	r1, r1
    221c:	48 85       	ldd	r20, Y+8	; 0x08
    221e:	59 85       	ldd	r21, Y+9	; 0x09
    2220:	48 17       	cp	r20, r24
    2222:	59 07       	cpc	r21, r25
    2224:	5c f4       	brge	.+22     	; 0x223c <__stack+0x3d>
                cursor_x  = 0;                 // Reset x to zero,
    2226:	1d 86       	std	Y+13, r1	; 0x0d
    2228:	1c 86       	std	Y+12, r1	; 0x0c
                cursor_y += textsize * 8;      // advance y one line
    222a:	8e 85       	ldd	r24, Y+14	; 0x0e
    222c:	9f 85       	ldd	r25, Y+15	; 0x0f
    222e:	48 e0       	ldi	r20, 0x08	; 8
    2230:	34 9f       	mul	r19, r20
    2232:	80 0d       	add	r24, r0
    2234:	91 1d       	adc	r25, r1
    2236:	11 24       	eor	r1, r1
    2238:	9f 87       	std	Y+15, r25	; 0x0f
    223a:	8e 87       	std	Y+14, r24	; 0x0e
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    223c:	ea 88       	ldd	r14, Y+18	; 0x12
    223e:	fb 88       	ldd	r15, Y+19	; 0x13
    2240:	08 89       	ldd	r16, Y+16	; 0x10
    2242:	19 89       	ldd	r17, Y+17	; 0x11
    2244:	4e 85       	ldd	r20, Y+14	; 0x0e
    2246:	5f 85       	ldd	r21, Y+15	; 0x0f
    2248:	6c 85       	ldd	r22, Y+12	; 0x0c
    224a:	7d 85       	ldd	r23, Y+13	; 0x0d
    224c:	cc 88       	ldd	r12, Y+20	; 0x14
    224e:	ce 01       	movw	r24, r28
    2250:	a0 dd       	rcall	.-1216   	; 0x1d92 <_ZN12Adafruit_GFX8drawCharEiihjjh>
            cursor_x += textsize * 6;          // Advance x one char
    2252:	2c 89       	ldd	r18, Y+20	; 0x14
    2254:	8c 85       	ldd	r24, Y+12	; 0x0c
    2256:	9d 85       	ldd	r25, Y+13	; 0x0d
    2258:	36 e0       	ldi	r19, 0x06	; 6
    225a:	23 9f       	mul	r18, r19
    225c:	80 0d       	add	r24, r0
    225e:	91 1d       	adc	r25, r1
    2260:	11 24       	eor	r1, r1
    2262:	42 c0       	rjmp	.+132    	; 0x22e8 <__stack+0xe9>
        }

    } else { // Custom font

        if(c == '\n') {
    2264:	6a 30       	cpi	r22, 0x0A	; 10
    2266:	79 f4       	brne	.+30     	; 0x2286 <__stack+0x87>
            cursor_x  = 0;
    2268:	1d 86       	std	Y+13, r1	; 0x0d
    226a:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize *
    226c:	2c 89       	ldd	r18, Y+20	; 0x14
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    226e:	fc 01       	movw	r30, r24
    2270:	36 96       	adiw	r30, 0x06	; 6
    2272:	e4 91       	lpm	r30, Z
    2274:	8e 85       	ldd	r24, Y+14	; 0x0e
    2276:	9f 85       	ldd	r25, Y+15	; 0x0f
    2278:	2e 9f       	mul	r18, r30
    227a:	80 0d       	add	r24, r0
    227c:	91 1d       	adc	r25, r1
    227e:	11 24       	eor	r1, r1
    2280:	9f 87       	std	Y+15, r25	; 0x0f
    2282:	8e 87       	std	Y+14, r24	; 0x0e
    2284:	68 c0       	rjmp	.+208    	; 0x2356 <__stack+0x157>
        } else if(c != '\r') {
    2286:	6d 30       	cpi	r22, 0x0D	; 13
    2288:	09 f4       	brne	.+2      	; 0x228c <__stack+0x8d>
    228a:	65 c0       	rjmp	.+202    	; 0x2356 <__stack+0x157>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    228c:	fc 01       	movw	r30, r24
    228e:	34 96       	adiw	r30, 0x04	; 4
    2290:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    2292:	63 17       	cp	r22, r19
    2294:	08 f4       	brcc	.+2      	; 0x2298 <__stack+0x99>
    2296:	5f c0       	rjmp	.+190    	; 0x2356 <__stack+0x157>
    2298:	31 96       	adiw	r30, 0x01	; 1
    229a:	e4 91       	lpm	r30, Z
    229c:	e6 17       	cp	r30, r22
    229e:	08 f4       	brcc	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	5a c0       	rjmp	.+180    	; 0x2356 <__stack+0x157>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
    22a2:	fc 01       	movw	r30, r24
    22a4:	32 96       	adiw	r30, 0x02	; 2
    22a6:	65 91       	lpm	r22, Z+
    22a8:	74 91       	lpm	r23, Z
                  &gfxFont->glyph))[c - first]);
    22aa:	42 2f       	mov	r20, r18
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	43 1b       	sub	r20, r19
    22b0:	51 09       	sbc	r21, r1
    22b2:	37 e0       	ldi	r19, 0x07	; 7
    22b4:	34 9f       	mul	r19, r20
    22b6:	50 01       	movw	r10, r0
    22b8:	35 9f       	mul	r19, r21
    22ba:	b0 0c       	add	r11, r0
    22bc:	11 24       	eor	r1, r1
    22be:	a6 0e       	add	r10, r22
    22c0:	b7 1e       	adc	r11, r23
                uint8_t   w     = pgm_read_byte(&glyph->width),
    22c2:	f5 01       	movw	r30, r10
    22c4:	32 96       	adiw	r30, 0x02	; 2
    22c6:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    22c8:	31 96       	adiw	r30, 0x01	; 1
    22ca:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    22cc:	33 23       	and	r19, r19
    22ce:	11 f0       	breq	.+4      	; 0x22d4 <__stack+0xd5>
    22d0:	e1 11       	cpse	r30, r1
    22d2:	0d c0       	rjmp	.+26     	; 0x22ee <__stack+0xef>
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    22d4:	f5 01       	movw	r30, r10
    22d6:	34 96       	adiw	r30, 0x04	; 4
    22d8:	e4 91       	lpm	r30, Z
    22da:	2c 89       	ldd	r18, Y+20	; 0x14
    22dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    22de:	9d 85       	ldd	r25, Y+13	; 0x0d
    22e0:	e2 9f       	mul	r30, r18
    22e2:	80 0d       	add	r24, r0
    22e4:	91 1d       	adc	r25, r1
    22e6:	11 24       	eor	r1, r1
    22e8:	9d 87       	std	Y+13, r25	; 0x0d
    22ea:	8c 87       	std	Y+12, r24	; 0x0c
            }
        }

    }
#if ARDUINO >= 100
    return 1;
    22ec:	34 c0       	rjmp	.+104    	; 0x2356 <__stack+0x157>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    22ee:	f5 01       	movw	r30, r10
    22f0:	35 96       	adiw	r30, 0x05	; 5
    22f2:	44 91       	lpm	r20, Z
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    22f4:	5e 89       	ldd	r21, Y+22	; 0x16
    22f6:	55 23       	and	r21, r21
    22f8:	11 f1       	breq	.+68     	; 0x233e <__stack+0x13f>
    22fa:	6c 89       	ldd	r22, Y+20	; 0x14
    22fc:	e3 2f       	mov	r30, r19
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	e4 0f       	add	r30, r20
    2302:	f1 1d       	adc	r31, r1
    2304:	47 fd       	sbrc	r20, 7
    2306:	fa 95       	dec	r31
    2308:	6e 9f       	mul	r22, r30
    230a:	d0 01       	movw	r26, r0
    230c:	6f 9f       	mul	r22, r31
    230e:	b0 0d       	add	r27, r0
    2310:	11 24       	eor	r1, r1
    2312:	4c 85       	ldd	r20, Y+12	; 0x0c
    2314:	5d 85       	ldd	r21, Y+13	; 0x0d
    2316:	4a 0f       	add	r20, r26
    2318:	5b 1f       	adc	r21, r27
    231a:	e8 85       	ldd	r30, Y+8	; 0x08
    231c:	f9 85       	ldd	r31, Y+9	; 0x09
    231e:	e4 17       	cp	r30, r20
    2320:	f5 07       	cpc	r31, r21
    2322:	6c f4       	brge	.+26     	; 0x233e <__stack+0x13f>
                        cursor_x  = 0;
    2324:	1d 86       	std	Y+13, r1	; 0x0d
    2326:	1c 86       	std	Y+12, r1	; 0x0c
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2328:	fc 01       	movw	r30, r24
    232a:	36 96       	adiw	r30, 0x06	; 6
    232c:	e4 91       	lpm	r30, Z
    232e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2330:	9f 85       	ldd	r25, Y+15	; 0x0f
    2332:	6e 9f       	mul	r22, r30
    2334:	80 0d       	add	r24, r0
    2336:	91 1d       	adc	r25, r1
    2338:	11 24       	eor	r1, r1
    233a:	9f 87       	std	Y+15, r25	; 0x0f
    233c:	8e 87       	std	Y+14, r24	; 0x0e
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    233e:	ea 88       	ldd	r14, Y+18	; 0x12
    2340:	fb 88       	ldd	r15, Y+19	; 0x13
    2342:	08 89       	ldd	r16, Y+16	; 0x10
    2344:	19 89       	ldd	r17, Y+17	; 0x11
    2346:	4e 85       	ldd	r20, Y+14	; 0x0e
    2348:	5f 85       	ldd	r21, Y+15	; 0x0f
    234a:	6c 85       	ldd	r22, Y+12	; 0x0c
    234c:	7d 85       	ldd	r23, Y+13	; 0x0d
    234e:	cc 88       	ldd	r12, Y+20	; 0x14
    2350:	ce 01       	movw	r24, r28
    2352:	1f dd       	rcall	.-1474   	; 0x1d92 <_ZN12Adafruit_GFX8drawCharEiihjjh>
    2354:	bf cf       	rjmp	.-130    	; 0x22d4 <__stack+0xd5>

    }
#if ARDUINO >= 100
    return 1;
#endif
}
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	ff 90       	pop	r15
    2364:	ef 90       	pop	r14
    2366:	cf 90       	pop	r12
    2368:	bf 90       	pop	r11
    236a:	af 90       	pop	r10
    236c:	08 95       	ret

0000236e <__cxa_pure_virtual>:
    236e:	26 d3       	rcall	.+1612   	; 0x29bc <abort>

00002370 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2370:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2372:	91 8d       	ldd	r25, Z+25	; 0x19
    2374:	22 8d       	ldd	r18, Z+26	; 0x1a
    2376:	89 2f       	mov	r24, r25
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	80 5c       	subi	r24, 0xC0	; 192
    237c:	9f 4f       	sbci	r25, 0xFF	; 255
    237e:	82 1b       	sub	r24, r18
    2380:	91 09       	sbc	r25, r1
}
    2382:	8f 73       	andi	r24, 0x3F	; 63
    2384:	99 27       	eor	r25, r25
    2386:	08 95       	ret

00002388 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2388:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    238a:	91 8d       	ldd	r25, Z+25	; 0x19
    238c:	82 8d       	ldd	r24, Z+26	; 0x1a
    238e:	98 17       	cp	r25, r24
    2390:	31 f0       	breq	.+12     	; 0x239e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2392:	82 8d       	ldd	r24, Z+26	; 0x1a
    2394:	e8 0f       	add	r30, r24
    2396:	f1 1d       	adc	r31, r1
    2398:	85 8d       	ldd	r24, Z+29	; 0x1d
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    239e:	8f ef       	ldi	r24, 0xFF	; 255
    23a0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    23a2:	08 95       	ret

000023a4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    23a4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    23a6:	91 8d       	ldd	r25, Z+25	; 0x19
    23a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    23aa:	98 17       	cp	r25, r24
    23ac:	61 f0       	breq	.+24     	; 0x23c6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    23ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    23b0:	df 01       	movw	r26, r30
    23b2:	a8 0f       	add	r26, r24
    23b4:	b1 1d       	adc	r27, r1
    23b6:	5d 96       	adiw	r26, 0x1d	; 29
    23b8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    23ba:	92 8d       	ldd	r25, Z+26	; 0x1a
    23bc:	9f 5f       	subi	r25, 0xFF	; 255
    23be:	9f 73       	andi	r25, 0x3F	; 63
    23c0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    23ca:	08 95       	ret

000023cc <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    23cc:	fc 01       	movw	r30, r24
    23ce:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    23d0:	44 8d       	ldd	r20, Z+28	; 0x1c
    23d2:	25 2f       	mov	r18, r21
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	84 2f       	mov	r24, r20
    23d8:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    23da:	82 1b       	sub	r24, r18
    23dc:	93 0b       	sbc	r25, r19
    23de:	54 17       	cp	r21, r20
    23e0:	10 f0       	brcs	.+4      	; 0x23e6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    23e2:	cf 96       	adiw	r24, 0x3f	; 63
    23e4:	08 95       	ret
  return tail - head - 1;
    23e6:	01 97       	sbiw	r24, 0x01	; 1
}
    23e8:	08 95       	ret

000023ea <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    23ea:	88 e1       	ldi	r24, 0x18	; 24
    23ec:	93 e1       	ldi	r25, 0x13	; 19
    23ee:	89 2b       	or	r24, r25
    23f0:	39 f0       	breq	.+14     	; 0x2400 <_Z14serialEventRunv+0x16>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	89 2b       	or	r24, r25
    23f8:	19 f0       	breq	.+6      	; 0x2400 <_Z14serialEventRunv+0x16>
    23fa:	1a d1       	rcall	.+564    	; 0x2630 <_Z17Serial0_availablev>
    23fc:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    23fe:	25 c0       	rjmp	.+74     	; 0x244a <_Z14serialEventRunv+0x60>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	89 2b       	or	r24, r25
    2406:	41 f0       	breq	.+16     	; 0x2418 <_Z14serialEventRunv+0x2e>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	89 2b       	or	r24, r25
    240e:	21 f0       	breq	.+8      	; 0x2418 <_Z14serialEventRunv+0x2e>
    2410:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2414:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2416:	1c c0       	rjmp	.+56     	; 0x2450 <_Z14serialEventRunv+0x66>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	89 2b       	or	r24, r25
    241e:	41 f0       	breq	.+16     	; 0x2430 <_Z14serialEventRunv+0x46>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	89 2b       	or	r24, r25
    2426:	21 f0       	breq	.+8      	; 0x2430 <_Z14serialEventRunv+0x46>
    2428:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    242c:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    242e:	13 c0       	rjmp	.+38     	; 0x2456 <_Z14serialEventRunv+0x6c>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	89 2b       	or	r24, r25
    2436:	a1 f0       	breq	.+40     	; 0x2460 <_Z14serialEventRunv+0x76>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	89 2b       	or	r24, r25
    243e:	81 f0       	breq	.+32     	; 0x2460 <_Z14serialEventRunv+0x76>
    2440:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2444:	81 11       	cpse	r24, r1
    2446:	0a c0       	rjmp	.+20     	; 0x245c <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2448:	08 95       	ret
    244a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    244e:	d8 cf       	rjmp	.-80     	; 0x2400 <_Z14serialEventRunv+0x16>
    2450:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2454:	e1 cf       	rjmp	.-62     	; 0x2418 <_Z14serialEventRunv+0x2e>
    2456:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    245a:	ea cf       	rjmp	.-44     	; 0x2430 <_Z14serialEventRunv+0x46>
    245c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2460:	08 95       	ret

00002462 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2462:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2464:	84 8d       	ldd	r24, Z+28	; 0x1c
    2466:	df 01       	movw	r26, r30
    2468:	a8 0f       	add	r26, r24
    246a:	b1 1d       	adc	r27, r1
    246c:	a3 5a       	subi	r26, 0xA3	; 163
    246e:	bf 4f       	sbci	r27, 0xFF	; 255
    2470:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2472:	84 8d       	ldd	r24, Z+28	; 0x1c
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	01 96       	adiw	r24, 0x01	; 1
    2478:	8f 73       	andi	r24, 0x3F	; 63
    247a:	99 27       	eor	r25, r25
    247c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    247e:	a6 89       	ldd	r26, Z+22	; 0x16
    2480:	b7 89       	ldd	r27, Z+23	; 0x17
    2482:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2484:	a0 89       	ldd	r26, Z+16	; 0x10
    2486:	b1 89       	ldd	r27, Z+17	; 0x11
    2488:	8c 91       	ld	r24, X
    248a:	80 64       	ori	r24, 0x40	; 64
    248c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    248e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2490:	84 8d       	ldd	r24, Z+28	; 0x1c
    2492:	98 13       	cpse	r25, r24
    2494:	06 c0       	rjmp	.+12     	; 0x24a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2496:	02 88       	ldd	r0, Z+18	; 0x12
    2498:	f3 89       	ldd	r31, Z+19	; 0x13
    249a:	e0 2d       	mov	r30, r0
    249c:	80 81       	ld	r24, Z
    249e:	8f 7d       	andi	r24, 0xDF	; 223
    24a0:	80 83       	st	Z, r24
    24a2:	08 95       	ret

000024a4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    24a4:	ef 92       	push	r14
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	ec 01       	movw	r28, r24
  _written = true;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    24b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24ba:	98 13       	cpse	r25, r24
    24bc:	05 c0       	rjmp	.+10     	; 0x24c8 <_ZN14HardwareSerial5writeEh+0x24>
    24be:	e8 89       	ldd	r30, Y+16	; 0x10
    24c0:	f9 89       	ldd	r31, Y+17	; 0x11
    24c2:	80 81       	ld	r24, Z
    24c4:	85 fd       	sbrc	r24, 5
    24c6:	23 c0       	rjmp	.+70     	; 0x250e <_ZN14HardwareSerial5writeEh+0x6a>
    24c8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    24ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
    24cc:	10 e0       	ldi	r17, 0x00	; 0
    24ce:	0f 5f       	subi	r16, 0xFF	; 255
    24d0:	1f 4f       	sbci	r17, 0xFF	; 255
    24d2:	0f 73       	andi	r16, 0x3F	; 63
    24d4:	11 27       	eor	r17, r17
    24d6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    24d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24da:	e8 12       	cpse	r14, r24
    24dc:	0b c0       	rjmp	.+22     	; 0x24f4 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	07 fc       	sbrc	r0, 7
    24e2:	fa cf       	rjmp	.-12     	; 0x24d8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    24e4:	e8 89       	ldd	r30, Y+16	; 0x10
    24e6:	f9 89       	ldd	r31, Y+17	; 0x11
    24e8:	80 81       	ld	r24, Z
    24ea:	85 ff       	sbrs	r24, 5
    24ec:	f5 cf       	rjmp	.-22     	; 0x24d8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    24ee:	ce 01       	movw	r24, r28
    24f0:	b8 df       	rcall	.-144    	; 0x2462 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    24f2:	f2 cf       	rjmp	.-28     	; 0x24d8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    24f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f6:	fe 01       	movw	r30, r28
    24f8:	e8 0f       	add	r30, r24
    24fa:	f1 1d       	adc	r31, r1
    24fc:	e3 5a       	subi	r30, 0xA3	; 163
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2502:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2504:	ea 89       	ldd	r30, Y+18	; 0x12
    2506:	fb 89       	ldd	r31, Y+19	; 0x13
    2508:	80 81       	ld	r24, Z
    250a:	80 62       	ori	r24, 0x20	; 32
    250c:	07 c0       	rjmp	.+14     	; 0x251c <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    250e:	ee 89       	ldd	r30, Y+22	; 0x16
    2510:	ff 89       	ldd	r31, Y+23	; 0x17
    2512:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2514:	e8 89       	ldd	r30, Y+16	; 0x10
    2516:	f9 89       	ldd	r31, Y+17	; 0x11
    2518:	80 81       	ld	r24, Z
    251a:	80 64       	ori	r24, 0x40	; 64
    251c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	08 95       	ret

00002530 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2536:	88 8d       	ldd	r24, Y+24	; 0x18
    2538:	88 23       	and	r24, r24
    253a:	c1 f0       	breq	.+48     	; 0x256c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    253c:	ea 89       	ldd	r30, Y+18	; 0x12
    253e:	fb 89       	ldd	r31, Y+19	; 0x13
    2540:	80 81       	ld	r24, Z
    2542:	85 fd       	sbrc	r24, 5
    2544:	05 c0       	rjmp	.+10     	; 0x2550 <_ZN14HardwareSerial5flushEv+0x20>
    2546:	a8 89       	ldd	r26, Y+16	; 0x10
    2548:	b9 89       	ldd	r27, Y+17	; 0x11
    254a:	8c 91       	ld	r24, X
    254c:	86 fd       	sbrc	r24, 6
    254e:	0e c0       	rjmp	.+28     	; 0x256c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	07 fc       	sbrc	r0, 7
    2554:	f5 cf       	rjmp	.-22     	; 0x2540 <_ZN14HardwareSerial5flushEv+0x10>
    2556:	80 81       	ld	r24, Z
    2558:	85 ff       	sbrs	r24, 5
    255a:	f2 cf       	rjmp	.-28     	; 0x2540 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    255c:	a8 89       	ldd	r26, Y+16	; 0x10
    255e:	b9 89       	ldd	r27, Y+17	; 0x11
    2560:	8c 91       	ld	r24, X
    2562:	85 ff       	sbrs	r24, 5
    2564:	ed cf       	rjmp	.-38     	; 0x2540 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2566:	ce 01       	movw	r24, r28
    2568:	7c df       	rcall	.-264    	; 0x2462 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    256a:	e8 cf       	rjmp	.-48     	; 0x253c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2572:	1f 92       	push	r1
    2574:	0f 92       	push	r0
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	0f 92       	push	r0
    257a:	11 24       	eor	r1, r1
    257c:	0b b6       	in	r0, 0x3b	; 59
    257e:	0f 92       	push	r0
    2580:	2f 93       	push	r18
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	ef 93       	push	r30
    2588:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    258a:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <Serial+0x10>
    258e:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <Serial+0x11>
    2592:	80 81       	ld	r24, Z
    2594:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <Serial+0x16>
    2598:	f0 91 d4 02 	lds	r31, 0x02D4	; 0x8002d4 <Serial+0x17>
    259c:	82 fd       	sbrc	r24, 2
    259e:	12 c0       	rjmp	.+36     	; 0x25c4 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    25a0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    25a2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <Serial+0x19>
    25a6:	8f 5f       	subi	r24, 0xFF	; 255
    25a8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    25aa:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <Serial+0x1a>
    25ae:	82 17       	cp	r24, r18
    25b0:	51 f0       	breq	.+20     	; 0x25c6 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    25b2:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <Serial+0x19>
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	e3 54       	subi	r30, 0x43	; 67
    25ba:	fd 4f       	sbci	r31, 0xFD	; 253
    25bc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    25be:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <Serial+0x19>
    25c2:	01 c0       	rjmp	.+2      	; 0x25c6 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    25c4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    25c6:	ff 91       	pop	r31
    25c8:	ef 91       	pop	r30
    25ca:	9f 91       	pop	r25
    25cc:	8f 91       	pop	r24
    25ce:	2f 91       	pop	r18
    25d0:	0f 90       	pop	r0
    25d2:	0b be       	out	0x3b, r0	; 59
    25d4:	0f 90       	pop	r0
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	0f 90       	pop	r0
    25da:	1f 90       	pop	r1
    25dc:	18 95       	reti

000025de <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	0b b6       	in	r0, 0x3b	; 59
    25ea:	0f 92       	push	r0
    25ec:	2f 93       	push	r18
    25ee:	3f 93       	push	r19
    25f0:	4f 93       	push	r20
    25f2:	5f 93       	push	r21
    25f4:	6f 93       	push	r22
    25f6:	7f 93       	push	r23
    25f8:	8f 93       	push	r24
    25fa:	9f 93       	push	r25
    25fc:	af 93       	push	r26
    25fe:	bf 93       	push	r27
    2600:	ef 93       	push	r30
    2602:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2604:	8d eb       	ldi	r24, 0xBD	; 189
    2606:	92 e0       	ldi	r25, 0x02	; 2
    2608:	2c df       	rcall	.-424    	; 0x2462 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    260a:	ff 91       	pop	r31
    260c:	ef 91       	pop	r30
    260e:	bf 91       	pop	r27
    2610:	af 91       	pop	r26
    2612:	9f 91       	pop	r25
    2614:	8f 91       	pop	r24
    2616:	7f 91       	pop	r23
    2618:	6f 91       	pop	r22
    261a:	5f 91       	pop	r21
    261c:	4f 91       	pop	r20
    261e:	3f 91       	pop	r19
    2620:	2f 91       	pop	r18
    2622:	0f 90       	pop	r0
    2624:	0b be       	out	0x3b, r0	; 59
    2626:	0f 90       	pop	r0
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	0f 90       	pop	r0
    262c:	1f 90       	pop	r1
    262e:	18 95       	reti

00002630 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2630:	8d eb       	ldi	r24, 0xBD	; 189
    2632:	92 e0       	ldi	r25, 0x02	; 2
    2634:	9d de       	rcall	.-710    	; 0x2370 <_ZN14HardwareSerial9availableEv>
    2636:	21 e0       	ldi	r18, 0x01	; 1
    2638:	89 2b       	or	r24, r25
    263a:	09 f4       	brne	.+2      	; 0x263e <_Z17Serial0_availablev+0xe>
    263c:	20 e0       	ldi	r18, 0x00	; 0
}
    263e:	82 2f       	mov	r24, r18
    2640:	08 95       	ret

00002642 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2642:	ed eb       	ldi	r30, 0xBD	; 189
    2644:	f2 e0       	ldi	r31, 0x02	; 2
    2646:	13 82       	std	Z+3, r1	; 0x03
    2648:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    264a:	88 ee       	ldi	r24, 0xE8	; 232
    264c:	93 e0       	ldi	r25, 0x03	; 3
    264e:	a0 e0       	ldi	r26, 0x00	; 0
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	84 83       	std	Z+4, r24	; 0x04
    2654:	95 83       	std	Z+5, r25	; 0x05
    2656:	a6 83       	std	Z+6, r26	; 0x06
    2658:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    265a:	82 e6       	ldi	r24, 0x62	; 98
    265c:	92 e0       	ldi	r25, 0x02	; 2
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
    2662:	85 ec       	ldi	r24, 0xC5	; 197
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	95 87       	std	Z+13, r25	; 0x0d
    2668:	84 87       	std	Z+12, r24	; 0x0c
    266a:	84 ec       	ldi	r24, 0xC4	; 196
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	97 87       	std	Z+15, r25	; 0x0f
    2670:	86 87       	std	Z+14, r24	; 0x0e
    2672:	80 ec       	ldi	r24, 0xC0	; 192
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	91 8b       	std	Z+17, r25	; 0x11
    2678:	80 8b       	std	Z+16, r24	; 0x10
    267a:	81 ec       	ldi	r24, 0xC1	; 193
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	93 8b       	std	Z+19, r25	; 0x13
    2680:	82 8b       	std	Z+18, r24	; 0x12
    2682:	82 ec       	ldi	r24, 0xC2	; 194
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	95 8b       	std	Z+21, r25	; 0x15
    2688:	84 8b       	std	Z+20, r24	; 0x14
    268a:	86 ec       	ldi	r24, 0xC6	; 198
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	97 8b       	std	Z+23, r25	; 0x17
    2690:	86 8b       	std	Z+22, r24	; 0x16
    2692:	11 8e       	std	Z+25, r1	; 0x19
    2694:	12 8e       	std	Z+26, r1	; 0x1a
    2696:	13 8e       	std	Z+27, r1	; 0x1b
    2698:	14 8e       	std	Z+28, r1	; 0x1c
    269a:	08 95       	ret

0000269c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    269c:	08 95       	ret

0000269e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    269e:	cf 92       	push	r12
    26a0:	df 92       	push	r13
    26a2:	ef 92       	push	r14
    26a4:	ff 92       	push	r15
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	6c 01       	movw	r12, r24
    26b0:	7a 01       	movw	r14, r20
    26b2:	8b 01       	movw	r16, r22
  size_t n = 0;
    26b4:	c0 e0       	ldi	r28, 0x00	; 0
    26b6:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    26b8:	ce 15       	cp	r28, r14
    26ba:	df 05       	cpc	r29, r15
    26bc:	81 f0       	breq	.+32     	; 0x26de <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    26be:	d8 01       	movw	r26, r16
    26c0:	6d 91       	ld	r22, X+
    26c2:	8d 01       	movw	r16, r26
    26c4:	d6 01       	movw	r26, r12
    26c6:	ed 91       	ld	r30, X+
    26c8:	fc 91       	ld	r31, X
    26ca:	01 90       	ld	r0, Z+
    26cc:	f0 81       	ld	r31, Z
    26ce:	e0 2d       	mov	r30, r0
    26d0:	c6 01       	movw	r24, r12
    26d2:	19 95       	eicall
    26d4:	89 2b       	or	r24, r25
    26d6:	11 f0       	breq	.+4      	; 0x26dc <_ZN5Print5writeEPKhj+0x3e>
    26d8:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    26da:	ee cf       	rjmp	.-36     	; 0x26b8 <_ZN5Print5writeEPKhj+0x1a>
    26dc:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    26de:	c7 01       	movw	r24, r14
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	df 90       	pop	r13
    26ee:	cf 90       	pop	r12
    26f0:	08 95       	ret

000026f2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	fc 01       	movw	r30, r24
    26fa:	ec 50       	subi	r30, 0x0C	; 12
    26fc:	fa 4f       	sbci	r31, 0xFA	; 250
    26fe:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2700:	fc 01       	movw	r30, r24
    2702:	e6 5c       	subi	r30, 0xC6	; 198
    2704:	f9 4f       	sbci	r31, 0xF9	; 249
    2706:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2708:	88 23       	and	r24, r24
    270a:	61 f1       	breq	.+88     	; 0x2764 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	fc 01       	movw	r30, r24
    2714:	e6 56       	subi	r30, 0x66	; 102
    2716:	f9 4f       	sbci	r31, 0xF9	; 249
    2718:	c5 91       	lpm	r28, Z+
    271a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    271c:	fc 01       	movw	r30, r24
    271e:	e0 58       	subi	r30, 0x80	; 128
    2720:	f9 4f       	sbci	r31, 0xF9	; 249
    2722:	a5 91       	lpm	r26, Z+
    2724:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2726:	61 11       	cpse	r22, r1
    2728:	09 c0       	rjmp	.+18     	; 0x273c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    272a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    272c:	f8 94       	cli
		*reg &= ~bit;
    272e:	88 81       	ld	r24, Y
    2730:	20 95       	com	r18
    2732:	82 23       	and	r24, r18
    2734:	88 83       	st	Y, r24
		*out &= ~bit;
    2736:	ec 91       	ld	r30, X
    2738:	2e 23       	and	r18, r30
    273a:	0b c0       	rjmp	.+22     	; 0x2752 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    273c:	62 30       	cpi	r22, 0x02	; 2
    273e:	61 f4       	brne	.+24     	; 0x2758 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2740:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2742:	f8 94       	cli
		*reg &= ~bit;
    2744:	88 81       	ld	r24, Y
    2746:	32 2f       	mov	r19, r18
    2748:	30 95       	com	r19
    274a:	83 23       	and	r24, r19
    274c:	88 83       	st	Y, r24
		*out |= bit;
    274e:	ec 91       	ld	r30, X
    2750:	2e 2b       	or	r18, r30
    2752:	2c 93       	st	X, r18
		SREG = oldSREG;
    2754:	9f bf       	out	0x3f, r25	; 63
    2756:	06 c0       	rjmp	.+12     	; 0x2764 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2758:	8f b7       	in	r24, 0x3f	; 63
                cli();
    275a:	f8 94       	cli
		*reg |= bit;
    275c:	e8 81       	ld	r30, Y
    275e:	2e 2b       	or	r18, r30
    2760:	28 83       	st	Y, r18
		SREG = oldSREG;
    2762:	8f bf       	out	0x3f, r24	; 63
	}
}
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	08 95       	ret

0000276a <__tablejump2__>:
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	88 1f       	adc	r24, r24
    2770:	8b bf       	out	0x3b, r24	; 59
    2772:	07 90       	elpm	r0, Z+
    2774:	f6 91       	elpm	r31, Z
    2776:	e0 2d       	mov	r30, r0
    2778:	19 94       	eijmp

0000277a <malloc>:
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	82 30       	cpi	r24, 0x02	; 2
    2784:	91 05       	cpc	r25, r1
    2786:	10 f4       	brcc	.+4      	; 0x278c <malloc+0x12>
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <__flp>
    2790:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <__flp+0x1>
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a0 e0       	ldi	r26, 0x00	; 0
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	30 97       	sbiw	r30, 0x00	; 0
    279e:	19 f1       	breq	.+70     	; 0x27e6 <malloc+0x6c>
    27a0:	40 81       	ld	r20, Z
    27a2:	51 81       	ldd	r21, Z+1	; 0x01
    27a4:	02 81       	ldd	r16, Z+2	; 0x02
    27a6:	13 81       	ldd	r17, Z+3	; 0x03
    27a8:	48 17       	cp	r20, r24
    27aa:	59 07       	cpc	r21, r25
    27ac:	c8 f0       	brcs	.+50     	; 0x27e0 <malloc+0x66>
    27ae:	84 17       	cp	r24, r20
    27b0:	95 07       	cpc	r25, r21
    27b2:	69 f4       	brne	.+26     	; 0x27ce <malloc+0x54>
    27b4:	10 97       	sbiw	r26, 0x00	; 0
    27b6:	31 f0       	breq	.+12     	; 0x27c4 <malloc+0x4a>
    27b8:	12 96       	adiw	r26, 0x02	; 2
    27ba:	0c 93       	st	X, r16
    27bc:	12 97       	sbiw	r26, 0x02	; 2
    27be:	13 96       	adiw	r26, 0x03	; 3
    27c0:	1c 93       	st	X, r17
    27c2:	27 c0       	rjmp	.+78     	; 0x2812 <malloc+0x98>
    27c4:	00 93 5c 03 	sts	0x035C, r16	; 0x80035c <__flp>
    27c8:	10 93 5d 03 	sts	0x035D, r17	; 0x80035d <__flp+0x1>
    27cc:	22 c0       	rjmp	.+68     	; 0x2812 <malloc+0x98>
    27ce:	21 15       	cp	r18, r1
    27d0:	31 05       	cpc	r19, r1
    27d2:	19 f0       	breq	.+6      	; 0x27da <malloc+0x60>
    27d4:	42 17       	cp	r20, r18
    27d6:	53 07       	cpc	r21, r19
    27d8:	18 f4       	brcc	.+6      	; 0x27e0 <malloc+0x66>
    27da:	9a 01       	movw	r18, r20
    27dc:	bd 01       	movw	r22, r26
    27de:	ef 01       	movw	r28, r30
    27e0:	df 01       	movw	r26, r30
    27e2:	f8 01       	movw	r30, r16
    27e4:	db cf       	rjmp	.-74     	; 0x279c <malloc+0x22>
    27e6:	21 15       	cp	r18, r1
    27e8:	31 05       	cpc	r19, r1
    27ea:	f9 f0       	breq	.+62     	; 0x282a <malloc+0xb0>
    27ec:	28 1b       	sub	r18, r24
    27ee:	39 0b       	sbc	r19, r25
    27f0:	24 30       	cpi	r18, 0x04	; 4
    27f2:	31 05       	cpc	r19, r1
    27f4:	80 f4       	brcc	.+32     	; 0x2816 <malloc+0x9c>
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	61 15       	cp	r22, r1
    27fc:	71 05       	cpc	r23, r1
    27fe:	21 f0       	breq	.+8      	; 0x2808 <malloc+0x8e>
    2800:	fb 01       	movw	r30, r22
    2802:	93 83       	std	Z+3, r25	; 0x03
    2804:	82 83       	std	Z+2, r24	; 0x02
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <malloc+0x96>
    2808:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <__flp+0x1>
    280c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <__flp>
    2810:	fe 01       	movw	r30, r28
    2812:	32 96       	adiw	r30, 0x02	; 2
    2814:	44 c0       	rjmp	.+136    	; 0x289e <malloc+0x124>
    2816:	fe 01       	movw	r30, r28
    2818:	e2 0f       	add	r30, r18
    281a:	f3 1f       	adc	r31, r19
    281c:	81 93       	st	Z+, r24
    281e:	91 93       	st	Z+, r25
    2820:	22 50       	subi	r18, 0x02	; 2
    2822:	31 09       	sbc	r19, r1
    2824:	39 83       	std	Y+1, r19	; 0x01
    2826:	28 83       	st	Y, r18
    2828:	3a c0       	rjmp	.+116    	; 0x289e <malloc+0x124>
    282a:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <__brkval>
    282e:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <__brkval+0x1>
    2832:	23 2b       	or	r18, r19
    2834:	41 f4       	brne	.+16     	; 0x2846 <malloc+0xcc>
    2836:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    283a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    283e:	30 93 5b 03 	sts	0x035B, r19	; 0x80035b <__brkval+0x1>
    2842:	20 93 5a 03 	sts	0x035A, r18	; 0x80035a <__brkval>
    2846:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    284a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    284e:	21 15       	cp	r18, r1
    2850:	31 05       	cpc	r19, r1
    2852:	41 f4       	brne	.+16     	; 0x2864 <malloc+0xea>
    2854:	2d b7       	in	r18, 0x3d	; 61
    2856:	3e b7       	in	r19, 0x3e	; 62
    2858:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    285c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2860:	24 1b       	sub	r18, r20
    2862:	35 0b       	sbc	r19, r21
    2864:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <__brkval>
    2868:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <__brkval+0x1>
    286c:	e2 17       	cp	r30, r18
    286e:	f3 07       	cpc	r31, r19
    2870:	a0 f4       	brcc	.+40     	; 0x289a <malloc+0x120>
    2872:	2e 1b       	sub	r18, r30
    2874:	3f 0b       	sbc	r19, r31
    2876:	28 17       	cp	r18, r24
    2878:	39 07       	cpc	r19, r25
    287a:	78 f0       	brcs	.+30     	; 0x289a <malloc+0x120>
    287c:	ac 01       	movw	r20, r24
    287e:	4e 5f       	subi	r20, 0xFE	; 254
    2880:	5f 4f       	sbci	r21, 0xFF	; 255
    2882:	24 17       	cp	r18, r20
    2884:	35 07       	cpc	r19, r21
    2886:	48 f0       	brcs	.+18     	; 0x289a <malloc+0x120>
    2888:	4e 0f       	add	r20, r30
    288a:	5f 1f       	adc	r21, r31
    288c:	50 93 5b 03 	sts	0x035B, r21	; 0x80035b <__brkval+0x1>
    2890:	40 93 5a 03 	sts	0x035A, r20	; 0x80035a <__brkval>
    2894:	81 93       	st	Z+, r24
    2896:	91 93       	st	Z+, r25
    2898:	02 c0       	rjmp	.+4      	; 0x289e <malloc+0x124>
    289a:	e0 e0       	ldi	r30, 0x00	; 0
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	cf 01       	movw	r24, r30
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	08 95       	ret

000028aa <free>:
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <free+0xa>
    28b2:	81 c0       	rjmp	.+258    	; 0x29b6 <free+0x10c>
    28b4:	fc 01       	movw	r30, r24
    28b6:	32 97       	sbiw	r30, 0x02	; 2
    28b8:	13 82       	std	Z+3, r1	; 0x03
    28ba:	12 82       	std	Z+2, r1	; 0x02
    28bc:	a0 91 5c 03 	lds	r26, 0x035C	; 0x80035c <__flp>
    28c0:	b0 91 5d 03 	lds	r27, 0x035D	; 0x80035d <__flp+0x1>
    28c4:	10 97       	sbiw	r26, 0x00	; 0
    28c6:	81 f4       	brne	.+32     	; 0x28e8 <free+0x3e>
    28c8:	20 81       	ld	r18, Z
    28ca:	31 81       	ldd	r19, Z+1	; 0x01
    28cc:	82 0f       	add	r24, r18
    28ce:	93 1f       	adc	r25, r19
    28d0:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <__brkval>
    28d4:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <__brkval+0x1>
    28d8:	28 17       	cp	r18, r24
    28da:	39 07       	cpc	r19, r25
    28dc:	51 f5       	brne	.+84     	; 0x2932 <free+0x88>
    28de:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <__brkval+0x1>
    28e2:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <__brkval>
    28e6:	67 c0       	rjmp	.+206    	; 0x29b6 <free+0x10c>
    28e8:	ed 01       	movw	r28, r26
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	ce 17       	cp	r28, r30
    28f0:	df 07       	cpc	r29, r31
    28f2:	40 f4       	brcc	.+16     	; 0x2904 <free+0x5a>
    28f4:	4a 81       	ldd	r20, Y+2	; 0x02
    28f6:	5b 81       	ldd	r21, Y+3	; 0x03
    28f8:	9e 01       	movw	r18, r28
    28fa:	41 15       	cp	r20, r1
    28fc:	51 05       	cpc	r21, r1
    28fe:	f1 f0       	breq	.+60     	; 0x293c <free+0x92>
    2900:	ea 01       	movw	r28, r20
    2902:	f5 cf       	rjmp	.-22     	; 0x28ee <free+0x44>
    2904:	d3 83       	std	Z+3, r29	; 0x03
    2906:	c2 83       	std	Z+2, r28	; 0x02
    2908:	40 81       	ld	r20, Z
    290a:	51 81       	ldd	r21, Z+1	; 0x01
    290c:	84 0f       	add	r24, r20
    290e:	95 1f       	adc	r25, r21
    2910:	c8 17       	cp	r28, r24
    2912:	d9 07       	cpc	r29, r25
    2914:	59 f4       	brne	.+22     	; 0x292c <free+0x82>
    2916:	88 81       	ld	r24, Y
    2918:	99 81       	ldd	r25, Y+1	; 0x01
    291a:	84 0f       	add	r24, r20
    291c:	95 1f       	adc	r25, r21
    291e:	02 96       	adiw	r24, 0x02	; 2
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	80 83       	st	Z, r24
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	9b 81       	ldd	r25, Y+3	; 0x03
    2928:	93 83       	std	Z+3, r25	; 0x03
    292a:	82 83       	std	Z+2, r24	; 0x02
    292c:	21 15       	cp	r18, r1
    292e:	31 05       	cpc	r19, r1
    2930:	29 f4       	brne	.+10     	; 0x293c <free+0x92>
    2932:	f0 93 5d 03 	sts	0x035D, r31	; 0x80035d <__flp+0x1>
    2936:	e0 93 5c 03 	sts	0x035C, r30	; 0x80035c <__flp>
    293a:	3d c0       	rjmp	.+122    	; 0x29b6 <free+0x10c>
    293c:	e9 01       	movw	r28, r18
    293e:	fb 83       	std	Y+3, r31	; 0x03
    2940:	ea 83       	std	Y+2, r30	; 0x02
    2942:	49 91       	ld	r20, Y+
    2944:	59 91       	ld	r21, Y+
    2946:	c4 0f       	add	r28, r20
    2948:	d5 1f       	adc	r29, r21
    294a:	ec 17       	cp	r30, r28
    294c:	fd 07       	cpc	r31, r29
    294e:	61 f4       	brne	.+24     	; 0x2968 <free+0xbe>
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	84 0f       	add	r24, r20
    2956:	95 1f       	adc	r25, r21
    2958:	02 96       	adiw	r24, 0x02	; 2
    295a:	e9 01       	movw	r28, r18
    295c:	99 83       	std	Y+1, r25	; 0x01
    295e:	88 83       	st	Y, r24
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	9b 83       	std	Y+3, r25	; 0x03
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	e0 e0       	ldi	r30, 0x00	; 0
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	12 96       	adiw	r26, 0x02	; 2
    296e:	8d 91       	ld	r24, X+
    2970:	9c 91       	ld	r25, X
    2972:	13 97       	sbiw	r26, 0x03	; 3
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	19 f0       	breq	.+6      	; 0x297e <free+0xd4>
    2978:	fd 01       	movw	r30, r26
    297a:	dc 01       	movw	r26, r24
    297c:	f7 cf       	rjmp	.-18     	; 0x296c <free+0xc2>
    297e:	8d 91       	ld	r24, X+
    2980:	9c 91       	ld	r25, X
    2982:	11 97       	sbiw	r26, 0x01	; 1
    2984:	9d 01       	movw	r18, r26
    2986:	2e 5f       	subi	r18, 0xFE	; 254
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
    298a:	82 0f       	add	r24, r18
    298c:	93 1f       	adc	r25, r19
    298e:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <__brkval>
    2992:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <__brkval+0x1>
    2996:	28 17       	cp	r18, r24
    2998:	39 07       	cpc	r19, r25
    299a:	69 f4       	brne	.+26     	; 0x29b6 <free+0x10c>
    299c:	30 97       	sbiw	r30, 0x00	; 0
    299e:	29 f4       	brne	.+10     	; 0x29aa <free+0x100>
    29a0:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <__flp+0x1>
    29a4:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <__flp>
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <free+0x104>
    29aa:	13 82       	std	Z+3, r1	; 0x03
    29ac:	12 82       	std	Z+2, r1	; 0x02
    29ae:	b0 93 5b 03 	sts	0x035B, r27	; 0x80035b <__brkval+0x1>
    29b2:	a0 93 5a 03 	sts	0x035A, r26	; 0x80035a <__brkval>
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <abort>:
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	f8 94       	cli
    29c2:	07 c0       	rjmp	.+14     	; 0x29d2 <_exit>

000029c4 <memset>:
    29c4:	dc 01       	movw	r26, r24
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <memset+0x6>
    29c8:	6d 93       	st	X+, r22
    29ca:	41 50       	subi	r20, 0x01	; 1
    29cc:	50 40       	sbci	r21, 0x00	; 0
    29ce:	e0 f7       	brcc	.-8      	; 0x29c8 <memset+0x4>
    29d0:	08 95       	ret

000029d2 <_exit>:
    29d2:	f8 94       	cli

000029d4 <__stop_program>:
    29d4:	ff cf       	rjmp	.-2      	; 0x29d4 <__stop_program>
