
LedController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000454  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800102  00800102  000004ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000432  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e5  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ba  00000000  00000000  00000bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fe  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018e  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__vector_16>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	25 01       	movw	r4, r10
  8e:	2a 01       	movw	r4, r20
  90:	2f 01       	movw	r4, r30
  92:	34 01       	movw	r6, r8
  94:	39 01       	movw	r6, r18
  96:	3e 01       	movw	r6, r28
  98:	43 01       	movw	r8, r6
  9a:	48 01       	movw	r8, r16
  9c:	4d 01       	movw	r8, r26
  9e:	52 01       	movw	r10, r4
  a0:	57 01       	movw	r10, r14
  a2:	5c 01       	movw	r10, r24
  a4:	61 01       	movw	r12, r2
  a6:	66 01       	movw	r12, r12
  a8:	6d 01       	movw	r12, r26
  aa:	72 01       	movw	r14, r4

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e5       	ldi	r30, 0x54	; 84
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a2 30       	cpi	r26, 0x02	; 2
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a2 e0       	ldi	r26, 0x02	; 2
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a7 31       	cpi	r26, 0x17	; 23
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	96 d1       	rcall	.+812    	; 0x410 <main>
  e4:	b5 c1       	rjmp	.+874    	; 0x450 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <__vector_16>:
#define in7 6
static unsigned int Dot_char_cnt=0; //도트매트릭스에 표시 될 문자 카운팅!
//Timer 0 overflow interrupt service routine
//interrupt [TIM0_OVF] void timer0_ovf_isr(void)
ISR(TIMER0_OVF_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	static unsigned int toggle_cnt=0;
	static unsigned int cnt=0;
	cnt++;
  f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ11__vector_16E3cnt>
  fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ11__vector_16E3cnt+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
	if(cnt==500)
 102:	84 3f       	cpi	r24, 0xF4	; 244
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	92 07       	cpc	r25, r18
 108:	29 f0       	breq	.+10     	; 0x114 <__vector_16+0x2c>
//interrupt [TIM0_OVF] void timer0_ovf_isr(void)
ISR(TIMER0_OVF_vect)
{
	static unsigned int toggle_cnt=0;
	static unsigned int cnt=0;
	cnt++;
 10a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ11__vector_16E3cnt+0x1>
 10e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ11__vector_16E3cnt>
 112:	04 c0       	rjmp	.+8      	; 0x11c <__vector_16+0x34>
	if(cnt==500)
	{
		cnt=0;
 114:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ11__vector_16E3cnt+0x1>
 118:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ11__vector_16E3cnt>
	}
	if(toggle_char){
 11c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <toggle_char>
 120:	88 23       	and	r24, r24
 122:	d1 f0       	breq	.+52     	; 0x158 <__vector_16+0x70>
		toggle_cnt++;
 124:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZZ11__vector_16E10toggle_cnt>
 128:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZZ11__vector_16E10toggle_cnt+0x1>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ11__vector_16E10toggle_cnt+0x1>
 132:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ11__vector_16E10toggle_cnt>
		if(toggle_cnt>1000)
 136:	89 3e       	cpi	r24, 0xE9	; 233
 138:	93 40       	sbci	r25, 0x03	; 3
 13a:	70 f0       	brcs	.+28     	; 0x158 <__vector_16+0x70>
		{
			toggle_char=0;
 13c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <toggle_char>
			toggle_cnt=0;
 140:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZZ11__vector_16E10toggle_cnt+0x1>
 144:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_ZZ11__vector_16E10toggle_cnt>
			toggle_flag^=1;
 148:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <toggle_flag>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 27       	eor	r24, r25
 150:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <toggle_flag>
			move_motion=0;
 154:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <move_motion>
			
		}
	}
	key_input=PINC&0x0f;
 158:	83 b3       	in	r24, 0x13	; 19
 15a:	8f 70       	andi	r24, 0x0F	; 15
 15c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <key_input>
	str_speed_cnt++;
 160:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZL13str_speed_cnt>
 164:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_ZL13str_speed_cnt+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
	if(str_speed_cnt>string_moving_speed_value) //문자가 500초 머문 후 시프트 시작!
 16a:	83 33       	cpi	r24, 0x33	; 51
 16c:	91 05       	cpc	r25, r1
 16e:	28 f4       	brcc	.+10     	; 0x17a <__vector_16+0x92>
			move_motion=0;
			
		}
	}
	key_input=PINC&0x0f;
	str_speed_cnt++;
 170:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_ZL13str_speed_cnt+0x1>
 174:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZL13str_speed_cnt>
 178:	52 c0       	rjmp	.+164    	; 0x21e <__vector_16+0x136>
	if(str_speed_cnt>string_moving_speed_value) //문자가 500초 머문 후 시프트 시작!
	{
		
		str_speed_cnt=0; //string moving speed counter
 17a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <_ZL13str_speed_cnt+0x1>
 17e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZL13str_speed_cnt>
		Move_cnt--;
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Move_cnt>
 186:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Move_cnt+0x1>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Move_cnt+0x1>
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Move_cnt>
		Move_cnt2++;
 194:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Move_cnt2>
 198:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Move_cnt2+0x1>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Move_cnt2+0x1>
 1a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Move_cnt2>
		up_cnt++; //문자 위아래 이동 속도 카운트
 1a6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <up_cnt>
 1aa:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <up_cnt+0x1>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <up_cnt+0x1>
 1b4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <up_cnt>
		if(Move_cnt==0||Move_cnt2==15)
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Move_cnt>
 1bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Move_cnt+0x1>
 1c0:	89 2b       	or	r24, r25
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <__vector_16+0xe8>
 1c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Move_cnt2>
 1c8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Move_cnt2+0x1>
 1cc:	0f 97       	sbiw	r24, 0x0f	; 15
 1ce:	39 f5       	brne	.+78     	; 0x21e <__vector_16+0x136>
		{
			Move_cnt2=0;
 1d0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Move_cnt2+0x1>
 1d4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Move_cnt2>
			Move_cnt=15;
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Move_cnt+0x1>
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Move_cnt>
			move_motion++; //문자 진입 상태 버퍼
 1e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <move_motion>
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
			if(move_motion==2)
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <__vector_16+0x10c>
		up_cnt++; //문자 위아래 이동 속도 카운트
		if(Move_cnt==0||Move_cnt2==15)
		{
			Move_cnt2=0;
			Move_cnt=15;
			move_motion++; //문자 진입 상태 버퍼
 1ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <move_motion>
 1f2:	15 c0       	rjmp	.+42     	; 0x21e <__vector_16+0x136>
			if(move_motion==2)
			{
				move_motion=0;
 1f4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <move_motion>
				Dot_char_cnt++;
 1f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZL12Dot_char_cnt>
 1fc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZL12Dot_char_cnt+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZL12Dot_char_cnt+0x1>
 206:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL12Dot_char_cnt>
				flag_cnt++;
 20a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <flag_cnt>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
				if(flag_cnt==3)
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	19 f0       	breq	.+6      	; 0x21a <__vector_16+0x132>
			move_motion++; //문자 진입 상태 버퍼
			if(move_motion==2)
			{
				move_motion=0;
				Dot_char_cnt++;
				flag_cnt++;
 214:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <flag_cnt>
 218:	02 c0       	rjmp	.+4      	; 0x21e <__vector_16+0x136>
				if(flag_cnt==3)
				{
					flag_cnt=0;
 21a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <flag_cnt>
				}
			}
		}

	}
	TCNT0|=0x06;
 21e:	82 b7       	in	r24, 0x32	; 50
 220:	86 60       	ori	r24, 0x06	; 6
 222:	82 bf       	out	0x32, r24	; 50
}
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <_Z11row_dynamicv>:
void row_dynamic()
{
	static unsigned int str_cnt=0;

	switch(str_cnt)//ROW SHIFT!
 234:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <_ZZ11row_dynamicvE7str_cnt>
 238:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <_ZZ11row_dynamicvE7str_cnt+0x1>
 23c:	e0 31       	cpi	r30, 0x10	; 16
 23e:	f1 05       	cpc	r31, r1
 240:	08 f0       	brcs	.+2      	; 0x244 <_Z11row_dynamicv+0x10>
 242:	54 c0       	rjmp	.+168    	; 0x2ec <_Z11row_dynamicv+0xb8>
 244:	ea 5b       	subi	r30, 0xBA	; 186
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	fa c0       	rjmp	.+500    	; 0x43e <__tablejump2__>
	{
		case 0:PORTD &= ~(1<<A0);PORTD &= ~(1<<A1);PORTD &= ~(1<<A2);PORTD &= ~(1<<A3);break;//case 0:A0=0; A1=0; A2=0; A3=0;break;
 24a:	90 98       	cbi	0x12, 0	; 18
 24c:	91 98       	cbi	0x12, 1	; 18
 24e:	92 98       	cbi	0x12, 2	; 18
 250:	93 98       	cbi	0x12, 3	; 18
 252:	4c c0       	rjmp	.+152    	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 1:PORTD |= (1<<A0); PORTD &= ~(1<<A1);PORTD &= ~(1<<A2);PORTD &= ~(1<<A3);break;//case 1:A0=1; A1=0; A2=0; A3=0; break;
 254:	90 9a       	sbi	0x12, 0	; 18
 256:	91 98       	cbi	0x12, 1	; 18
 258:	92 98       	cbi	0x12, 2	; 18
 25a:	93 98       	cbi	0x12, 3	; 18
 25c:	47 c0       	rjmp	.+142    	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 2:PORTD &= ~(1<<A0);PORTD |= (1<<A1); PORTD &= ~(1<<A2);PORTD &= ~(1<<A3);break;//case 2:A0=0; A1=1; A2=0; A3=0; break;
 25e:	90 98       	cbi	0x12, 0	; 18
 260:	91 9a       	sbi	0x12, 1	; 18
 262:	92 98       	cbi	0x12, 2	; 18
 264:	93 98       	cbi	0x12, 3	; 18
 266:	42 c0       	rjmp	.+132    	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 3:PORTD |= (1<<A0); PORTD |= (1<<A1); PORTD &= ~(1<<A2);PORTD &= ~(1<<A3);break;//case 3:A0=1; A1=1; A2=0; A3=0; break;
 268:	90 9a       	sbi	0x12, 0	; 18
 26a:	91 9a       	sbi	0x12, 1	; 18
 26c:	92 98       	cbi	0x12, 2	; 18
 26e:	93 98       	cbi	0x12, 3	; 18
 270:	3d c0       	rjmp	.+122    	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 4:PORTD &= ~(1<<A0);PORTD &= ~(1<<A1);PORTD |=  (1<<A2);PORTD &= ~(1<<A3);break;//case 4:A0=0; A1=0; A2=1; A3=0; break;
 272:	90 98       	cbi	0x12, 0	; 18
 274:	91 98       	cbi	0x12, 1	; 18
 276:	92 9a       	sbi	0x12, 2	; 18
 278:	93 98       	cbi	0x12, 3	; 18
 27a:	38 c0       	rjmp	.+112    	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 5:PORTD |=  (1<<A0);PORTD &= ~(1<<A1);PORTD |=  (1<<A2);PORTD &= ~(1<<A3);break;//case 5:A0=1; A1=0; A2=1; A3=0; break;
 27c:	90 9a       	sbi	0x12, 0	; 18
 27e:	91 98       	cbi	0x12, 1	; 18
 280:	92 9a       	sbi	0x12, 2	; 18
 282:	93 98       	cbi	0x12, 3	; 18
 284:	33 c0       	rjmp	.+102    	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 6:PORTD &= ~(1<<A0);PORTD |=  (1<<A1);PORTD |=  (1<<A2);PORTD &= ~(1<<A3);break;//case 6:A0=0; A1=1; A2=1; A3=0; break;
 286:	90 98       	cbi	0x12, 0	; 18
 288:	91 9a       	sbi	0x12, 1	; 18
 28a:	92 9a       	sbi	0x12, 2	; 18
 28c:	93 98       	cbi	0x12, 3	; 18
 28e:	2e c0       	rjmp	.+92     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 7:PORTD |=  (1<<A0);PORTD |=  (1<<A1);PORTD |=  (1<<A2);PORTD &= ~(1<<A3);break;//case 7:A0=1; A1=1; A2=1; A3=0; break;
 290:	90 9a       	sbi	0x12, 0	; 18
 292:	91 9a       	sbi	0x12, 1	; 18
 294:	92 9a       	sbi	0x12, 2	; 18
 296:	93 98       	cbi	0x12, 3	; 18
 298:	29 c0       	rjmp	.+82     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 8:PORTD &= ~(1<<A0);PORTD &= ~(1<<A1);PORTD &= ~(1<<A2);PORTD |=  (1<<A3);break;//case 8:A0=0; A1=0; A2=0; A3=1; break;
 29a:	90 98       	cbi	0x12, 0	; 18
 29c:	91 98       	cbi	0x12, 1	; 18
 29e:	92 98       	cbi	0x12, 2	; 18
 2a0:	93 9a       	sbi	0x12, 3	; 18
 2a2:	24 c0       	rjmp	.+72     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 9:PORTD |=  (1<<A0);PORTD &= ~(1<<A1);PORTD &= ~(1<<A2);PORTD |=  (1<<A3);break;//case 9:A0=1; A1=0; A2=0; A3=1; break;
 2a4:	90 9a       	sbi	0x12, 0	; 18
 2a6:	91 98       	cbi	0x12, 1	; 18
 2a8:	92 98       	cbi	0x12, 2	; 18
 2aa:	93 9a       	sbi	0x12, 3	; 18
 2ac:	1f c0       	rjmp	.+62     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 10:PORTD &= ~(1<<A0);PORTD |=  (1<<A1);PORTD &= ~(1<<A2);PORTD |=  (1<<A3);break;//case 10:A0=0; A1=1; A2=0; A3=1; break;
 2ae:	90 98       	cbi	0x12, 0	; 18
 2b0:	91 9a       	sbi	0x12, 1	; 18
 2b2:	92 98       	cbi	0x12, 2	; 18
 2b4:	93 9a       	sbi	0x12, 3	; 18
 2b6:	1a c0       	rjmp	.+52     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 11:PORTD |=  (1<<A0);PORTD |=  (1<<A1);PORTD &= ~(1<<A2);PORTD |=  (1<<A3);break;//case 11:A0=1; A1=1; A2=0; A3=1; break;
 2b8:	90 9a       	sbi	0x12, 0	; 18
 2ba:	91 9a       	sbi	0x12, 1	; 18
 2bc:	92 98       	cbi	0x12, 2	; 18
 2be:	93 9a       	sbi	0x12, 3	; 18
 2c0:	15 c0       	rjmp	.+42     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 12:PORTD &= ~(1<<A0);PORTD &= ~(1<<A1);PORTD |=  (1<<A2);PORTD |=  (1<<A3);break;//case 12:A0=0; A1=0; A2=1; A3=1; break;
 2c2:	90 98       	cbi	0x12, 0	; 18
 2c4:	91 98       	cbi	0x12, 1	; 18
 2c6:	92 9a       	sbi	0x12, 2	; 18
 2c8:	93 9a       	sbi	0x12, 3	; 18
 2ca:	10 c0       	rjmp	.+32     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 13:PORTD |= ~(1<<A0);PORTD &= ~(1<<A1);PORTD |=  (1<<A2);PORTD |=  (1<<A3);break;//case 13:A0=1; A1=0; A2=1; A3=1; break;
 2cc:	82 b3       	in	r24, 0x12	; 18
 2ce:	8e 6f       	ori	r24, 0xFE	; 254
 2d0:	82 bb       	out	0x12, r24	; 18
 2d2:	91 98       	cbi	0x12, 1	; 18
 2d4:	92 9a       	sbi	0x12, 2	; 18
 2d6:	93 9a       	sbi	0x12, 3	; 18
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 14:PORTD &= ~(1<<A0);PORTD |=  (1<<A1);PORTD |=  (1<<A2);PORTD |=  (1<<A3);break;//case 14:A0=0; A1=1; A2=1; A3=1; break;
 2da:	90 98       	cbi	0x12, 0	; 18
 2dc:	91 9a       	sbi	0x12, 1	; 18
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	93 9a       	sbi	0x12, 3	; 18
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <_Z11row_dynamicv+0xb8>
		case 15:PORTD |=  (1<<A0);PORTD |=  (1<<A1);PORTD |=  (1<<A2);PORTD |=  (1<<A3);break;//case 15:A0=1; A1=1; A2=1; A3=1; break;
 2e4:	90 9a       	sbi	0x12, 0	; 18
 2e6:	91 9a       	sbi	0x12, 1	; 18
 2e8:	92 9a       	sbi	0x12, 2	; 18
 2ea:	93 9a       	sbi	0x12, 3	; 18
	}
	
	++str_cnt;
 2ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_ZZ11row_dynamicvE7str_cnt>
 2f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_ZZ11row_dynamicvE7str_cnt+0x1>
 2f4:	01 96       	adiw	r24, 0x01	; 1
	if(str_cnt==16)
 2f6:	80 31       	cpi	r24, 0x10	; 16
 2f8:	91 05       	cpc	r25, r1
 2fa:	29 f0       	breq	.+10     	; 0x306 <_Z11row_dynamicv+0xd2>
		case 13:PORTD |= ~(1<<A0);PORTD &= ~(1<<A1);PORTD |=  (1<<A2);PORTD |=  (1<<A3);break;//case 13:A0=1; A1=0; A2=1; A3=1; break;
		case 14:PORTD &= ~(1<<A0);PORTD |=  (1<<A1);PORTD |=  (1<<A2);PORTD |=  (1<<A3);break;//case 14:A0=0; A1=1; A2=1; A3=1; break;
		case 15:PORTD |=  (1<<A0);PORTD |=  (1<<A1);PORTD |=  (1<<A2);PORTD |=  (1<<A3);break;//case 15:A0=1; A1=1; A2=1; A3=1; break;
	}
	
	++str_cnt;
 2fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZZ11row_dynamicvE7str_cnt+0x1>
 300:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZZ11row_dynamicvE7str_cnt>
 304:	08 95       	ret
	if(str_cnt==16)
	{
		str_cnt=0;
 306:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_ZZ11row_dynamicvE7str_cnt+0x1>
 30a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_ZZ11row_dynamicvE7str_cnt>
 30e:	08 95       	ret

00000310 <_Z12shift_Driverh>:
	}
}
void shift_Driver(unsigned char out)
{
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0

	unsigned char clk=0;
	for(clk=0;clk<8;clk++){ //8비트 데이터를 1비트씩 시프트레지스터에 입력
		if(out&(0x80>>clk))
 314:	e0 e8       	ldi	r30, 0x80	; 128
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	68 2f       	mov	r22, r24
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	af 01       	movw	r20, r30
 31e:	02 2e       	mov	r0, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <_Z12shift_Driverh+0x16>
 322:	55 95       	asr	r21
 324:	47 95       	ror	r20
 326:	0a 94       	dec	r0
 328:	e2 f7       	brpl	.-8      	; 0x322 <_Z12shift_Driverh+0x12>
 32a:	46 23       	and	r20, r22
 32c:	57 23       	and	r21, r23
 32e:	45 2b       	or	r20, r21
 330:	89 f0       	breq	.+34     	; 0x354 <_Z12shift_Driverh+0x44>
		{
			switch(flag_cnt) { // LED 색상 선택!
 332:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <flag_cnt>
 336:	91 30       	cpi	r25, 0x01	; 1
 338:	39 f0       	breq	.+14     	; 0x348 <_Z12shift_Driverh+0x38>
 33a:	18 f0       	brcs	.+6      	; 0x342 <_Z12shift_Driverh+0x32>
 33c:	92 30       	cpi	r25, 0x02	; 2
 33e:	39 f0       	breq	.+14     	; 0x34e <_Z12shift_Driverh+0x3e>
 340:	0b c0       	rjmp	.+22     	; 0x358 <_Z12shift_Driverh+0x48>
				case 0:PORTD &= ~(1<<Data_Green);PORTD |=  (1<<Data_Red); break;//case 0:Data_Green=0;Data_Red=1; break;
 342:	95 98       	cbi	0x12, 5	; 18
 344:	94 9a       	sbi	0x12, 4	; 18
 346:	08 c0       	rjmp	.+16     	; 0x358 <_Z12shift_Driverh+0x48>
				case 1:PORTD |=  (1<<Data_Green);PORTD &= ~(1<<Data_Red); break;//case 1:Data_Green=1;Data_Red=0; break;
 348:	95 9a       	sbi	0x12, 5	; 18
 34a:	94 98       	cbi	0x12, 4	; 18
 34c:	05 c0       	rjmp	.+10     	; 0x358 <_Z12shift_Driverh+0x48>
				case 2:PORTD &= ~(1<<Data_Green);PORTD &= ~(1<<Data_Red); break;//case 2:Data_Green=1;Data_Red=1; break;
 34e:	95 98       	cbi	0x12, 5	; 18
 350:	94 98       	cbi	0x12, 4	; 18
 352:	02 c0       	rjmp	.+4      	; 0x358 <_Z12shift_Driverh+0x48>
			}
		}
		else {
			PORTD &= ~(1<<Data_Green);//Data_Green=0;
 354:	95 98       	cbi	0x12, 5	; 18
			PORTD &= ~(1<<Data_Red);//Data_Red=0;
 356:	94 98       	cbi	0x12, 4	; 18
		}
		//PORTD |=  (1<<Data_Green);PORTD &= ~(1<<Data_Red);
		PORTD |= (1<<Clk);_delay_us(1);PORTD &= ~(1<<Clk);//Clk=1;_delay_us(1);Clk=0;
 358:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	00 00       	nop
 35c:	96 98       	cbi	0x12, 6	; 18
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
}
void shift_Driver(unsigned char out)
{

	unsigned char clk=0;
	for(clk=0;clk<8;clk++){ //8비트 데이터를 1비트씩 시프트레지스터에 입력
 362:	28 30       	cpi	r18, 0x08	; 8
 364:	31 05       	cpc	r19, r1
 366:	d1 f6       	brne	.-76     	; 0x31c <_Z12shift_Driverh+0xc>
			PORTD &= ~(1<<Data_Red);//Data_Red=0;
		}
		//PORTD |=  (1<<Data_Green);PORTD &= ~(1<<Data_Red);
		PORTD |= (1<<Clk);_delay_us(1);PORTD &= ~(1<<Clk);//Clk=1;_delay_us(1);Clk=0;
	}
}
 368:	08 95       	ret

0000036a <_Z11ActivePulsev>:

void ActivePulse()
{
	PORTD |= (1<<LE); _delay_us(1); PORTD &= ~(1<<LE);//LE=1; _delay_us(1); LE=0;// 래치 출력
 36a:	97 9a       	sbi	0x12, 7	; 18
 36c:	00 00       	nop
 36e:	97 98       	cbi	0x12, 7	; 18
	PORTB &= ~(1<<OE);//OE=0;
 370:	c0 98       	cbi	0x18, 0	; 24
 372:	86 ea       	ldi	r24, 0xA6	; 166
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <_Z11ActivePulsev+0xa>
 378:	00 c0       	rjmp	.+0      	; 0x37a <_Z11ActivePulsev+0x10>
 37a:	08 95       	ret

0000037c <_Z18dot1_display_shiftj>:
	_delay_us(500); // OUTPUT ENABLE
}

void dot1_display_shift(unsigned int first)
{
 37c:	cf 92       	push	r12
 37e:	df 92       	push	r13
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	c0 54       	subi	r28, 0x40	; 64
 390:	d1 09       	sbc	r29, r1
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
	static unsigned int i_cnt=0;
	register unsigned int buff[32]={0};
 39c:	fe 01       	movw	r30, r28
 39e:	31 96       	adiw	r30, 0x01	; 1
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	df 01       	movw	r26, r30
 3a4:	1d 92       	st	X+, r1
 3a6:	8a 95       	dec	r24
 3a8:	e9 f7       	brne	.-6      	; 0x3a4 <_Z18dot1_display_shiftj+0x28>
 3aa:	8f 01       	movw	r16, r30
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
		//{
			//
			//buff[i_cnt]=string[first][i_cnt]>>Move_cnt2; // 1st String Dot1 Out
		//}
		
		buff[i_cnt]=(uint16_t)(i_cnt | i_cnt << 8);//string[14][i_cnt];
 3b0:	38 2f       	mov	r19, r24
 3b2:	22 27       	eor	r18, r18
 3b4:	28 2b       	or	r18, r24
 3b6:	39 2b       	or	r19, r25
 3b8:	21 93       	st	Z+, r18
 3ba:	31 93       	st	Z+, r19
 3bc:	01 96       	adiw	r24, 0x01	; 1
	static unsigned int i_cnt=0;
	register unsigned int buff[32]={0};
	register unsigned char high=0;
	register unsigned char low=0;
	register unsigned int i=0;
	for(i_cnt=0;i_cnt<32;i_cnt++){ //문자가 오른쪽에서 중앙으로, 중앙에서  왼쪽으로 흘러감을 표현
 3be:	80 32       	cpi	r24, 0x20	; 32
 3c0:	91 05       	cpc	r25, r1
 3c2:	b1 f7       	brne	.-20     	; 0x3b0 <_Z18dot1_display_shiftj+0x34>
 3c4:	80 e2       	ldi	r24, 0x20	; 32
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 3cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 3d0:	6e 01       	movw	r12, r28
 3d2:	b1 e4       	ldi	r27, 0x41	; 65
 3d4:	cb 0e       	add	r12, r27
 3d6:	d1 1c       	adc	r13, r1
		
		buff[i_cnt]=(uint16_t)(i_cnt | i_cnt << 8);//string[14][i_cnt];
	}
	for(i=0;i<32;i++)
	{
		high=(buff[i]>>8);
 3d8:	f8 01       	movw	r30, r16
 3da:	80 81       	ld	r24, Z
 3dc:	f1 80       	ldd	r15, Z+1	; 0x01
 3de:	0e 5f       	subi	r16, 0xFE	; 254
 3e0:	1f 4f       	sbci	r17, 0xFF	; 255
		low =(buff[i]&0xff);
		shift_Driver(low);
 3e2:	96 df       	rcall	.-212    	; 0x310 <_Z12shift_Driverh>
		shift_Driver(high);
 3e4:	8f 2d       	mov	r24, r15
 3e6:	94 df       	rcall	.-216    	; 0x310 <_Z12shift_Driverh>
		row_dynamic();
 3e8:	25 df       	rcall	.-438    	; 0x234 <_Z11row_dynamicv>
		ActivePulse();
 3ea:	bf df       	rcall	.-130    	; 0x36a <_Z11ActivePulsev>
			//buff[i_cnt]=string[first][i_cnt]>>Move_cnt2; // 1st String Dot1 Out
		//}
		
		buff[i_cnt]=(uint16_t)(i_cnt | i_cnt << 8);//string[14][i_cnt];
	}
	for(i=0;i<32;i++)
 3ec:	0c 15       	cp	r16, r12
 3ee:	1d 05       	cpc	r17, r13
 3f0:	99 f7       	brne	.-26     	; 0x3d8 <_Z18dot1_display_shiftj+0x5c>
		shift_Driver(low);
		shift_Driver(high);
		row_dynamic();
		ActivePulse();
	}
}
 3f2:	c0 5c       	subi	r28, 0xC0	; 192
 3f4:	df 4f       	sbci	r29, 0xFF	; 255
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	df 90       	pop	r13
 40c:	cf 90       	pop	r12
 40e:	08 95       	ret

00000410 <main>:
int main(void)
{
DDRD=0xff;
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	81 bb       	out	0x11, r24	; 17
DDRB=0x01;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	87 bb       	out	0x17, r24	; 23

//TCCR0=0x04;
//TCNT0=0x06;
//TIMSK=0x01;
// Global enable interrupts
sei();
 418:	78 94       	sei
toggle_char=0;
 41a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <toggle_char>
while(1)
{
 dot1_display_shift(Dot_char_cnt);    
 41e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZL12Dot_char_cnt>
 422:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZL12Dot_char_cnt+0x1>
 426:	aa df       	rcall	.-172    	; 0x37c <_Z18dot1_display_shiftj>
 if(Dot_char_cnt==40)
 428:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZL12Dot_char_cnt>
 42c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZL12Dot_char_cnt+0x1>
 430:	88 97       	sbiw	r24, 0x28	; 40
 432:	a9 f7       	brne	.-22     	; 0x41e <main+0xe>
 Dot_char_cnt=0;
 434:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZL12Dot_char_cnt+0x1>
 438:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZL12Dot_char_cnt>
 43c:	f0 cf       	rjmp	.-32     	; 0x41e <main+0xe>

0000043e <__tablejump2__>:
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	00 24       	eor	r0, r0
 444:	00 1c       	adc	r0, r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	07 90       	elpm	r0, Z+
 44a:	f6 91       	elpm	r31, Z
 44c:	e0 2d       	mov	r30, r0
 44e:	09 94       	ijmp

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
