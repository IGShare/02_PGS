
IGS_USM_V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000089a  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800108  00800108  00000936  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b78  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000354  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083b  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007dc  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	55 c3       	rjmp	.+1706   	; 0x6ae <__vector_1>
   4:	bd c3       	rjmp	.+1914   	; 0x780 <__vector_2>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
   e:	3a c0       	rjmp	.+116    	; 0x84 <__bad_interrupt>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	04 c3       	rjmp	.+1544   	; 0x62a <__vector_16>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>
  26:	2e c0       	rjmp	.+92     	; 0x84 <__bad_interrupt>
  28:	2d c0       	rjmp	.+90     	; 0x84 <__bad_interrupt>
  2a:	2c c0       	rjmp	.+88     	; 0x84 <__bad_interrupt>
  2c:	2b c0       	rjmp	.+86     	; 0x84 <__bad_interrupt>
  2e:	2a c0       	rjmp	.+84     	; 0x84 <__bad_interrupt>
  30:	29 c0       	rjmp	.+82     	; 0x84 <__bad_interrupt>
  32:	28 c0       	rjmp	.+80     	; 0x84 <__bad_interrupt>
  34:	b3 c1       	rjmp	.+870    	; 0x39c <USMF_SensorOPMControl+0x28>
  36:	b5 c1       	rjmp	.+874    	; 0x3a2 <USMF_SensorOPMControl+0x2e>
  38:	b7 c1       	rjmp	.+878    	; 0x3a8 <USMF_SensorOPMControl+0x34>
  3a:	b9 c1       	rjmp	.+882    	; 0x3ae <USMF_SensorOPMControl+0x3a>
  3c:	ef c1       	rjmp	.+990    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
  3e:	ba c1       	rjmp	.+884    	; 0x3b4 <USMF_SensorOPMControl+0x40>
  40:	ed c1       	rjmp	.+986    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
  42:	ec c1       	rjmp	.+984    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
  44:	eb c1       	rjmp	.+982    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
  46:	c0 c1       	rjmp	.+896    	; 0x3c8 <USMF_SensorOPMControl+0x54>
  48:	db c1       	rjmp	.+950    	; 0x400 <__FUSE_REGION_LENGTH__>
  4a:	df c1       	rjmp	.+958    	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
  4c:	e3 c1       	rjmp	.+966    	; 0x414 <__FUSE_REGION_LENGTH__+0x14>

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ef       	ldi	r28, 0xFF	; 255
  54:	d2 e0       	ldi	r29, 0x02	; 2
  56:	de bf       	out	0x3e, r29	; 62
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	11 e0       	ldi	r17, 0x01	; 1
  5c:	a0 e0       	ldi	r26, 0x00	; 0
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	ea e9       	ldi	r30, 0x9A	; 154
  62:	f8 e0       	ldi	r31, 0x08	; 8
  64:	02 c0       	rjmp	.+4      	; 0x6a <__do_copy_data+0x10>
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a8 30       	cpi	r26, 0x08	; 8
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0xc>

00000070 <__do_clear_bss>:
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	a8 e0       	ldi	r26, 0x08	; 8
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a0 32       	cpi	r26, 0x20	; 32
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	f2 d1       	rcall	.+996    	; 0x466 <main>
  82:	09 c4       	rjmp	.+2066   	; 0x896 <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <USMF_PortInit>:
{
	if(cnt > ADCCntThreshold)
		return 1;
	else
		return 0;
}
  86:	14 b8       	out	0x04, r1	; 4
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	90 e3       	ldi	r25, 0x30	; 48
  8e:	9a b9       	out	0x0a, r25	; 10
  90:	15 b8       	out	0x05, r1	; 5
  92:	18 b8       	out	0x08, r1	; 8
  94:	1b b8       	out	0x0b, r1	; 11
  96:	88 b9       	out	0x08, r24	; 8
  98:	08 95       	ret

0000009a <USMF_ExternalInterruptInit>:
  9a:	e9 e6       	ldi	r30, 0x69	; 105
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
  ac:	80 81       	ld	r24, Z
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	80 83       	st	Z, r24
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	8d bb       	out	0x1d, r24	; 29
  b6:	08 95       	ret

000000b8 <USMF_TimerZeroInit>:
  b8:	14 bc       	out	0x24, r1	; 36
  ba:	15 bc       	out	0x25, r1	; 37
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
  c2:	16 bc       	out	0x26, r1	; 38
  c4:	08 95       	ret

000000c6 <USMF_StatusInit>:
  c6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <G_plcRxBitCnt>
  ca:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <MYPPNSR>
  ce:	e9 e1       	ldi	r30, 0x19	; 25
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	10 82       	st	Z, r1
  d4:	11 82       	std	Z+1, r1	; 0x01
  d6:	12 82       	std	Z+2, r1	; 0x02
  d8:	13 82       	std	Z+3, r1	; 0x03
  da:	14 82       	std	Z+4, r1	; 0x04
  dc:	15 82       	std	Z+5, r1	; 0x05
  de:	08 95       	ret

000000e0 <USMF_ReadSerialNumber>:
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	bf d3       	rcall	.+1918   	; 0x86a <eeprom_read_byte>
  ec:	08 2f       	mov	r16, r24
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	bb d3       	rcall	.+1910   	; 0x86a <eeprom_read_byte>
  f4:	c8 2f       	mov	r28, r24
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	b7 d3       	rcall	.+1902   	; 0x86a <eeprom_read_byte>
  fc:	40 2f       	mov	r20, r16
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	9a 01       	movw	r18, r20
 106:	11 27       	eor	r17, r17
 108:	00 27       	eor	r16, r16
 10a:	4c 2f       	mov	r20, r28
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	76 2f       	mov	r23, r22
 114:	65 2f       	mov	r22, r21
 116:	54 2f       	mov	r21, r20
 118:	44 27       	eor	r20, r20
 11a:	40 0f       	add	r20, r16
 11c:	51 1f       	adc	r21, r17
 11e:	62 1f       	adc	r22, r18
 120:	73 1f       	adc	r23, r19
 122:	8a 01       	movw	r16, r20
 124:	9b 01       	movw	r18, r22
 126:	08 0f       	add	r16, r24
 128:	11 1d       	adc	r17, r1
 12a:	21 1d       	adc	r18, r1
 12c:	31 1d       	adc	r19, r1
 12e:	c9 01       	movw	r24, r18
 130:	b8 01       	movw	r22, r16
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <ReadDefaultParmaFromEEPROM>:
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	95 d3       	rcall	.+1834   	; 0x86a <eeprom_read_byte>
 140:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <EPR_ID>
 144:	89 e0       	ldi	r24, 0x09	; 9
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 d3       	rcall	.+1824   	; 0x86a <eeprom_read_byte>
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	a4 ee       	ldi	r26, 0xE4	; 228
 150:	b2 e0       	ldi	r27, 0x02	; 2
 152:	7f d3       	rcall	.+1790   	; 0x852 <__umulhisi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	84 5a       	subi	r24, 0xA4	; 164
 15a:	94 4d       	sbci	r25, 0xD4	; 212
 15c:	af 4f       	sbci	r26, 0xFF	; 255
 15e:	bf 4f       	sbci	r27, 0xFF	; 255
 160:	68 94       	set
 162:	15 f8       	bld	r1, 5
 164:	b6 95       	lsr	r27
 166:	a7 95       	ror	r26
 168:	97 95       	ror	r25
 16a:	87 95       	ror	r24
 16c:	16 94       	lsr	r1
 16e:	d1 f7       	brne	.-12     	; 0x164 <ReadDefaultParmaFromEEPROM+0x2a>
 170:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <MaxSampleNum>
 174:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <MaxSampleNum+0x1>
 178:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <MaxSampleNum+0x2>
 17c:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <MaxSampleNum+0x3>
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	72 d3       	rcall	.+1764   	; 0x86a <eeprom_read_byte>
 186:	8e 5c       	subi	r24, 0xCE	; 206
 188:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCLevelThreshold>
 18c:	8b e0       	ldi	r24, 0x0B	; 11
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	6c d3       	rcall	.+1752   	; 0x86a <eeprom_read_byte>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCCntThreshold>
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	66 d3       	rcall	.+1740   	; 0x86a <eeprom_read_byte>
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <BurstCnt>
 1a4:	08 95       	ret

000001a6 <USMF_ADCInit>:
 1a6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ADCCNT+0x1>
 1aa:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ADCCNT>
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 1b4:	81 e8       	ldi	r24, 0x81	; 129
 1b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 1ba:	08 95       	ret

000001bc <USMF_TxPulsing>:
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	18 16       	cp	r1, r24
 1c0:	19 06       	cpc	r1, r25
 1c2:	8c f4       	brge	.+34     	; 0x1e6 <USMF_TxPulsing+0x2a>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e2       	ldi	r20, 0x20	; 32
 1ca:	4b b9       	out	0x0b, r20	; 11
 1cc:	53 e0       	ldi	r21, 0x03	; 3
 1ce:	5a 95       	dec	r21
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <USMF_TxPulsing+0x12>
 1d2:	00 00       	nop
 1d4:	1b b8       	out	0x0b, r1	; 11
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <USMF_TxPulsing+0x1c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <USMF_TxPulsing+0x1e>
 1da:	00 00       	nop
 1dc:	2f 5f       	subi	r18, 0xFF	; 255
 1de:	3f 4f       	sbci	r19, 0xFF	; 255
 1e0:	28 17       	cp	r18, r24
 1e2:	39 07       	cpc	r19, r25
 1e4:	91 f7       	brne	.-28     	; 0x1ca <USMF_TxPulsing+0xe>
 1e6:	08 95       	ret

000001e8 <USMF_PLC_TX>:
{
	uint8_t bitvalue;
	uint8_t mask = 0x01;
	uint8_t plcTxData=0;
	
	if(txmessage->mode == 1) // Sensing mode
 1e8:	fa 01       	movw	r30, r20
 1ea:	80 81       	ld	r24, Z
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	29 f4       	brne	.+10     	; 0x1fa <USMF_PLC_TX+0x12>
	{
		if(txmessage->sensor_status == 1)
 1f0:	81 81       	ldd	r24, Z+1	; 0x01
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	a1 f1       	breq	.+104    	; 0x25e <USMF_PLC_TX+0x76>
			plcTxData = IDX_OPM_SENS_LED_ON_RED;
		else
			plcTxData = IDX_OPM_SENS_LED_ON_GREEN;	
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	33 c0       	rjmp	.+102    	; 0x260 <USMF_PLC_TX+0x78>
	}
	else  // Sensor LED Control Mode
	{
		switch(rxmessage.OperationMode)
 1fa:	74 30       	cpi	r23, 0x04	; 4
 1fc:	61 f0       	breq	.+24     	; 0x216 <USMF_PLC_TX+0x2e>
 1fe:	18 f4       	brcc	.+6      	; 0x206 <USMF_PLC_TX+0x1e>
 200:	73 30       	cpi	r23, 0x03	; 3
 202:	31 f0       	breq	.+12     	; 0x210 <USMF_PLC_TX+0x28>
 204:	22 c0       	rjmp	.+68     	; 0x24a <USMF_PLC_TX+0x62>
 206:	75 30       	cpi	r23, 0x05	; 5
 208:	49 f0       	breq	.+18     	; 0x21c <USMF_PLC_TX+0x34>
 20a:	76 30       	cpi	r23, 0x06	; 6
 20c:	59 f0       	breq	.+22     	; 0x224 <USMF_PLC_TX+0x3c>
 20e:	1d c0       	rjmp	.+58     	; 0x24a <USMF_PLC_TX+0x62>
		{
			case IDX_OPM_FORC_LED_OFF : {
				PORTC = LED_GREEN_OFF;
 210:	18 b8       	out	0x08, r1	; 8
				plcTxData = IDX_OPM_FORC_LED_OFF;
 212:	83 e0       	ldi	r24, 0x03	; 3
				break;
 214:	1d c0       	rjmp	.+58     	; 0x250 <USMF_PLC_TX+0x68>
			}								
			case IDX_OPM_FORC_LED_ON_GREEN :{
				PORTC = LED_GREEN_ON;
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	88 b9       	out	0x08, r24	; 8
				plcTxData = IDX_OPM_FORC_LED_ON_GREEN;
				break;
 21a:	1a c0       	rjmp	.+52     	; 0x250 <USMF_PLC_TX+0x68>
			}
			case IDX_OPM_FORC_LED_ON_RED :{
				PORTC = LED_RED_ON;
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	88 b9       	out	0x08, r24	; 8
				plcTxData = IDX_OPM_FORC_LED_ON_RED;
 220:	85 e0       	ldi	r24, 0x05	; 5
				break;
 222:	16 c0       	rjmp	.+44     	; 0x250 <USMF_PLC_TX+0x68>
			}
			case IDX_OPM_FORC_LED_BLINKING :{
				if(LEDStatus==0)
 224:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <LEDStatus>
 228:	81 11       	cpse	r24, r1
 22a:	07 c0       	rjmp	.+14     	; 0x23a <USMF_PLC_TX+0x52>
				{
					PORTC = LED_GREEN_ON;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	88 b9       	out	0x08, r24	; 8
					LEDStatus = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <LEDStatus>
				else if(LEDStatus==1)
				{
					PORTC = LED_RED_ON;
					LEDStatus = 0;
				}
				plcTxData = IDX_OPM_FORC_LED_BLINKING;		
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	0b c0       	rjmp	.+22     	; 0x250 <USMF_PLC_TX+0x68>
				if(LEDStatus==0)
				{
					PORTC = LED_GREEN_ON;
					LEDStatus = 1;
				}
				else if(LEDStatus==1)
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	41 f4       	brne	.+16     	; 0x24e <USMF_PLC_TX+0x66>
				{
					PORTC = LED_RED_ON;
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	88 b9       	out	0x08, r24	; 8
					LEDStatus = 0;
 242:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <LEDStatus>
				}
				plcTxData = IDX_OPM_FORC_LED_BLINKING;		
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	03 c0       	rjmp	.+6      	; 0x250 <USMF_PLC_TX+0x68>

void USMF_PLC_TX(struct TypeOnePacket rxmessage, struct TxPacket *txmessage)
{
	uint8_t bitvalue;
	uint8_t mask = 0x01;
	uint8_t plcTxData=0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	01 c0       	rjmp	.+2      	; 0x250 <USMF_PLC_TX+0x68>
				else if(LEDStatus==1)
				{
					PORTC = LED_RED_ON;
					LEDStatus = 0;
				}
				plcTxData = IDX_OPM_FORC_LED_BLINKING;		
 24e:	86 e0       	ldi	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	e7 eb       	ldi	r30, 0xB7	; 183
 252:	fb e0       	ldi	r31, 0x0B	; 11
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <USMF_PLC_TX+0x6c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <USMF_PLC_TX+0x72>
 25a:	00 00       	nop
 25c:	01 c0       	rjmp	.+2      	; 0x260 <USMF_PLC_TX+0x78>
	uint8_t plcTxData=0;
	
	if(txmessage->mode == 1) // Sensing mode
	{
		if(txmessage->sensor_status == 1)
			plcTxData = IDX_OPM_SENS_LED_ON_RED;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	e9 ef       	ldi	r30, 0xF9	; 249
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <USMF_PLC_TX+0x7c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <USMF_PLC_TX+0x82>
 26a:	00 00       	nop
		_delay_ms(12);
	}
	
	_delay_ms(1);
	//Start Bit
	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,mask);
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	e3 ef       	ldi	r30, 0xF3	; 243
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <USMF_PLC_TX+0x8c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <USMF_PLC_TX+0x92>
 27a:	00 00       	nop

	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,plcTxData);
 27c:	98 2f       	mov	r25, r24
 27e:	91 70       	andi	r25, 0x01	; 1
 280:	99 0f       	add	r25, r25
 282:	9b b9       	out	0x0b, r25	; 11
 284:	e3 ef       	ldi	r30, 0xF3	; 243
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <USMF_PLC_TX+0xa0>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <USMF_PLC_TX+0xa6>
 28e:	00 00       	nop
	PLC_TX_ONE_BIT(1,PLC_TX_ONEBIT_TIME_US,plcTxData);
 290:	81 fb       	bst	r24, 1
 292:	99 27       	eor	r25, r25
 294:	90 f9       	bld	r25, 0
 296:	99 0f       	add	r25, r25
 298:	9b b9       	out	0x0b, r25	; 11
 29a:	e3 ef       	ldi	r30, 0xF3	; 243
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <USMF_PLC_TX+0xb6>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <USMF_PLC_TX+0xbc>
 2a4:	00 00       	nop
	PLC_TX_ONE_BIT(2,PLC_TX_ONEBIT_TIME_US,plcTxData);
 2a6:	86 95       	lsr	r24
 2a8:	86 95       	lsr	r24
 2aa:	88 0f       	add	r24, r24
 2ac:	8b b9       	out	0x0b, r24	; 11
 2ae:	83 ef       	ldi	r24, 0xF3	; 243
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <USMF_PLC_TX+0xca>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <USMF_PLC_TX+0xd0>
 2b8:	00 00       	nop
	
	PORTD = ONEBIT_ZERO;
 2ba:	1b b8       	out	0x0b, r1	; 11
 2bc:	08 95       	ret

000002be <USMF_SensingFunction>:
}

uint8_t USMF_SensingFunction()
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
	uint32_t i;
	uint32_t ADCDATA;
	
	USMF_TxPulsing(BurstCnt);
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <BurstCnt>
 2c6:	7a df       	rcall	.-268    	; 0x1bc <USMF_TxPulsing>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	83 ef       	ldi	r24, 0xF3	; 243
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <USMF_SensingFunction+0xe>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <USMF_SensingFunction+0x14>
 2d2:	00 00       	nop
	_delay_ms(2);
	
	for( i=0; i<MaxSampleNum; i++)
 2d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <MaxSampleNum>
 2d8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <MaxSampleNum+0x1>
 2dc:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <MaxSampleNum+0x2>
 2e0:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <MaxSampleNum+0x3>
 2e4:	89 2b       	or	r24, r25
 2e6:	8a 2b       	or	r24, r26
 2e8:	8b 2b       	or	r24, r27
 2ea:	51 f1       	breq	.+84     	; 0x340 <__stack+0x41>
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	ba 01       	movw	r22, r20
	{
		ADCSRA |= (1<<ADSC);
 2f2:	ea e7       	ldi	r30, 0x7A	; 122
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA & (1<<ADSC)) == 1);
		ADCDATA = ADCH;
 2f6:	c9 e7       	ldi	r28, 0x79	; 121
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
	USMF_TxPulsing(BurstCnt);
	_delay_ms(2);
	
	for( i=0; i<MaxSampleNum; i++)
	{
		ADCSRA |= (1<<ADSC);
 2fa:	80 81       	ld	r24, Z
 2fc:	80 64       	ori	r24, 0x40	; 64
 2fe:	80 83       	st	Z, r24
		while((ADCSRA & (1<<ADSC)) == 1);
 300:	80 81       	ld	r24, Z
		ADCDATA = ADCH;
 302:	98 81       	ld	r25, Y
		{
			if(ADCDATA>ADCLevelThreshold)
 304:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADCLevelThreshold>
 308:	89 17       	cp	r24, r25
 30a:	48 f4       	brcc	.+18     	; 0x31e <__stack+0x1f>
				ADCCNT ++;
 30c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ADCCNT>
 310:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ADCCNT+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ADCCNT+0x1>
 31a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ADCCNT>
	uint32_t ADCDATA;
	
	USMF_TxPulsing(BurstCnt);
	_delay_ms(2);
	
	for( i=0; i<MaxSampleNum; i++)
 31e:	4f 5f       	subi	r20, 0xFF	; 255
 320:	5f 4f       	sbci	r21, 0xFF	; 255
 322:	6f 4f       	sbci	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <MaxSampleNum>
 32a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <MaxSampleNum+0x1>
 32e:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <MaxSampleNum+0x2>
 332:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <MaxSampleNum+0x3>
 336:	48 17       	cp	r20, r24
 338:	59 07       	cpc	r21, r25
 33a:	6a 07       	cpc	r22, r26
 33c:	7b 07       	cpc	r23, r27
 33e:	e8 f2       	brcs	.-70     	; 0x2fa <USMF_SensingFunction+0x3c>
	}
}

uint8_t USMF_StatusOfParkingLotFromCount(uint8_t cnt)
{
	if(cnt > ADCCntThreshold)
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <ADCCNT>
 346:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ADCCntThreshold>
 34a:	92 17       	cp	r25, r18
 34c:	08 f0       	brcs	.+2      	; 0x350 <__stack+0x51>
 34e:	80 e0       	ldi	r24, 0x00	; 0
		{
			if(ADCDATA>ADCLevelThreshold)
				ADCCNT ++;
		}					
	}
	ParkingFlag = USMF_StatusOfParkingLotFromCount(ADCCNT);
 350:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ParkingFlag>
	
		
	if(ParkingFlag == 1)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	19 f4       	brne	.+6      	; 0x35e <__stack+0x5f>
		PORTC = LED_RED_ON;
 358:	88 e0       	ldi	r24, 0x08	; 8
 35a:	88 b9       	out	0x08, r24	; 8
 35c:	02 c0       	rjmp	.+4      	; 0x362 <__stack+0x63>
	else
		PORTC = LED_GREEN_ON;
 35e:	84 e0       	ldi	r24, 0x04	; 4
 360:	88 b9       	out	0x08, r24	; 8
		
	ADCCNT = 0;
 362:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ADCCNT+0x1>
 366:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ADCCNT>
	return ParkingFlag;
}
 36a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <ParkingFlag>
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <USMF_SensorOPMControl>:


void USMF_SensorOPMControl(struct TypeOnePacket rxmessage, struct TxPacket *txmessage)
{
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29

	switch(rxmessage.OperationMode)
 37e:	07 2f       	mov	r16, r23
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	f8 01       	movw	r30, r16
 384:	33 97       	sbiw	r30, 0x03	; 3
 386:	ed 30       	cpi	r30, 0x0D	; 13
 388:	f1 05       	cpc	r31, r1
 38a:	08 f0       	brcs	.+2      	; 0x38e <USMF_SensorOPMControl+0x1a>
 38c:	47 c0       	rjmp	.+142    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 38e:	ea 01       	movw	r28, r20
 390:	18 2f       	mov	r17, r24
 392:	07 2f       	mov	r16, r23
 394:	f6 2e       	mov	r15, r22
 396:	e6 5e       	subi	r30, 0xE6	; 230
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	09 94       	ijmp
	{
		case IDX_OPM_FORC_LED_OFF : {
			txmessage->mode = 0;
 39c:	18 82       	st	Y, r1
			USMF_PLC_TX(rxmessage, txmessage);
 39e:	24 df       	rcall	.-440    	; 0x1e8 <USMF_PLC_TX>
			break;
 3a0:	3d c0       	rjmp	.+122    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}								
		case IDX_OPM_FORC_LED_ON_GREEN :{
			txmessage->mode = 0;
 3a2:	18 82       	st	Y, r1
			USMF_PLC_TX(rxmessage, txmessage);
 3a4:	21 df       	rcall	.-446    	; 0x1e8 <USMF_PLC_TX>
			break;
 3a6:	3a c0       	rjmp	.+116    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}
		case IDX_OPM_FORC_LED_ON_RED :{
			txmessage->mode = 0;
 3a8:	18 82       	st	Y, r1
			USMF_PLC_TX(rxmessage, txmessage);						
 3aa:	1e df       	rcall	.-452    	; 0x1e8 <USMF_PLC_TX>
			break;	
 3ac:	37 c0       	rjmp	.+110    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}
		case IDX_OPM_FORC_LED_BLINKING :{
			txmessage->mode = 0;
 3ae:	18 82       	st	Y, r1
			USMF_PLC_TX(rxmessage, txmessage);						
 3b0:	1b df       	rcall	.-458    	; 0x1e8 <USMF_PLC_TX>
			break;	
 3b2:	34 c0       	rjmp	.+104    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}
		case IDX_OPM_SENSING_ON :{
	
			txmessage->mode = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	88 83       	st	Y, r24
			txmessage->sensor_status=USMF_SensingFunction();
 3b8:	82 df       	rcall	.-252    	; 0x2be <USMF_SensingFunction>
 3ba:	89 83       	std	Y+1, r24	; 0x01
			
			USMF_PLC_TX(rxmessage, txmessage);
 3bc:	ae 01       	movw	r20, r28
 3be:	6f 2d       	mov	r22, r15
 3c0:	70 2f       	mov	r23, r16
 3c2:	81 2f       	mov	r24, r17
 3c4:	11 df       	rcall	.-478    	; 0x1e8 <USMF_PLC_TX>
			break;
 3c6:	2a c0       	rjmp	.+84     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}
		case IDX_OPM_PARAM_SETTING_PARAM1 :{
			MaxSampleNum = (uint32_t)rxmessage.data;
			MaxSampleNum = ((MaxSampleNum * 10 + 150 ) * 74) >> 6; // 0.86 = 64/74 (근사값)
 3c8:	28 2f       	mov	r18, r24
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	a4 ee       	ldi	r26, 0xE4	; 228
 3ce:	b2 e0       	ldi	r27, 0x02	; 2
 3d0:	40 d2       	rcall	.+1152   	; 0x852 <__umulhisi3>
 3d2:	dc 01       	movw	r26, r24
 3d4:	cb 01       	movw	r24, r22
 3d6:	84 5a       	subi	r24, 0xA4	; 164
 3d8:	94 4d       	sbci	r25, 0xD4	; 212
 3da:	af 4f       	sbci	r26, 0xFF	; 255
 3dc:	bf 4f       	sbci	r27, 0xFF	; 255
 3de:	68 94       	set
 3e0:	15 f8       	bld	r1, 5
 3e2:	b6 95       	lsr	r27
 3e4:	a7 95       	ror	r26
 3e6:	97 95       	ror	r25
 3e8:	87 95       	ror	r24
 3ea:	16 94       	lsr	r1
 3ec:	d1 f7       	brne	.-12     	; 0x3e2 <USMF_SensorOPMControl+0x6e>
 3ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <MaxSampleNum>
 3f2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <MaxSampleNum+0x1>
 3f6:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <MaxSampleNum+0x2>
 3fa:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <MaxSampleNum+0x3>
			break;
 3fe:	0e c0       	rjmp	.+28     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}
		case IDX_OPM_PARAM_SETTING_PARAM2 :{
			ADCLevelThreshold = rxmessage.data+50;
 400:	22 e3       	ldi	r18, 0x32	; 50
 402:	28 0f       	add	r18, r24
 404:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ADCLevelThreshold>
			break;
 408:	09 c0       	rjmp	.+18     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}
		case IDX_OPM_PARAM_SETTING_PARAM3 :{
			ADCCntThreshold = rxmessage.data+1;
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	28 0f       	add	r18, r24
 40e:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ADCCntThreshold>
			break;
 412:	04 c0       	rjmp	.+8      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		}
		case IDX_OPM_PARAM_SETTING_PARAM4 :{
			BurstCnt = rxmessage.data+1;
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	28 0f       	add	r18, r24
 418:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <BurstCnt>
			break;
					
		}
	}
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	08 95       	ret

00000428 <USMF_SetControlIDCompleteResponse>:
	uint8_t bitvalue=0;
	uint8_t mask = 0x01;
	uint8_t plcTxData=IDX_OPM_SET_ID_COMPLETE;
	
	//Start Bit
	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,mask);
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	e3 ef       	ldi	r30, 0xF3	; 243
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <USMF_SetControlIDCompleteResponse+0x8>
 434:	00 c0       	rjmp	.+0      	; 0x436 <USMF_SetControlIDCompleteResponse+0xe>
 436:	00 00       	nop

	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,plcTxData);
 438:	8b b9       	out	0x0b, r24	; 11
 43a:	e3 ef       	ldi	r30, 0xF3	; 243
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <USMF_SetControlIDCompleteResponse+0x16>
 442:	00 c0       	rjmp	.+0      	; 0x444 <USMF_SetControlIDCompleteResponse+0x1c>
 444:	00 00       	nop
	PLC_TX_ONE_BIT(1,PLC_TX_ONEBIT_TIME_US,plcTxData);
 446:	8b b9       	out	0x0b, r24	; 11
 448:	e3 ef       	ldi	r30, 0xF3	; 243
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <USMF_SetControlIDCompleteResponse+0x24>
 450:	00 c0       	rjmp	.+0      	; 0x452 <USMF_SetControlIDCompleteResponse+0x2a>
 452:	00 00       	nop
	PLC_TX_ONE_BIT(2,PLC_TX_ONEBIT_TIME_US,plcTxData);
 454:	8b b9       	out	0x0b, r24	; 11
 456:	83 ef       	ldi	r24, 0xF3	; 243
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <USMF_SetControlIDCompleteResponse+0x32>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <USMF_SetControlIDCompleteResponse+0x38>
 460:	00 00       	nop
	
	PORTD = ONEBIT_ZERO;
 462:	1b b8       	out	0x0b, r1	; 11
 464:	08 95       	ret

00000466 <main>:
#include "IGS_USM_Define.h"
#include "IGS_USM_Global.h"
#include "IGS_USM_Functions.h"

int main(void)
{
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	00 d0       	rcall	.+0      	; 0x46c <main+0x6>
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
//	USMF_InitialRegisterSetting();
	USMF_PortInit();
 470:	0a de       	rcall	.-1004   	; 0x86 <USMF_PortInit>
	USMF_ExternalInterruptInit();
 472:	13 de       	rcall	.-986    	; 0x9a <USMF_ExternalInterruptInit>
	USMF_ADCInit();
 474:	98 de       	rcall	.-720    	; 0x1a6 <USMF_ADCInit>
	USMF_TimerZeroInit();
 476:	20 de       	rcall	.-960    	; 0xb8 <USMF_TimerZeroInit>
	
	mySerialNumber = USMF_ReadSerialNumber();
 478:	33 de       	rcall	.-922    	; 0xe0 <USMF_ReadSerialNumber>
 47a:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mySerialNumber>
 47e:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <mySerialNumber+0x1>
 482:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mySerialNumber+0x2>
 486:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <mySerialNumber+0x3>
	ReadDefaultParmaFromEEPROM();
 48a:	57 de       	rcall	.-850    	; 0x13a <ReadDefaultParmaFromEEPROM>
	
	sei();
 48c:	78 94       	sei
	USMF_StatusInit();
 48e:	1b de       	rcall	.-970    	; 0xc6 <USMF_StatusInit>
			
			//if(G_plcRxBuffer[2] == 0x33)
			//	PORTC = LED_RED_ON;
				
			
			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 490:	09 e1       	ldi	r16, 0x19	; 25
 492:	11 e0       	ldi	r17, 0x01	; 1
						else
						{
							MY_ID = EPR_ID;
						}
							
						SN_ReceiveSuccessFallingF = 1;
 494:	ff 24       	eor	r15, r15
 496:	f3 94       	inc	r15
		//rx_message1.OperationMode = IDX_OPM_SENSING_ON;
		//tx_message.sensor_status	= 0;
		//USMF_SensorOPMControl(rx_message1, &tx_message);
		//
		//_delay_ms(1000);
		if(G_plcRxBitCnt>=PLC_RX_MAXBIT){
 498:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 49c:	8e 31       	cpi	r24, 0x1E	; 30
 49e:	e0 f3       	brcs	.-8      	; 0x498 <main+0x32>
			TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 4a0:	15 bc       	out	0x25, r1	; 37
			
			//if(G_plcRxBuffer[2] == 0x33)
			//	PORTC = LED_RED_ON;
				
			
			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 4a2:	f8 01       	movw	r30, r16
 4a4:	80 81       	ld	r24, Z
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	90 e0       	ldi	r25, 0x00	; 0
				
			switch(packetType)
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	91 05       	cpc	r25, r1
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <main+0x50>
 4b4:	7a c0       	rjmp	.+244    	; 0x5aa <main+0x144>
 4b6:	84 30       	cpi	r24, 0x04	; 4
 4b8:	91 05       	cpc	r25, r1
 4ba:	09 f4       	brne	.+2      	; 0x4be <main+0x58>
 4bc:	9b c0       	rjmp	.+310    	; 0x5f4 <main+0x18e>
 4be:	89 2b       	or	r24, r25
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <main+0x5e>
 4c2:	b1 c0       	rjmp	.+354    	; 0x626 <main+0x1c0>
					
					// Serial Number - Control ID Setting
					

					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
 4c4:	30 81       	ld	r19, Z
 4c6:	81 81       	ldd	r24, Z+1	; 0x01
									+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8) 
 4c8:	51 81       	ldd	r21, Z+1	; 0x01
 4ca:	22 81       	ldd	r18, Z+2	; 0x02
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
 4cc:	62 81       	ldd	r22, Z+2	; 0x02
 4ce:	43 81       	ldd	r20, Z+3	; 0x03
					
					// Serial Number - Control ID Setting
					

					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
 4d0:	f0 e1       	ldi	r31, 0x10	; 16
 4d2:	8f 9f       	mul	r24, r31
 4d4:	c0 01       	movw	r24, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	32 95       	swap	r19
 4da:	3f 70       	andi	r19, 0x0F	; 15
 4dc:	83 2b       	or	r24, r19
 4de:	99 27       	eor	r25, r25
 4e0:	09 2e       	mov	r0, r25
 4e2:	00 0c       	add	r0, r0
 4e4:	aa 0b       	sbc	r26, r26
 4e6:	bb 0b       	sbc	r27, r27
 4e8:	5c 01       	movw	r10, r24
 4ea:	99 24       	eor	r9, r9
 4ec:	88 24       	eor	r8, r8
									+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8) 
 4ee:	70 e1       	ldi	r23, 0x10	; 16
 4f0:	27 9f       	mul	r18, r23
 4f2:	90 01       	movw	r18, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	85 2f       	mov	r24, r21
 4f8:	82 95       	swap	r24
 4fa:	8f 70       	andi	r24, 0x0F	; 15
 4fc:	f9 01       	movw	r30, r18
 4fe:	e8 2b       	or	r30, r24
 500:	cf 01       	movw	r24, r30
 502:	09 2e       	mov	r0, r25
 504:	00 0c       	add	r0, r0
 506:	aa 0b       	sbc	r26, r26
 508:	bb 0b       	sbc	r27, r27
 50a:	ba 2f       	mov	r27, r26
 50c:	a9 2f       	mov	r26, r25
 50e:	98 2f       	mov	r25, r24
 510:	88 27       	eor	r24, r24
 512:	aa 27       	eor	r26, r26
 514:	bb 27       	eor	r27, r27
 516:	88 0d       	add	r24, r8
 518:	99 1d       	adc	r25, r9
 51a:	aa 1d       	adc	r26, r10
 51c:	bb 1d       	adc	r27, r11
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
 51e:	f0 e1       	ldi	r31, 0x10	; 16
 520:	4f 9f       	mul	r20, r31
 522:	a0 01       	movw	r20, r0
 524:	11 24       	eor	r1, r1
 526:	62 95       	swap	r22
 528:	6f 70       	andi	r22, 0x0F	; 15
 52a:	46 2b       	or	r20, r22
 52c:	55 27       	eor	r21, r21
 52e:	05 2e       	mov	r0, r21
 530:	00 0c       	add	r0, r0
 532:	66 0b       	sbc	r22, r22
 534:	77 0b       	sbc	r23, r23
 536:	84 0f       	add	r24, r20
 538:	95 1f       	adc	r25, r21
 53a:	a6 1f       	adc	r26, r22
 53c:	b7 1f       	adc	r27, r23
					
					// Serial Number - Control ID Setting
					

					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
 53e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rxSerialNumber>
 542:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <rxSerialNumber+0x1>
 546:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <rxSerialNumber+0x2>
 54a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <rxSerialNumber+0x3>
									+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8) 
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 54e:	f8 01       	movw	r30, r16
 550:	b3 80       	ldd	r11, Z+3	; 0x03
 552:	24 81       	ldd	r18, Z+4	; 0x04

					if(rxSerialNumber == mySerialNumber)
 554:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <mySerialNumber>
 558:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <mySerialNumber+0x1>
 55c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <mySerialNumber+0x2>
 560:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <mySerialNumber+0x3>
 564:	84 17       	cp	r24, r20
 566:	95 07       	cpc	r25, r21
 568:	a6 07       	cpc	r26, r22
 56a:	b7 07       	cpc	r27, r23
 56c:	09 f0       	breq	.+2      	; 0x570 <main+0x10a>
 56e:	5b c0       	rjmp	.+182    	; 0x626 <main+0x1c0>

					
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
									+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8) 
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 570:	f0 e1       	ldi	r31, 0x10	; 16
 572:	2f 9f       	mul	r18, r31
 574:	c0 01       	movw	r24, r0
 576:	11 24       	eor	r1, r1
 578:	b6 94       	lsr	r11
 57a:	b6 94       	lsr	r11
 57c:	b6 94       	lsr	r11
 57e:	b6 94       	lsr	r11
 580:	b8 2a       	or	r11, r24

					if(rxSerialNumber == mySerialNumber)
					{
						
						EPR_ID = eeprom_read_byte((uint8_t *)7);
 582:	87 e0       	ldi	r24, 0x07	; 7
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	71 d1       	rcall	.+738    	; 0x86a <eeprom_read_byte>
 588:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <EPR_ID>
							
						if(EPR_ID != rx_message0.controlID)
 58c:	b8 16       	cp	r11, r24
 58e:	39 f0       	breq	.+14     	; 0x59e <main+0x138>
						{
							
							MY_ID = rx_message0.controlID;
 590:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <MY_ID>
							eeprom_write_byte((uint8_t *)7, rx_message0.controlID);
 594:	6b 2d       	mov	r22, r11
 596:	87 e0       	ldi	r24, 0x07	; 7
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	6f d1       	rcall	.+734    	; 0x87a <eeprom_write_byte>
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <main+0x13c>
						}
						else
						{
							MY_ID = EPR_ID;
 59e:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <MY_ID>
						}
							
						SN_ReceiveSuccessFallingF = 1;
 5a2:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <SN_ReceiveSuccessFallingF>
						USMF_SetControlIDCompleteResponse();
 5a6:	40 df       	rcall	.-384    	; 0x428 <USMF_SetControlIDCompleteResponse>
 5a8:	3e c0       	rjmp	.+124    	; 0x626 <main+0x1c0>
					break;
				}
				case IDX_PCLTYPE_CCM_USM_CNTL : {
					// USM Control
					
					if( SN_ReceiveSuccessFallingF == 1)
 5aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <SN_ReceiveSuccessFallingF>
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	d1 f4       	brne	.+52     	; 0x5e6 <main+0x180>
					{
						
						rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 5b2:	f8 01       	movw	r30, r16
 5b4:	60 81       	ld	r22, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	f0 e1       	ldi	r31, 0x10	; 16
 5ba:	9f 9f       	mul	r25, r31
 5bc:	c0 01       	movw	r24, r0
 5be:	11 24       	eor	r1, r1
 5c0:	62 95       	swap	r22
 5c2:	6f 70       	andi	r22, 0x0F	; 15
 5c4:	68 2b       	or	r22, r24
						rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 5c6:	f8 01       	movw	r30, r16
 5c8:	71 81       	ldd	r23, Z+1	; 0x01
 5ca:	72 95       	swap	r23
 5cc:	7f 70       	andi	r23, 0x0F	; 15
						rx_message1.data = G_plcRxBuffer[2];
 5ce:	22 81       	ldd	r18, Z+2	; 0x02
							
						tx_message.sensor_status	= 0;
 5d0:	1a 82       	std	Y+2, r1	; 0x02

						if(rx_message1.controlID == MY_ID)
 5d2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <MY_ID>
 5d6:	68 13       	cpse	r22, r24
 5d8:	26 c0       	rjmp	.+76     	; 0x626 <main+0x1c0>
						{
							
							USMF_SensorOPMControl(rx_message1, &tx_message);
 5da:	ae 01       	movw	r20, r28
 5dc:	4f 5f       	subi	r20, 0xFF	; 255
 5de:	5f 4f       	sbci	r21, 0xFF	; 255
 5e0:	82 2f       	mov	r24, r18
 5e2:	c8 de       	rcall	.-624    	; 0x374 <USMF_SensorOPMControl>
 5e4:	20 c0       	rjmp	.+64     	; 0x626 <main+0x1c0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e6:	87 eb       	ldi	r24, 0xB7	; 183
 5e8:	9b e0       	ldi	r25, 0x0B	; 11
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <main+0x184>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <main+0x18a>
 5f0:	00 00       	nop
 5f2:	19 c0       	rjmp	.+50     	; 0x626 <main+0x1c0>
				}
					
				//SCM Mode
				case IDX_PCLTYPE_SCM_USM_CNTL : {
					//Sensor Control
					rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 5f4:	f8 01       	movw	r30, r16
 5f6:	60 81       	ld	r22, Z
 5f8:	91 81       	ldd	r25, Z+1	; 0x01
 5fa:	f0 e1       	ldi	r31, 0x10	; 16
 5fc:	9f 9f       	mul	r25, r31
 5fe:	c0 01       	movw	r24, r0
 600:	11 24       	eor	r1, r1
 602:	62 95       	swap	r22
 604:	6f 70       	andi	r22, 0x0F	; 15
 606:	68 2b       	or	r22, r24
					rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 608:	f8 01       	movw	r30, r16
 60a:	71 81       	ldd	r23, Z+1	; 0x01
 60c:	72 95       	swap	r23
 60e:	7f 70       	andi	r23, 0x0F	; 15
					rx_message1.data = G_plcRxBuffer[2];
 610:	22 81       	ldd	r18, Z+2	; 0x02
						
					tx_message.sensor_status	= 0;
 612:	1a 82       	std	Y+2, r1	; 0x02

					if(rx_message1.controlID == EPR_ID)
 614:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <EPR_ID>
 618:	69 13       	cpse	r22, r25
 61a:	05 c0       	rjmp	.+10     	; 0x626 <main+0x1c0>
					{
						USMF_SensorOPMControl(rx_message1, &tx_message);
 61c:	ae 01       	movw	r20, r28
 61e:	4f 5f       	subi	r20, 0xFF	; 255
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	82 2f       	mov	r24, r18
 624:	a7 de       	rcall	.-690    	; 0x374 <USMF_SensorOPMControl>
					}
					break;
				}
			}
			USMF_StatusInit();
 626:	4f dd       	rcall	.-1378   	; 0xc6 <USMF_StatusInit>
 628:	37 cf       	rjmp	.-402    	; 0x498 <main+0x32>

0000062a <__vector_16>:
}

// 동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
// SCM 에서 1bit time length 만큼의 시간으로 overflow interrupt를 발생시켜 주어야 한다. 
ISR(TIMER0_OVF_vect)
{
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	11 24       	eor	r1, r1
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	8f 93       	push	r24
 640:	9f 93       	push	r25
 642:	ef 93       	push	r30
 644:	ff 93       	push	r31
	//else if(LEDStatus==1)
	//{
		//PORTC = LED_GREEN_OFF;
		//LEDStatus = 0;
	//}
	G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= G_preBitValue << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 646:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 64a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <G_plcRxBitCnt>
 64e:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <G_plcRxBitCnt>
 652:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <G_plcRxBitCnt>
 656:	e6 95       	lsr	r30
 658:	e6 95       	lsr	r30
 65a:	e6 95       	lsr	r30
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	e7 5e       	subi	r30, 0xE7	; 231
 660:	fe 4f       	sbci	r31, 0xFE	; 254
 662:	50 81       	ld	r21, Z
 664:	89 2f       	mov	r24, r25
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	46 95       	lsr	r20
 66c:	46 95       	lsr	r20
 66e:	46 95       	lsr	r20
 670:	68 e0       	ldi	r22, 0x08	; 8
 672:	46 9f       	mul	r20, r22
 674:	20 19       	sub	r18, r0
 676:	31 09       	sbc	r19, r1
 678:	11 24       	eor	r1, r1
 67a:	02 c0       	rjmp	.+4      	; 0x680 <__vector_16+0x56>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	2a 95       	dec	r18
 682:	e2 f7       	brpl	.-8      	; 0x67c <__vector_16+0x52>
 684:	85 2b       	or	r24, r21
 686:	80 83       	st	Z, r24
	G_plcRxBitCnt++;
 688:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <G_plcRxBitCnt>
}
 692:	ff 91       	pop	r31
 694:	ef 91       	pop	r30
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	6f 91       	pop	r22
 69c:	5f 91       	pop	r21
 69e:	4f 91       	pop	r20
 6a0:	3f 91       	pop	r19
 6a2:	2f 91       	pop	r18
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <__vector_1>:

//Start : Falling Edge
ISR (INT0_vect)
{
 6ae:	1f 92       	push	r1
 6b0:	0f 92       	push	r0
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	0f 92       	push	r0
 6b6:	11 24       	eor	r1, r1
 6b8:	2f 93       	push	r18
 6ba:	3f 93       	push	r19
 6bc:	4f 93       	push	r20
 6be:	8f 93       	push	r24
 6c0:	9f 93       	push	r25
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31

	if(!(MYPPNSR & (1<<PPS)))//if(G_RisingF == 0) 
 6c6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <MYPPNSR>
 6ca:	80 fd       	sbrc	r24, 0
 6cc:	2d c0       	rjmp	.+90     	; 0x728 <__vector_1+0x7a>
	{
		MYPPNSR |= (1<<PNS);//G_FallingF = 1;
 6ce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <MYPPNSR>
 6d2:	82 60       	ori	r24, 0x02	; 2
 6d4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 <<(G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3)) ;
 6d8:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <G_plcRxBitCnt>
 6dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <G_plcRxBitCnt>
 6e0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <G_plcRxBitCnt>
 6e4:	e6 95       	lsr	r30
 6e6:	e6 95       	lsr	r30
 6e8:	e6 95       	lsr	r30
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	e7 5e       	subi	r30, 0xE7	; 231
 6ee:	fe 4f       	sbci	r31, 0xFE	; 254
 6f0:	40 81       	ld	r20, Z
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	96 95       	lsr	r25
 6f6:	96 95       	lsr	r25
 6f8:	96 95       	lsr	r25
 6fa:	88 e0       	ldi	r24, 0x08	; 8
 6fc:	98 9f       	mul	r25, r24
 6fe:	20 19       	sub	r18, r0
 700:	31 09       	sbc	r19, r1
 702:	11 24       	eor	r1, r1
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <__vector_1+0x60>
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	2a 95       	dec	r18
 710:	e2 f7       	brpl	.-8      	; 0x70a <__vector_1+0x5c>
 712:	84 2b       	or	r24, r20
 714:	80 83       	st	Z, r24
		G_preBitValue = 1;
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		G_plcRxBitCnt++;
 71c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 720:	8f 5f       	subi	r24, 0xFF	; 255
 722:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <G_plcRxBitCnt>
 726:	1a c0       	rjmp	.+52     	; 0x75c <__vector_1+0xae>
	}
	else
	{
		MYPPNSR &= ~(1<<PNS);//G_FallingF = 0;
 728:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <MYPPNSR>
 72c:	8d 7f       	andi	r24, 0xFD	; 253
 72e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 732:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 736:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 73a:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <G_plcRxBitCnt>
 73e:	e6 95       	lsr	r30
 740:	e6 95       	lsr	r30
 742:	e6 95       	lsr	r30
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	e7 5e       	subi	r30, 0xE7	; 231
 748:	fe 4f       	sbci	r31, 0xFE	; 254
 74a:	80 81       	ld	r24, Z
 74c:	80 83       	st	Z, r24
		G_preBitValue = 0;
 74e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		G_plcRxBitCnt++;
 752:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <G_plcRxBitCnt>
	}
	
	//동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
	TIFR0 = (1<<TOV0);
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	85 bb       	out	0x15, r24	; 21
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 760:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 762:	16 bc       	out	0x26, r1	; 38

	EIFR  = (1<<INTF0) |(1<<INTF1);
 764:	83 e0       	ldi	r24, 0x03	; 3
 766:	8c bb       	out	0x1c, r24	; 28
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <__vector_2>:

//Start : Rising Edge
ISR (INT1_vect)
{
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
 78a:	2f 93       	push	r18
 78c:	3f 93       	push	r19
 78e:	4f 93       	push	r20
 790:	8f 93       	push	r24
 792:	9f 93       	push	r25
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
	if(!(MYPPNSR & (1<<PNS)))//if(G_FallingF == 0)
 798:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <MYPPNSR>
 79c:	81 fd       	sbrc	r24, 1
 79e:	2d c0       	rjmp	.+90     	; 0x7fa <__vector_2+0x7a>
	{
		MYPPNSR |= (1<<PPS);//G_RisingF = 1;
 7a0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <MYPPNSR>
 7a4:	81 60       	ori	r24, 0x01	; 1
 7a6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 7aa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <G_plcRxBitCnt>
 7ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <G_plcRxBitCnt>
 7b2:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <G_plcRxBitCnt>
 7b6:	e6 95       	lsr	r30
 7b8:	e6 95       	lsr	r30
 7ba:	e6 95       	lsr	r30
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	e7 5e       	subi	r30, 0xE7	; 231
 7c0:	fe 4f       	sbci	r31, 0xFE	; 254
 7c2:	40 81       	ld	r20, Z
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	96 95       	lsr	r25
 7c8:	96 95       	lsr	r25
 7ca:	96 95       	lsr	r25
 7cc:	88 e0       	ldi	r24, 0x08	; 8
 7ce:	98 9f       	mul	r25, r24
 7d0:	20 19       	sub	r18, r0
 7d2:	31 09       	sbc	r19, r1
 7d4:	11 24       	eor	r1, r1
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <__vector_2+0x60>
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	2a 95       	dec	r18
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <__vector_2+0x5c>
 7e4:	84 2b       	or	r24, r20
 7e6:	80 83       	st	Z, r24
		G_preBitValue = 1;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		G_plcRxBitCnt++;
 7ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 7f2:	8f 5f       	subi	r24, 0xFF	; 255
 7f4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <G_plcRxBitCnt>
 7f8:	1a c0       	rjmp	.+52     	; 0x82e <__vector_2+0xae>
	}
	else
	{
		MYPPNSR &= ~(1<<PPS);//G_RisingF = 0;
 7fa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <MYPPNSR>
 7fe:	8e 7f       	andi	r24, 0xFE	; 254
 800:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 804:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 808:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 80c:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <G_plcRxBitCnt>
 810:	e6 95       	lsr	r30
 812:	e6 95       	lsr	r30
 814:	e6 95       	lsr	r30
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	e7 5e       	subi	r30, 0xE7	; 231
 81a:	fe 4f       	sbci	r31, 0xFE	; 254
 81c:	80 81       	ld	r24, Z
 81e:	80 83       	st	Z, r24
		G_preBitValue = 0;
 820:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		G_plcRxBitCnt++;
 824:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <G_plcRxBitCnt>
 828:	8f 5f       	subi	r24, 0xFF	; 255
 82a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <G_plcRxBitCnt>
	}
	TIFR0 = (1<<TOV0);
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	85 bb       	out	0x15, r24	; 21
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 832:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 834:	16 bc       	out	0x26, r1	; 38

	EIFR  = (1<<INTF0) |(1<<INTF1);	
 836:	83 e0       	ldi	r24, 0x03	; 3
 838:	8c bb       	out	0x1c, r24	; 28
}
 83a:	ff 91       	pop	r31
 83c:	ef 91       	pop	r30
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <__umulhisi3>:
 852:	a2 9f       	mul	r26, r18
 854:	b0 01       	movw	r22, r0
 856:	b3 9f       	mul	r27, r19
 858:	c0 01       	movw	r24, r0
 85a:	a3 9f       	mul	r26, r19
 85c:	01 d0       	rcall	.+2      	; 0x860 <__umulhisi3+0xe>
 85e:	b2 9f       	mul	r27, r18
 860:	70 0d       	add	r23, r0
 862:	81 1d       	adc	r24, r1
 864:	11 24       	eor	r1, r1
 866:	91 1d       	adc	r25, r1
 868:	08 95       	ret

0000086a <eeprom_read_byte>:
 86a:	f9 99       	sbic	0x1f, 1	; 31
 86c:	fe cf       	rjmp	.-4      	; 0x86a <eeprom_read_byte>
 86e:	12 bc       	out	0x22, r1	; 34
 870:	81 bd       	out	0x21, r24	; 33
 872:	f8 9a       	sbi	0x1f, 0	; 31
 874:	99 27       	eor	r25, r25
 876:	80 b5       	in	r24, 0x20	; 32
 878:	08 95       	ret

0000087a <eeprom_write_byte>:
 87a:	26 2f       	mov	r18, r22

0000087c <eeprom_write_r18>:
 87c:	f9 99       	sbic	0x1f, 1	; 31
 87e:	fe cf       	rjmp	.-4      	; 0x87c <eeprom_write_r18>
 880:	1f ba       	out	0x1f, r1	; 31
 882:	12 bc       	out	0x22, r1	; 34
 884:	81 bd       	out	0x21, r24	; 33
 886:	20 bd       	out	0x20, r18	; 32
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	fa 9a       	sbi	0x1f, 2	; 31
 88e:	f9 9a       	sbi	0x1f, 1	; 31
 890:	0f be       	out	0x3f, r0	; 63
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
