
02_DipSwitchTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000103  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008f  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013b  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001da  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	12 d0       	rcall	.+36     	; 0x66 <main>
  42:	2a c0       	rjmp	.+84     	; 0x98 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <_Z13USMF_PortInitv>:
#define LED_GREEN_OFF		(0<<PC2)
#define LED_RED_OFF			(0<<PC3)

void USMF_PortInit()
{
	DDRB = (0<<DDB7)|(0<<DDB6)|(0<<DDB5)|(0<<DDB4)|(0<<DDB3)|(0<<DDB2)|(0<<DDB1)|(0<<DDB0);
  46:	14 b8       	out	0x04, r1	; 4
	DDRC = (1<<DDC3)|(1<<DDC2)|(0<<DDC1)|(0<<DDC0);
  48:	8c e0       	ldi	r24, 0x0C	; 12
  4a:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD5)|(0<<DDD3)|(0<<DDD2)|(1<<DDD4)|(0<<DDD1)|(0<<DDD0);
  4c:	80 e3       	ldi	r24, 0x30	; 48
  4e:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0x00;
  50:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
  52:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  54:	1b b8       	out	0x0b, r1	; 11
  56:	08 95       	ret

00000058 <_Z12USMF_ADCInitv>:
{
	//ADCCNT	=	0;
	// Internal Vref turned off
	// ADC Left Adjust Result
	// ADC0 Channel Selection
	ADMUX	=	(0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
  58:	87 e2       	ldi	r24, 0x27	; 39
  5a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	
	// ADC Enable
	// ADC Start Conversion Wait
	// ADC  Prescaler Division Factor 2 ---> 1MHz /2 = 500kHz ---> 2us ---> Convert Time 2us * 25 adc clock = 50us
	ADCSRA	=	(1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(1<<ADPS0);
  5e:	81 e8       	ldi	r24, 0x81	; 129
  60:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
  64:	08 95       	ret

00000066 <main>:
*/

int main(void)
{
    /* Replace with your application code */
	USMF_PortInit();
  66:	ef df       	rcall	.-34     	; 0x46 <_Z13USMF_PortInitv>
	USMF_ADCInit();
  68:	f7 df       	rcall	.-18     	; 0x58 <_Z12USMF_ADCInitv>
		//dipVal = PINC & (1<<PC1);
		//dipVal = dipVal>>1;
		
		uint32_t ADCDATA;
		
		ADCSRA |= (1<<ADSC);
  6a:	ea e7       	ldi	r30, 0x7A	; 122
  6c:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA & (1<<ADSC)) == 1);
		ADCDATA = ADCH;
  6e:	a9 e7       	ldi	r26, 0x79	; 121
  70:	b0 e0       	ldi	r27, 0x00	; 0
		{
			if(ADCDATA>100)
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	30 e0       	ldi	r19, 0x00	; 0
		//dipVal = PINC & (1<<PC1);
		//dipVal = dipVal>>1;
		
		uint32_t ADCDATA;
		
		ADCSRA |= (1<<ADSC);
  76:	80 81       	ld	r24, Z
  78:	80 64       	ori	r24, 0x40	; 64
  7a:	80 83       	st	Z, r24
		while((ADCSRA & (1<<ADSC)) == 1);
  7c:	80 81       	ld	r24, Z
		ADCDATA = ADCH;
  7e:	9c 91       	ld	r25, X
		{
			if(ADCDATA>100)
  80:	82 2f       	mov	r24, r18
  82:	95 36       	cpi	r25, 0x65	; 101
  84:	08 f4       	brcc	.+2      	; 0x88 <main+0x22>
  86:	83 2f       	mov	r24, r19
			dipVal=1;
			else
			dipVal=0;
			
		}
		if(dipVal == 1)
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	11 f4       	brne	.+4      	; 0x90 <main+0x2a>
		{
			PORTC |= (1<<PC2);
  8c:	42 9a       	sbi	0x08, 2	; 8
  8e:	f3 cf       	rjmp	.-26     	; 0x76 <main+0x10>
		}
		
		if(dipVal == 0)
  90:	81 11       	cpse	r24, r1
  92:	f1 cf       	rjmp	.-30     	; 0x76 <main+0x10>
		{
			PORTC &= ~(1<<PC2);
  94:	42 98       	cbi	0x08, 2	; 8
  96:	ef cf       	rjmp	.-34     	; 0x76 <main+0x10>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
