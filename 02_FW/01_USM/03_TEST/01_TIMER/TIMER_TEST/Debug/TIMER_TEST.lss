
TIMER_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000174  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000014d  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b7  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000015d  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fa  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	5c c0       	rjmp	.+184    	; 0xda <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 30       	cpi	r26, 0x09	; 9
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	15 d0       	rcall	.+42     	; 0x7c <main>
  52:	54 c0       	rjmp	.+168    	; 0xfc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z9timerInitv>:
volatile uint8_t G_plcRxBitCnt=0x0;
volatile uint8_t G_preBitValue = 0;
volatile uint8_t G_isSameValue = 0;
void timerInit()
{
	TCCR0A = (0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
  56:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
  5c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	TIFR0 = (1<<TOV0);
  60:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 162;
  62:	82 ea       	ldi	r24, 0xA2	; 162
  64:	86 bd       	out	0x26, r24	; 38
  66:	08 95       	ret

00000068 <_Z13USMF_PortInitv>:

}
void USMF_PortInit()
{
	DDRB = (0<<DDB7)|(0<<DDB6)|(0<<DDB5)|(0<<DDB4)|(0<<DDB3)|(0<<DDB2)|(0<<DDB1)|(0<<DDB0);
  68:	14 b8       	out	0x04, r1	; 4
	DDRC = (1<<DDC3)|(1<<DDC2)|(0<<DDC0);
  6a:	8c e0       	ldi	r24, 0x0C	; 12
  6c:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD5)|(0<<DDD3)|(0<<DDD2)|(1<<DDD4);
  6e:	80 e3       	ldi	r24, 0x30	; 48
  70:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0x00;
  72:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
  74:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  76:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
  78:	18 b8       	out	0x08, r1	; 8
  7a:	08 95       	ret

0000007c <main>:
}
int main(void)
{
    /* Replace with your application code */
	USMF_PortInit();
  7c:	f5 df       	rcall	.-22     	; 0x68 <_Z13USMF_PortInitv>
	timerInit();
  7e:	eb df       	rcall	.-42     	; 0x56 <_Z9timerInitv>
	sei();
  80:	78 94       	sei
    while (1) 
    {
		if(G_isSameValue == 1){
			PORTC ^= (1<<PC2);
  82:	54 e0       	ldi	r21, 0x04	; 4
	USMF_PortInit();
	timerInit();
	sei();
    while (1) 
    {
		if(G_isSameValue == 1){
  84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x8>
			PORTC ^= (1<<PC2);
  8c:	88 b1       	in	r24, 0x08	; 8
  8e:	85 27       	eor	r24, r21
  90:	88 b9       	out	0x08, r24	; 8
			G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= G_preBitValue << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
  92:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <G_preBitValue>
  96:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <G_plcRxBitCnt>
  9a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <G_plcRxBitCnt>
  9e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <G_plcRxBitCnt>
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	f5 95       	asr	r31
  a6:	e7 95       	ror	r30
  a8:	f5 95       	asr	r31
  aa:	e7 95       	ror	r30
  ac:	f5 95       	asr	r31
  ae:	e7 95       	ror	r30
  b0:	ed 5f       	subi	r30, 0xFD	; 253
  b2:	fe 4f       	sbci	r31, 0xFE	; 254
  b4:	40 81       	ld	r20, Z
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	38 7f       	andi	r19, 0xF8	; 248
  ba:	23 1b       	sub	r18, r19
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x46>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	2a 95       	dec	r18
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x42>
  c6:	84 2b       	or	r24, r20
  c8:	80 83       	st	Z, r24
			G_plcRxBitCnt++;
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_plcRxBitCnt>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <G_plcRxBitCnt>
			G_isSameValue = 0;
  d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  d8:	d5 cf       	rjmp	.-86     	; 0x84 <main+0x8>

000000da <__vector_16>:
		
    }
}

ISR(TIMER0_OVF_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	G_isSameValue = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TCNT0 = 162;
  ec:	82 ea       	ldi	r24, 0xA2	; 162
  ee:	86 bd       	out	0x26, r24	; 38
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
