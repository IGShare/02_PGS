
IGS_USM_V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000884  00000918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000884  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800108  00800108  00000920  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9f  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000321  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088a  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a3  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	3e c3       	rjmp	.+1660   	; 0x680 <__vector_1>
   4:	ac c3       	rjmp	.+1880   	; 0x75e <__vector_2>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
   e:	3a c0       	rjmp	.+116    	; 0x84 <__bad_interrupt>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	1f c3       	rjmp	.+1598   	; 0x660 <__vector_16>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>
  26:	2e c0       	rjmp	.+92     	; 0x84 <__bad_interrupt>
  28:	2d c0       	rjmp	.+90     	; 0x84 <__bad_interrupt>
  2a:	2c c0       	rjmp	.+88     	; 0x84 <__bad_interrupt>
  2c:	2b c0       	rjmp	.+86     	; 0x84 <__bad_interrupt>
  2e:	2a c0       	rjmp	.+84     	; 0x84 <__bad_interrupt>
  30:	29 c0       	rjmp	.+82     	; 0x84 <__bad_interrupt>
  32:	28 c0       	rjmp	.+80     	; 0x84 <__bad_interrupt>
  34:	b8 c1       	rjmp	.+880    	; 0x3a6 <USMF_SensorOPMControl+0x28>
  36:	ba c1       	rjmp	.+884    	; 0x3ac <USMF_SensorOPMControl+0x2e>
  38:	bc c1       	rjmp	.+888    	; 0x3b2 <USMF_SensorOPMControl+0x34>
  3a:	be c1       	rjmp	.+892    	; 0x3b8 <USMF_SensorOPMControl+0x3a>
  3c:	f4 c1       	rjmp	.+1000   	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
  3e:	bf c1       	rjmp	.+894    	; 0x3be <USMF_SensorOPMControl+0x40>
  40:	f2 c1       	rjmp	.+996    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
  42:	f1 c1       	rjmp	.+994    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
  44:	f0 c1       	rjmp	.+992    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
  46:	c5 c1       	rjmp	.+906    	; 0x3d2 <USMF_SensorOPMControl+0x54>
  48:	e0 c1       	rjmp	.+960    	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
  4a:	e4 c1       	rjmp	.+968    	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
  4c:	e8 c1       	rjmp	.+976    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ef       	ldi	r28, 0xFF	; 255
  54:	d4 e0       	ldi	r29, 0x04	; 4
  56:	de bf       	out	0x3e, r29	; 62
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	11 e0       	ldi	r17, 0x01	; 1
  5c:	a0 e0       	ldi	r26, 0x00	; 0
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	e4 e8       	ldi	r30, 0x84	; 132
  62:	f8 e0       	ldi	r31, 0x08	; 8
  64:	02 c0       	rjmp	.+4      	; 0x6a <__do_copy_data+0x10>
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a8 30       	cpi	r26, 0x08	; 8
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0xc>

00000070 <__do_clear_bss>:
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	a8 e0       	ldi	r26, 0x08	; 8
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a1 32       	cpi	r26, 0x21	; 33
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	d8 d1       	rcall	.+944    	; 0x432 <main>
  82:	fe c3       	rjmp	.+2044   	; 0x880 <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <USMF_PortInit>:

	PLC_TX_ONE_BIT(0,PLC_TX_ONEBIT_TIME_US,plcTxData);
	PLC_TX_ONE_BIT(1,PLC_TX_ONEBIT_TIME_US,plcTxData);
	PLC_TX_ONE_BIT(2,PLC_TX_ONEBIT_TIME_US,plcTxData);
	
	PORTD = ONEBIT_ZERO;
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	84 b9       	out	0x04, r24	; 4
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	87 b9       	out	0x07, r24	; 7
  8e:	80 e3       	ldi	r24, 0x30	; 48
  90:	8a b9       	out	0x0a, r24	; 10
  92:	15 b8       	out	0x05, r1	; 5
  94:	18 b8       	out	0x08, r1	; 8
  96:	1b b8       	out	0x0b, r1	; 11
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	88 b9       	out	0x08, r24	; 8
  9c:	08 95       	ret

0000009e <USMF_ExternalInterruptInit>:
  9e:	e9 e6       	ldi	r30, 0x69	; 105
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
  a4:	80 81       	ld	r24, Z
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	80 83       	st	Z, r24
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	8d bb       	out	0x1d, r24	; 29
  ba:	08 95       	ret

000000bc <USMF_TimerZeroInit>:
  bc:	14 bc       	out	0x24, r1	; 36
  be:	15 bc       	out	0x25, r1	; 37
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	08 95       	ret

000000ca <USMF_StatusInit>:
  ca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <G_plcRxBitCnt>
  ce:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <MYPPNSR>
  d2:	ea e1       	ldi	r30, 0x1A	; 26
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	10 82       	st	Z, r1
  d8:	11 82       	std	Z+1, r1	; 0x01
  da:	12 82       	std	Z+2, r1	; 0x02
  dc:	13 82       	std	Z+3, r1	; 0x03
  de:	14 82       	std	Z+4, r1	; 0x04
  e0:	15 82       	std	Z+5, r1	; 0x05
  e2:	08 95       	ret

000000e4 <USMF_ReadSerialNumber>:
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	b2 d3       	rcall	.+1892   	; 0x854 <eeprom_read_byte>
  f0:	08 2f       	mov	r16, r24
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	ae d3       	rcall	.+1884   	; 0x854 <eeprom_read_byte>
  f8:	c8 2f       	mov	r28, r24
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	aa d3       	rcall	.+1876   	; 0x854 <eeprom_read_byte>
 100:	40 2f       	mov	r20, r16
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	9a 01       	movw	r18, r20
 10a:	11 27       	eor	r17, r17
 10c:	00 27       	eor	r16, r16
 10e:	4c 2f       	mov	r20, r28
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	76 2f       	mov	r23, r22
 118:	65 2f       	mov	r22, r21
 11a:	54 2f       	mov	r21, r20
 11c:	44 27       	eor	r20, r20
 11e:	40 0f       	add	r20, r16
 120:	51 1f       	adc	r21, r17
 122:	62 1f       	adc	r22, r18
 124:	73 1f       	adc	r23, r19
 126:	8a 01       	movw	r16, r20
 128:	9b 01       	movw	r18, r22
 12a:	08 0f       	add	r16, r24
 12c:	11 1d       	adc	r17, r1
 12e:	21 1d       	adc	r18, r1
 130:	31 1d       	adc	r19, r1
 132:	c9 01       	movw	r24, r18
 134:	b8 01       	movw	r22, r16
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <ReadDefaultParmaFromEEPROM>:
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	88 d3       	rcall	.+1808   	; 0x854 <eeprom_read_byte>
 144:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <EPR_ID>
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	83 d3       	rcall	.+1798   	; 0x854 <eeprom_read_byte>
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	a4 ee       	ldi	r26, 0xE4	; 228
 154:	b2 e0       	ldi	r27, 0x02	; 2
 156:	72 d3       	rcall	.+1764   	; 0x83c <__umulhisi3>
 158:	dc 01       	movw	r26, r24
 15a:	cb 01       	movw	r24, r22
 15c:	84 5a       	subi	r24, 0xA4	; 164
 15e:	94 4d       	sbci	r25, 0xD4	; 212
 160:	af 4f       	sbci	r26, 0xFF	; 255
 162:	bf 4f       	sbci	r27, 0xFF	; 255
 164:	68 94       	set
 166:	15 f8       	bld	r1, 5
 168:	b6 95       	lsr	r27
 16a:	a7 95       	ror	r26
 16c:	97 95       	ror	r25
 16e:	87 95       	ror	r24
 170:	16 94       	lsr	r1
 172:	d1 f7       	brne	.-12     	; 0x168 <ReadDefaultParmaFromEEPROM+0x2a>
 174:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <MaxSampleNum>
 178:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <MaxSampleNum+0x1>
 17c:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <MaxSampleNum+0x2>
 180:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <MaxSampleNum+0x3>
 184:	8a e0       	ldi	r24, 0x0A	; 10
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	65 d3       	rcall	.+1738   	; 0x854 <eeprom_read_byte>
 18a:	8e 5c       	subi	r24, 0xCE	; 206
 18c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCLevelThreshold>
 190:	8b e0       	ldi	r24, 0x0B	; 11
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	5f d3       	rcall	.+1726   	; 0x854 <eeprom_read_byte>
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCCntThreshold>
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	59 d3       	rcall	.+1714   	; 0x854 <eeprom_read_byte>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <BurstCnt>
 1a8:	08 95       	ret

000001aa <USMF_ADCInit>:
 1aa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ADCCNT+0x1>
 1ae:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ADCCNT>
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
 1b8:	81 e8       	ldi	r24, 0x81	; 129
 1ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 1be:	08 95       	ret

000001c0 <USMF_TxPulsing>:
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	18 16       	cp	r1, r24
 1c4:	19 06       	cpc	r1, r25
 1c6:	8c f4       	brge	.+34     	; 0x1ea <USMF_TxPulsing+0x2a>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e2       	ldi	r20, 0x20	; 32
 1ce:	4b b9       	out	0x0b, r20	; 11
 1d0:	53 e0       	ldi	r21, 0x03	; 3
 1d2:	5a 95       	dec	r21
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <USMF_TxPulsing+0x12>
 1d6:	00 00       	nop
 1d8:	1b b8       	out	0x0b, r1	; 11
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <USMF_TxPulsing+0x1c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <USMF_TxPulsing+0x1e>
 1de:	00 00       	nop
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	28 17       	cp	r18, r24
 1e6:	39 07       	cpc	r19, r25
 1e8:	91 f7       	brne	.-28     	; 0x1ce <USMF_TxPulsing+0xe>
 1ea:	08 95       	ret

000001ec <USMF_PLC_TX>:
 1ec:	fa 01       	movw	r30, r20
 1ee:	80 81       	ld	r24, Z
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	29 f4       	brne	.+10     	; 0x1fe <USMF_PLC_TX+0x12>
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	a1 f1       	breq	.+104    	; 0x262 <USMF_PLC_TX+0x76>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	33 c0       	rjmp	.+102    	; 0x264 <USMF_PLC_TX+0x78>
 1fe:	74 30       	cpi	r23, 0x04	; 4
 200:	61 f0       	breq	.+24     	; 0x21a <USMF_PLC_TX+0x2e>
 202:	18 f4       	brcc	.+6      	; 0x20a <USMF_PLC_TX+0x1e>
 204:	73 30       	cpi	r23, 0x03	; 3
 206:	31 f0       	breq	.+12     	; 0x214 <USMF_PLC_TX+0x28>
 208:	22 c0       	rjmp	.+68     	; 0x24e <USMF_PLC_TX+0x62>
 20a:	75 30       	cpi	r23, 0x05	; 5
 20c:	49 f0       	breq	.+18     	; 0x220 <USMF_PLC_TX+0x34>
 20e:	76 30       	cpi	r23, 0x06	; 6
 210:	59 f0       	breq	.+22     	; 0x228 <USMF_PLC_TX+0x3c>
 212:	1d c0       	rjmp	.+58     	; 0x24e <USMF_PLC_TX+0x62>
 214:	18 b8       	out	0x08, r1	; 8
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	1d c0       	rjmp	.+58     	; 0x254 <USMF_PLC_TX+0x68>
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	88 b9       	out	0x08, r24	; 8
 21e:	1a c0       	rjmp	.+52     	; 0x254 <USMF_PLC_TX+0x68>
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	88 b9       	out	0x08, r24	; 8
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	16 c0       	rjmp	.+44     	; 0x254 <USMF_PLC_TX+0x68>
 228:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <LEDStatus>
 22c:	81 11       	cpse	r24, r1
 22e:	07 c0       	rjmp	.+14     	; 0x23e <USMF_PLC_TX+0x52>
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	88 b9       	out	0x08, r24	; 8
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <LEDStatus>
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	0b c0       	rjmp	.+22     	; 0x254 <USMF_PLC_TX+0x68>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	41 f4       	brne	.+16     	; 0x252 <USMF_PLC_TX+0x66>
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	88 b9       	out	0x08, r24	; 8
 246:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <LEDStatus>
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	03 c0       	rjmp	.+6      	; 0x254 <USMF_PLC_TX+0x68>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	01 c0       	rjmp	.+2      	; 0x254 <USMF_PLC_TX+0x68>
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	e7 eb       	ldi	r30, 0xB7	; 183
 256:	fb e0       	ldi	r31, 0x0B	; 11
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <USMF_PLC_TX+0x6c>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <USMF_PLC_TX+0x72>
 25e:	00 00       	nop
 260:	01 c0       	rjmp	.+2      	; 0x264 <USMF_PLC_TX+0x78>
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	e9 ef       	ldi	r30, 0xF9	; 249
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <USMF_PLC_TX+0x7c>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <USMF_PLC_TX+0x82>
 26e:	00 00       	nop
 270:	90 e1       	ldi	r25, 0x10	; 16
 272:	9b b9       	out	0x0b, r25	; 11
 274:	e3 ef       	ldi	r30, 0xF3	; 243
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <USMF_PLC_TX+0x8c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <USMF_PLC_TX+0x92>
 27e:	00 00       	nop
 280:	98 2f       	mov	r25, r24
 282:	91 70       	andi	r25, 0x01	; 1
 284:	92 95       	swap	r25
 286:	90 7f       	andi	r25, 0xF0	; 240
 288:	9b b9       	out	0x0b, r25	; 11
 28a:	e3 ef       	ldi	r30, 0xF3	; 243
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <USMF_PLC_TX+0xa2>
 292:	00 c0       	rjmp	.+0      	; 0x294 <USMF_PLC_TX+0xa8>
 294:	00 00       	nop
 296:	81 fb       	bst	r24, 1
 298:	99 27       	eor	r25, r25
 29a:	90 f9       	bld	r25, 0
 29c:	92 95       	swap	r25
 29e:	90 7f       	andi	r25, 0xF0	; 240
 2a0:	9b b9       	out	0x0b, r25	; 11
 2a2:	e3 ef       	ldi	r30, 0xF3	; 243
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <USMF_PLC_TX+0xba>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <USMF_PLC_TX+0xc0>
 2ac:	00 00       	nop
 2ae:	86 95       	lsr	r24
 2b0:	86 95       	lsr	r24
 2b2:	82 95       	swap	r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	8b b9       	out	0x0b, r24	; 11
 2b8:	83 ef       	ldi	r24, 0xF3	; 243
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <USMF_PLC_TX+0xd0>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <USMF_PLC_TX+0xd6>
 2c2:	00 00       	nop
 2c4:	1b b8       	out	0x0b, r1	; 11
 2c6:	08 95       	ret

000002c8 <USMF_SensingFunction>:
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <BurstCnt>
 2d0:	77 df       	rcall	.-274    	; 0x1c0 <USMF_TxPulsing>
 2d2:	83 ef       	ldi	r24, 0xF3	; 243
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <USMF_SensingFunction+0xe>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <USMF_SensingFunction+0x14>
 2dc:	00 00       	nop
 2de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <MaxSampleNum>
 2e2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <MaxSampleNum+0x1>
 2e6:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <MaxSampleNum+0x2>
 2ea:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <MaxSampleNum+0x3>
 2ee:	89 2b       	or	r24, r25
 2f0:	8a 2b       	or	r24, r26
 2f2:	8b 2b       	or	r24, r27
 2f4:	51 f1       	breq	.+84     	; 0x34a <USMF_SensingFunction+0x82>
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	ba 01       	movw	r22, r20
 2fc:	ea e7       	ldi	r30, 0x7A	; 122
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	c9 e7       	ldi	r28, 0x79	; 121
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	80 64       	ori	r24, 0x40	; 64
 308:	80 83       	st	Z, r24
 30a:	80 81       	ld	r24, Z
 30c:	98 81       	ld	r25, Y
 30e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADCLevelThreshold>
 312:	89 17       	cp	r24, r25
 314:	48 f4       	brcc	.+18     	; 0x328 <USMF_SensingFunction+0x60>
 316:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ADCCNT>
 31a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ADCCNT+0x1>
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <ADCCNT+0x1>
 324:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ADCCNT>
 328:	4f 5f       	subi	r20, 0xFF	; 255
 32a:	5f 4f       	sbci	r21, 0xFF	; 255
 32c:	6f 4f       	sbci	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <MaxSampleNum>
 334:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <MaxSampleNum+0x1>
 338:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <MaxSampleNum+0x2>
 33c:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <MaxSampleNum+0x3>
 340:	48 17       	cp	r20, r24
 342:	59 07       	cpc	r21, r25
 344:	6a 07       	cpc	r22, r26
 346:	7b 07       	cpc	r23, r27
 348:	e8 f2       	brcs	.-70     	; 0x304 <USMF_SensingFunction+0x3c>
 34a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ADCCNT>
 34e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ADCCntThreshold>
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	89 17       	cp	r24, r25
 356:	08 f0       	brcs	.+2      	; 0x35a <USMF_SensingFunction+0x92>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <ParkingFlag>
 35e:	89 17       	cp	r24, r25
 360:	18 f4       	brcc	.+6      	; 0x368 <USMF_SensingFunction+0xa0>
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	88 b9       	out	0x08, r24	; 8
 366:	02 c0       	rjmp	.+4      	; 0x36c <USMF_SensingFunction+0xa4>
 368:	84 e0       	ldi	r24, 0x04	; 4
 36a:	88 b9       	out	0x08, r24	; 8
 36c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ADCCNT+0x1>
 370:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ADCCNT>
 374:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ParkingFlag>
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <USMF_SensorOPMControl>:
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	07 2f       	mov	r16, r23
 38a:	10 e0       	ldi	r17, 0x00	; 0
 38c:	f8 01       	movw	r30, r16
 38e:	33 97       	sbiw	r30, 0x03	; 3
 390:	ed 30       	cpi	r30, 0x0D	; 13
 392:	f1 05       	cpc	r31, r1
 394:	08 f0       	brcs	.+2      	; 0x398 <USMF_SensorOPMControl+0x1a>
 396:	47 c0       	rjmp	.+142    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 398:	ea 01       	movw	r28, r20
 39a:	18 2f       	mov	r17, r24
 39c:	07 2f       	mov	r16, r23
 39e:	f6 2e       	mov	r15, r22
 3a0:	e6 5e       	subi	r30, 0xE6	; 230
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	09 94       	ijmp
 3a6:	18 82       	st	Y, r1
 3a8:	21 df       	rcall	.-446    	; 0x1ec <USMF_PLC_TX>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 3ac:	18 82       	st	Y, r1
 3ae:	1e df       	rcall	.-452    	; 0x1ec <USMF_PLC_TX>
 3b0:	3a c0       	rjmp	.+116    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 3b2:	18 82       	st	Y, r1
 3b4:	1b df       	rcall	.-458    	; 0x1ec <USMF_PLC_TX>
 3b6:	37 c0       	rjmp	.+110    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 3b8:	18 82       	st	Y, r1
 3ba:	18 df       	rcall	.-464    	; 0x1ec <USMF_PLC_TX>
 3bc:	34 c0       	rjmp	.+104    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	88 83       	st	Y, r24
 3c2:	82 df       	rcall	.-252    	; 0x2c8 <USMF_SensingFunction>
 3c4:	89 83       	std	Y+1, r24	; 0x01
 3c6:	ae 01       	movw	r20, r28
 3c8:	6f 2d       	mov	r22, r15
 3ca:	70 2f       	mov	r23, r16
 3cc:	81 2f       	mov	r24, r17
 3ce:	0e df       	rcall	.-484    	; 0x1ec <USMF_PLC_TX>
 3d0:	2a c0       	rjmp	.+84     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	a4 ee       	ldi	r26, 0xE4	; 228
 3d8:	b2 e0       	ldi	r27, 0x02	; 2
 3da:	30 d2       	rcall	.+1120   	; 0x83c <__umulhisi3>
 3dc:	dc 01       	movw	r26, r24
 3de:	cb 01       	movw	r24, r22
 3e0:	84 5a       	subi	r24, 0xA4	; 164
 3e2:	94 4d       	sbci	r25, 0xD4	; 212
 3e4:	af 4f       	sbci	r26, 0xFF	; 255
 3e6:	bf 4f       	sbci	r27, 0xFF	; 255
 3e8:	68 94       	set
 3ea:	15 f8       	bld	r1, 5
 3ec:	b6 95       	lsr	r27
 3ee:	a7 95       	ror	r26
 3f0:	97 95       	ror	r25
 3f2:	87 95       	ror	r24
 3f4:	16 94       	lsr	r1
 3f6:	d1 f7       	brne	.-12     	; 0x3ec <USMF_SensorOPMControl+0x6e>
 3f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <MaxSampleNum>
 3fc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <MaxSampleNum+0x1>
 400:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <MaxSampleNum+0x2>
 404:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <MaxSampleNum+0x3>
 408:	0e c0       	rjmp	.+28     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 40a:	22 e3       	ldi	r18, 0x32	; 50
 40c:	28 0f       	add	r18, r24
 40e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ADCLevelThreshold>
 412:	09 c0       	rjmp	.+18     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	28 0f       	add	r18, r24
 418:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ADCCntThreshold>
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	28 0f       	add	r18, r24
 422:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <BurstCnt>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	08 95       	ret

00000432 <main>:
#include "IGS_USM_Define.h"
#include "IGS_USM_Global.h"
#include "IGS_USM_Functions.h"

int main(void)
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	00 d0       	rcall	.+0      	; 0x438 <main+0x6>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
//	USMF_InitialRegisterSetting();
	USMF_PortInit();
 43c:	24 de       	rcall	.-952    	; 0x86 <USMF_PortInit>
	USMF_ExternalInterruptInit();
 43e:	2f de       	rcall	.-930    	; 0x9e <USMF_ExternalInterruptInit>
	USMF_ADCInit();
 440:	b4 de       	rcall	.-664    	; 0x1aa <USMF_ADCInit>
	USMF_TimerZeroInit();
 442:	3c de       	rcall	.-904    	; 0xbc <USMF_TimerZeroInit>
	
	mySerialNumber = USMF_ReadSerialNumber();
 444:	4f de       	rcall	.-866    	; 0xe4 <USMF_ReadSerialNumber>
 446:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mySerialNumber>
 44a:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <mySerialNumber+0x1>
 44e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mySerialNumber+0x2>
 452:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <mySerialNumber+0x3>
	ReadDefaultParmaFromEEPROM();
 456:	73 de       	rcall	.-794    	; 0x13e <ReadDefaultParmaFromEEPROM>
	
	sei();
 458:	78 94       	sei
	USMF_StatusInit();
 45a:	37 de       	rcall	.-914    	; 0xca <USMF_StatusInit>
			TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
	
			uint8_t packetType =0;
			struct TypeZeroPacket rx_message0;

			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 45c:	0a e1       	ldi	r16, 0x1A	; 26
 45e:	11 e0       	ldi	r17, 0x01	; 1
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
					
					if(rxSerialNumber == mySerialNumber)
					{
						PORTC = LED_GREEN_ON;
 460:	68 94       	set
 462:	ee 24       	eor	r14, r14
 464:	e2 f8       	bld	r14, 2
						else
						{
							MY_ID = EPR_ID;
						}
							
						SN_ReceiveSuccessFallingF = 1;
 466:	ff 24       	eor	r15, r15
 468:	f3 94       	inc	r15
	
    while(1)
    {

		
		if(G_isSameValue == 1){
 46a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	41 f5       	brne	.+80     	; 0x4c2 <main+0x90>
			//PORTB ^= (1<<PB1);
			G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= G_preBitValue << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 472:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <G_preBitValue>
 476:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <G_plcRxBitCnt>
 47a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <G_plcRxBitCnt>
 47e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <G_plcRxBitCnt>
 482:	e6 95       	lsr	r30
 484:	e6 95       	lsr	r30
 486:	e6 95       	lsr	r30
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	e6 5e       	subi	r30, 0xE6	; 230
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	50 81       	ld	r21, Z
 490:	89 2f       	mov	r24, r25
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	46 95       	lsr	r20
 498:	46 95       	lsr	r20
 49a:	46 95       	lsr	r20
 49c:	68 e0       	ldi	r22, 0x08	; 8
 49e:	46 9f       	mul	r20, r22
 4a0:	20 19       	sub	r18, r0
 4a2:	31 09       	sbc	r19, r1
 4a4:	11 24       	eor	r1, r1
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <main+0x7a>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	2a 95       	dec	r18
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <main+0x76>
 4b0:	85 2b       	or	r24, r21
 4b2:	80 83       	st	Z, r24
			G_plcRxBitCnt++;
 4b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <G_plcRxBitCnt>
			G_isSameValue = 0;
 4be:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			
			
		}
		if(G_plcRxBitCnt>=PLC_RX_MAXBIT){
 4c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 4c6:	84 32       	cpi	r24, 0x24	; 36
 4c8:	80 f2       	brcs	.-96     	; 0x46a <main+0x38>
			TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 4ca:	15 bc       	out	0x25, r1	; 37
	
			uint8_t packetType =0;
			struct TypeZeroPacket rx_message0;

			packetType = (G_plcRxBuffer[0] & 0x0F)>>1;
 4cc:	f8 01       	movw	r30, r16
 4ce:	80 81       	ld	r24, Z
							
			switch(packetType)
 4d0:	8f 70       	andi	r24, 0x0F	; 15
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	91 05       	cpc	r25, r1
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <main+0xae>
 4de:	86 c0       	rjmp	.+268    	; 0x5ec <__stack+0xed>
 4e0:	1c f4       	brge	.+6      	; 0x4e8 <main+0xb6>
 4e2:	89 2b       	or	r24, r25
 4e4:	81 f0       	breq	.+32     	; 0x506 <__stack+0x7>
 4e6:	ba c0       	rjmp	.+372    	; 0x65c <__stack+0x15d>
 4e8:	84 30       	cpi	r24, 0x04	; 4
 4ea:	91 05       	cpc	r25, r1
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <main+0xbe>
 4ee:	9c c0       	rjmp	.+312    	; 0x628 <__stack+0x129>
 4f0:	07 97       	sbiw	r24, 0x07	; 7
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <main+0xc4>
 4f4:	b3 c0       	rjmp	.+358    	; 0x65c <__stack+0x15d>
			{
				
				// CCM Mode
				// USM Control
				case IDX_PCLTYPE_ADDR_SET_START :{
					if(SN_ReceiveSuccessFallingF != 1){
 4f6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SN_ReceiveSuccessFallingF>
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	09 f4       	brne	.+2      	; 0x500 <__stack+0x1>
 4fe:	ae c0       	rjmp	.+348    	; 0x65c <__stack+0x15d>
						PORTC = LED_GREEN_OFF;
 500:	18 b8       	out	0x08, r1	; 8
						PORTC = LED_RED_OFF;
 502:	18 b8       	out	0x08, r1	; 8
 504:	ab c0       	rjmp	.+342    	; 0x65c <__stack+0x15d>
				}
				case IDX_PCLTYPE_CCM_USM_ADDR : {
					
					// Serial Number - Control ID Setting
				
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
 506:	f8 01       	movw	r30, r16
 508:	30 81       	ld	r19, Z
 50a:	81 81       	ldd	r24, Z+1	; 0x01
									+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8) 
 50c:	51 81       	ldd	r21, Z+1	; 0x01
 50e:	22 81       	ldd	r18, Z+2	; 0x02
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
 510:	62 81       	ldd	r22, Z+2	; 0x02
 512:	43 81       	ldd	r20, Z+3	; 0x03
 514:	f0 e1       	ldi	r31, 0x10	; 16
 516:	8f 9f       	mul	r24, r31
 518:	c0 01       	movw	r24, r0
 51a:	11 24       	eor	r1, r1
 51c:	99 27       	eor	r25, r25
 51e:	32 95       	swap	r19
 520:	3f 70       	andi	r19, 0x0F	; 15
 522:	83 2b       	or	r24, r19
 524:	09 2e       	mov	r0, r25
 526:	00 0c       	add	r0, r0
 528:	aa 0b       	sbc	r26, r26
 52a:	bb 0b       	sbc	r27, r27
 52c:	5c 01       	movw	r10, r24
 52e:	99 24       	eor	r9, r9
 530:	88 24       	eor	r8, r8
 532:	70 e1       	ldi	r23, 0x10	; 16
 534:	27 9f       	mul	r18, r23
 536:	90 01       	movw	r18, r0
 538:	11 24       	eor	r1, r1
 53a:	33 27       	eor	r19, r19
 53c:	85 2f       	mov	r24, r21
 53e:	82 95       	swap	r24
 540:	8f 70       	andi	r24, 0x0F	; 15
 542:	f9 01       	movw	r30, r18
 544:	e8 2b       	or	r30, r24
 546:	cf 01       	movw	r24, r30
 548:	09 2e       	mov	r0, r25
 54a:	00 0c       	add	r0, r0
 54c:	aa 0b       	sbc	r26, r26
 54e:	bb 0b       	sbc	r27, r27
 550:	ba 2f       	mov	r27, r26
 552:	a9 2f       	mov	r26, r25
 554:	98 2f       	mov	r25, r24
 556:	88 27       	eor	r24, r24
 558:	88 0d       	add	r24, r8
 55a:	99 1d       	adc	r25, r9
 55c:	aa 1d       	adc	r26, r10
 55e:	bb 1d       	adc	r27, r11
 560:	f0 e1       	ldi	r31, 0x10	; 16
 562:	4f 9f       	mul	r20, r31
 564:	a0 01       	movw	r20, r0
 566:	11 24       	eor	r1, r1
 568:	55 27       	eor	r21, r21
 56a:	62 95       	swap	r22
 56c:	6f 70       	andi	r22, 0x0F	; 15
 56e:	46 2b       	or	r20, r22
 570:	05 2e       	mov	r0, r21
 572:	00 0c       	add	r0, r0
 574:	66 0b       	sbc	r22, r22
 576:	77 0b       	sbc	r23, r23
 578:	84 0f       	add	r24, r20
 57a:	95 1f       	adc	r25, r21
 57c:	a6 1f       	adc	r26, r22
 57e:	b7 1f       	adc	r27, r23
				}
				case IDX_PCLTYPE_CCM_USM_ADDR : {
					
					// Serial Number - Control ID Setting
				
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
 580:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rxSerialNumber>
 584:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rxSerialNumber+0x1>
 588:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <rxSerialNumber+0x2>
 58c:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <rxSerialNumber+0x3>
									+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8) 
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 590:	f8 01       	movw	r30, r16
 592:	b3 80       	ldd	r11, Z+3	; 0x03
 594:	24 81       	ldd	r18, Z+4	; 0x04
					
					if(rxSerialNumber == mySerialNumber)
 596:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <mySerialNumber>
 59a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <mySerialNumber+0x1>
 59e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mySerialNumber+0x2>
 5a2:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <mySerialNumber+0x3>
 5a6:	84 17       	cp	r24, r20
 5a8:	95 07       	cpc	r25, r21
 5aa:	a6 07       	cpc	r26, r22
 5ac:	b7 07       	cpc	r27, r23
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__stack+0xb3>
 5b0:	55 c0       	rjmp	.+170    	; 0x65c <__stack+0x15d>
					// Serial Number - Control ID Setting
				
					rxSerialNumber = ((uint32_t)(((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1]&0x0F) << 4)) <<16)
									+((uint32_t)(((G_plcRxBuffer[1]&0xF0) >> 4) | ((G_plcRxBuffer[2]&0x0F) << 4)) <<8) 
									+((( G_plcRxBuffer[2]&0xF0) >> 4) | ((G_plcRxBuffer[3]&0x0F) << 4));
					rx_message0.controlID		 = ((G_plcRxBuffer[3]&0xF0) >> 4) | ((G_plcRxBuffer[4]&0x0F) << 4);
 5b2:	b6 94       	lsr	r11
 5b4:	b6 94       	lsr	r11
 5b6:	b6 94       	lsr	r11
 5b8:	b6 94       	lsr	r11
 5ba:	f0 e1       	ldi	r31, 0x10	; 16
 5bc:	2f 9f       	mul	r18, r31
 5be:	c0 01       	movw	r24, r0
 5c0:	11 24       	eor	r1, r1
 5c2:	b8 2a       	or	r11, r24
					
					if(rxSerialNumber == mySerialNumber)
					{
						PORTC = LED_GREEN_ON;
 5c4:	e8 b8       	out	0x08, r14	; 8
						EPR_ID = eeprom_read_byte((uint8_t *)7);
 5c6:	87 e0       	ldi	r24, 0x07	; 7
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	44 d1       	rcall	.+648    	; 0x854 <eeprom_read_byte>
 5cc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <EPR_ID>
							
						if(EPR_ID != rx_message0.controlID)
 5d0:	b8 16       	cp	r11, r24
 5d2:	39 f0       	breq	.+14     	; 0x5e2 <__stack+0xe3>
						{
							
							MY_ID = rx_message0.controlID;
 5d4:	b0 92 0c 01 	sts	0x010C, r11	; 0x80010c <MY_ID>
							eeprom_write_byte((uint8_t *)7, rx_message0.controlID);
 5d8:	6b 2d       	mov	r22, r11
 5da:	87 e0       	ldi	r24, 0x07	; 7
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	42 d1       	rcall	.+644    	; 0x864 <eeprom_write_byte>
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__stack+0xe7>
						}
						else
						{
							MY_ID = EPR_ID;
 5e2:	b0 92 0c 01 	sts	0x010C, r11	; 0x80010c <MY_ID>
						}
							
						SN_ReceiveSuccessFallingF = 1;
 5e6:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <SN_ReceiveSuccessFallingF>
 5ea:	38 c0       	rjmp	.+112    	; 0x65c <__stack+0x15d>
					break;
				}
				case IDX_PCLTYPE_CCM_USM_CNTL : {
					// USM Control
					
					if( SN_ReceiveSuccessFallingF == 1)
 5ec:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SN_ReceiveSuccessFallingF>
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	a1 f5       	brne	.+104    	; 0x65c <__stack+0x15d>
					{
								
						rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 5f4:	f8 01       	movw	r30, r16
 5f6:	60 81       	ld	r22, Z
 5f8:	91 81       	ldd	r25, Z+1	; 0x01
 5fa:	62 95       	swap	r22
 5fc:	6f 70       	andi	r22, 0x0F	; 15
 5fe:	f0 e1       	ldi	r31, 0x10	; 16
 600:	9f 9f       	mul	r25, r31
 602:	c0 01       	movw	r24, r0
 604:	11 24       	eor	r1, r1
 606:	68 2b       	or	r22, r24
						rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 608:	f8 01       	movw	r30, r16
 60a:	71 81       	ldd	r23, Z+1	; 0x01
 60c:	72 95       	swap	r23
 60e:	7f 70       	andi	r23, 0x0F	; 15
						rx_message1.data = G_plcRxBuffer[2];
 610:	22 81       	ldd	r18, Z+2	; 0x02
							
						tx_message.sensor_status	= 0;
 612:	1a 82       	std	Y+2, r1	; 0x02

						if(rx_message1.controlID == MY_ID)
 614:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <MY_ID>
 618:	68 13       	cpse	r22, r24
 61a:	20 c0       	rjmp	.+64     	; 0x65c <__stack+0x15d>
						{
							//PORTC = LED_GREEN_ON;
							//PORTC ^= (1<<PC3);	
							USMF_SensorOPMControl(rx_message1, &tx_message);
 61c:	ae 01       	movw	r20, r28
 61e:	4f 5f       	subi	r20, 0xFF	; 255
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	82 2f       	mov	r24, r18
 624:	ac de       	rcall	.-680    	; 0x37e <USMF_SensorOPMControl>
 626:	1a c0       	rjmp	.+52     	; 0x65c <__stack+0x15d>
				}
					
				//SCM Mode
				case IDX_PCLTYPE_SCM_USM_CNTL : {
					//Sensor Control
					rx_message1.controlID = ((G_plcRxBuffer[0]&0xF0) >> 4) | ((G_plcRxBuffer[1] & 0x0F) << 4);
 628:	f8 01       	movw	r30, r16
 62a:	80 81       	ld	r24, Z
 62c:	91 81       	ldd	r25, Z+1	; 0x01
 62e:	68 2f       	mov	r22, r24
 630:	62 95       	swap	r22
 632:	6f 70       	andi	r22, 0x0F	; 15
 634:	f0 e1       	ldi	r31, 0x10	; 16
 636:	9f 9f       	mul	r25, r31
 638:	c0 01       	movw	r24, r0
 63a:	11 24       	eor	r1, r1
 63c:	68 2b       	or	r22, r24
					rx_message1.OperationMode =  (G_plcRxBuffer[1]&0xF0) >> 4;
 63e:	f8 01       	movw	r30, r16
 640:	71 81       	ldd	r23, Z+1	; 0x01
 642:	72 95       	swap	r23
 644:	7f 70       	andi	r23, 0x0F	; 15
					rx_message1.data = G_plcRxBuffer[2];
 646:	22 81       	ldd	r18, Z+2	; 0x02
						
					tx_message.sensor_status	= 0;
 648:	1a 82       	std	Y+2, r1	; 0x02

					if(rx_message1.controlID == EPR_ID)
 64a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <EPR_ID>
 64e:	69 13       	cpse	r22, r25
 650:	05 c0       	rjmp	.+10     	; 0x65c <__stack+0x15d>
					{
						//PORTC = LED_GREEN_ON;
						USMF_SensorOPMControl(rx_message1, &tx_message);
 652:	ae 01       	movw	r20, r28
 654:	4f 5f       	subi	r20, 0xFF	; 255
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	82 2f       	mov	r24, r18
 65a:	91 de       	rcall	.-734    	; 0x37e <USMF_SensorOPMControl>
					}
					break;
				}
			}
			USMF_StatusInit();
 65c:	36 dd       	rcall	.-1428   	; 0xca <USMF_StatusInit>
 65e:	05 cf       	rjmp	.-502    	; 0x46a <main+0x38>

00000660 <__vector_16>:
}

// 동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
// SCM 에서 1bit time length 만큼의 시간으로 overflow interrupt를 발생시켜 주어야 한다. 
ISR(TIMER0_OVF_vect)
{
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
 66a:	8f 93       	push	r24
	//PORTC ^= (1<<PC2);
	G_isSameValue = 1;
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	TCNT0 = TIMER_INIT_VALUE;
 672:	16 bc       	out	0x26, r1	; 38
}
 674:	8f 91       	pop	r24
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <__vector_1>:

//Start : Falling Edge
ISR (INT0_vect)
{
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	2f 93       	push	r18
 68c:	3f 93       	push	r19
 68e:	4f 93       	push	r20
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
 694:	ef 93       	push	r30
 696:	ff 93       	push	r31
	TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 698:	15 bc       	out	0x25, r1	; 37
	TCNT0 = TIMER_INIT_VALUE;
 69a:	16 bc       	out	0x26, r1	; 38
	TIFR0 &= ~(1<<TOV0);
 69c:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69e:	8a e0       	ldi	r24, 0x0A	; 10
 6a0:	8a 95       	dec	r24
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <__vector_1+0x20>
	//PORTC ^= (1<<PC2);
	_delay_us(30);
	if(!(MYPPNSR & (1<<PPS)))//if(G_RisingF == 0) 
 6a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <MYPPNSR>
 6a8:	80 fd       	sbrc	r24, 0
 6aa:	2d c0       	rjmp	.+90     	; 0x706 <__vector_1+0x86>
	{
		MYPPNSR |= (1<<PNS);//G_FallingF = 1;
 6ac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <MYPPNSR>
 6b0:	82 60       	ori	r24, 0x02	; 2
 6b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 <<(G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3)) ;
 6b6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <G_plcRxBitCnt>
 6ba:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <G_plcRxBitCnt>
 6be:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <G_plcRxBitCnt>
 6c2:	e6 95       	lsr	r30
 6c4:	e6 95       	lsr	r30
 6c6:	e6 95       	lsr	r30
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	e6 5e       	subi	r30, 0xE6	; 230
 6cc:	fe 4f       	sbci	r31, 0xFE	; 254
 6ce:	40 81       	ld	r20, Z
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	96 95       	lsr	r25
 6d4:	96 95       	lsr	r25
 6d6:	96 95       	lsr	r25
 6d8:	88 e0       	ldi	r24, 0x08	; 8
 6da:	98 9f       	mul	r25, r24
 6dc:	20 19       	sub	r18, r0
 6de:	31 09       	sbc	r19, r1
 6e0:	11 24       	eor	r1, r1
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <__vector_1+0x6c>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	2a 95       	dec	r18
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <__vector_1+0x68>
 6f0:	84 2b       	or	r24, r20
 6f2:	80 83       	st	Z, r24
		G_preBitValue = 1;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <G_preBitValue>
		G_plcRxBitCnt++;
 6fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 6fe:	8f 5f       	subi	r24, 0xFF	; 255
 700:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <G_plcRxBitCnt>
 704:	1a c0       	rjmp	.+52     	; 0x73a <__vector_1+0xba>
	}
	else
	{
		MYPPNSR &= ~(1<<PNS);//G_FallingF = 0;
 706:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <MYPPNSR>
 70a:	8d 7f       	andi	r24, 0xFD	; 253
 70c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 710:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 714:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 718:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <G_plcRxBitCnt>
 71c:	e6 95       	lsr	r30
 71e:	e6 95       	lsr	r30
 720:	e6 95       	lsr	r30
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	e6 5e       	subi	r30, 0xE6	; 230
 726:	fe 4f       	sbci	r31, 0xFE	; 254
 728:	80 81       	ld	r24, Z
 72a:	80 83       	st	Z, r24
		G_preBitValue = 0;
 72c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <G_preBitValue>
		G_plcRxBitCnt++;
 730:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <G_plcRxBitCnt>
	}
	
	//동일한 값이 오면 인터럽트 루틴을 타지 못하기 때문에 타이머로 체크
	
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 73e:	16 bc       	out	0x26, r1	; 38
	TIFR0 = (1<<TOV0);
 740:	85 bb       	out	0x15, r24	; 21
	

	EIFR  = (1<<INTF0) |(1<<INTF1);
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	8c bb       	out	0x1c, r24	; 28
}
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <__vector_2>:

//Start : Rising Edge
ISR (INT1_vect)
{
 75e:	1f 92       	push	r1
 760:	0f 92       	push	r0
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	0f 92       	push	r0
 766:	11 24       	eor	r1, r1
 768:	2f 93       	push	r18
 76a:	3f 93       	push	r19
 76c:	4f 93       	push	r20
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
	TCCR0B = (0<<CS02) | (0<<CS01) | (0<<CS00);
 776:	15 bc       	out	0x25, r1	; 37
	TCNT0 = TIMER_INIT_VALUE;
 778:	16 bc       	out	0x26, r1	; 38
	TIFR0 &= ~(1<<TOV0);
 77a:	a8 98       	cbi	0x15, 0	; 21
 77c:	8a e0       	ldi	r24, 0x0A	; 10
 77e:	8a 95       	dec	r24
 780:	f1 f7       	brne	.-4      	; 0x77e <__vector_2+0x20>
	//PORTB ^= (1<<PB0);
	_delay_us(30);
	if(!(MYPPNSR & (1<<PNS)))//if(G_FallingF == 0)
 782:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <MYPPNSR>
 786:	81 fd       	sbrc	r24, 1
 788:	2d c0       	rjmp	.+90     	; 0x7e4 <__vector_2+0x86>
	{
		MYPPNSR |= (1<<PPS);//G_RisingF = 1;
 78a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <MYPPNSR>
 78e:	81 60       	ori	r24, 0x01	; 1
 790:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 1 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 794:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <G_plcRxBitCnt>
 798:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <G_plcRxBitCnt>
 79c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <G_plcRxBitCnt>
 7a0:	e6 95       	lsr	r30
 7a2:	e6 95       	lsr	r30
 7a4:	e6 95       	lsr	r30
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	e6 5e       	subi	r30, 0xE6	; 230
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	40 81       	ld	r20, Z
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	96 95       	lsr	r25
 7b2:	96 95       	lsr	r25
 7b4:	96 95       	lsr	r25
 7b6:	88 e0       	ldi	r24, 0x08	; 8
 7b8:	98 9f       	mul	r25, r24
 7ba:	20 19       	sub	r18, r0
 7bc:	31 09       	sbc	r19, r1
 7be:	11 24       	eor	r1, r1
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <__vector_2+0x6c>
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	2a 95       	dec	r18
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <__vector_2+0x68>
 7ce:	84 2b       	or	r24, r20
 7d0:	80 83       	st	Z, r24
		G_preBitValue = 1;
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <G_preBitValue>
		G_plcRxBitCnt++;
 7d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 7dc:	8f 5f       	subi	r24, 0xFF	; 255
 7de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <G_plcRxBitCnt>
 7e2:	1a c0       	rjmp	.+52     	; 0x818 <__vector_2+0xba>
	}
	else
	{
		MYPPNSR &= ~(1<<PPS);//G_RisingF = 0;
 7e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <MYPPNSR>
 7e8:	8e 7f       	andi	r24, 0xFE	; 254
 7ea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <MYPPNSR>
		G_plcRxBuffer[(G_plcRxBitCnt>>3)] |= 0 << (G_plcRxBitCnt - ((G_plcRxBitCnt>>3) << 3));
 7ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 7f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 7f6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <G_plcRxBitCnt>
 7fa:	e6 95       	lsr	r30
 7fc:	e6 95       	lsr	r30
 7fe:	e6 95       	lsr	r30
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	e6 5e       	subi	r30, 0xE6	; 230
 804:	fe 4f       	sbci	r31, 0xFE	; 254
 806:	80 81       	ld	r24, Z
 808:	80 83       	st	Z, r24
		G_preBitValue = 0;
 80a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <G_preBitValue>
		G_plcRxBitCnt++;
 80e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <G_plcRxBitCnt>
 812:	8f 5f       	subi	r24, 0xFF	; 255
 814:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <G_plcRxBitCnt>
	}
	
	TCCR0B = (0<<CS02) | (0<<CS01) | (1<<CS00);
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	85 bd       	out	0x25, r24	; 37
	TCNT0 = TIMER_INIT_VALUE;
 81c:	16 bc       	out	0x26, r1	; 38
	TIFR0 = (1<<TOV0);
 81e:	85 bb       	out	0x15, r24	; 21
	

	EIFR  = (1<<INTF0) |(1<<INTF1);	
 820:	83 e0       	ldi	r24, 0x03	; 3
 822:	8c bb       	out	0x1c, r24	; 28
}
 824:	ff 91       	pop	r31
 826:	ef 91       	pop	r30
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	4f 91       	pop	r20
 82e:	3f 91       	pop	r19
 830:	2f 91       	pop	r18
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <__umulhisi3>:
 83c:	a2 9f       	mul	r26, r18
 83e:	b0 01       	movw	r22, r0
 840:	b3 9f       	mul	r27, r19
 842:	c0 01       	movw	r24, r0
 844:	a3 9f       	mul	r26, r19
 846:	01 d0       	rcall	.+2      	; 0x84a <__umulhisi3+0xe>
 848:	b2 9f       	mul	r27, r18
 84a:	70 0d       	add	r23, r0
 84c:	81 1d       	adc	r24, r1
 84e:	11 24       	eor	r1, r1
 850:	91 1d       	adc	r25, r1
 852:	08 95       	ret

00000854 <eeprom_read_byte>:
 854:	f9 99       	sbic	0x1f, 1	; 31
 856:	fe cf       	rjmp	.-4      	; 0x854 <eeprom_read_byte>
 858:	92 bd       	out	0x22, r25	; 34
 85a:	81 bd       	out	0x21, r24	; 33
 85c:	f8 9a       	sbi	0x1f, 0	; 31
 85e:	99 27       	eor	r25, r25
 860:	80 b5       	in	r24, 0x20	; 32
 862:	08 95       	ret

00000864 <eeprom_write_byte>:
 864:	26 2f       	mov	r18, r22

00000866 <eeprom_write_r18>:
 866:	f9 99       	sbic	0x1f, 1	; 31
 868:	fe cf       	rjmp	.-4      	; 0x866 <eeprom_write_r18>
 86a:	1f ba       	out	0x1f, r1	; 31
 86c:	92 bd       	out	0x22, r25	; 34
 86e:	81 bd       	out	0x21, r24	; 33
 870:	20 bd       	out	0x20, r18	; 32
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	f8 94       	cli
 876:	fa 9a       	sbi	0x1f, 2	; 31
 878:	f9 9a       	sbi	0x1f, 1	; 31
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	08 95       	ret

00000880 <_exit>:
 880:	f8 94       	cli

00000882 <__stop_program>:
 882:	ff cf       	rjmp	.-2      	; 0x882 <__stop_program>
